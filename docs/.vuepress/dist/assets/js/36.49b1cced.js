(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{241:function(e,n,t){e.exports=t.p+"assets/img/luoxiaosheng.3e3f64f6.svg"},242:function(e,n,t){e.exports=t.p+"assets/img/luoxiaosheng_learning.c39ce245.svg"},243:function(e,n,t){e.exports=t.p+"assets/img/luoxiaosheng_wechat.8efd3324.svg"},333:function(e,n,t){"use strict";t.r(n);var a=t(14),r=Object(a.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"_0-1learning"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_0-1learning"}},[e._v("#")]),e._v(" 0-1Learning")]),e._v(" "),n("p",[n("img",{attrs:{src:t(241),alt:"alt text",title:"公众号"}}),e._v(" "),n("img",{attrs:{src:t(242),alt:"alt text",title:"学习"}}),e._v(" "),n("img",{attrs:{src:t(243),alt:"alt text",title:"微信"}})]),e._v(" "),n("h2",{attrs:{id:"android特色开发"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#android特色开发"}},[e._v("#")]),e._v(" Android特色开发")]),e._v(" "),n("h3",{attrs:{id:"位置服务简介"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#位置服务简介"}},[e._v("#")]),e._v(" 位置服务简介")]),e._v(" "),n("p",[e._v("基于位置的服务简称LBS，主要的工作原理就是利用无线电通讯网络或GPS 等定位方式来确定出移动设备所在的位置")]),e._v(" "),n("h4",{attrs:{id:"找到自己的位置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#找到自己的位置"}},[e._v("#")]),e._v(" 找到自己的位置")]),e._v(" "),n("p",[e._v("用GPS 定位，精准度比较高，但是非常耗电，室内无法接受卫星信号\n使用网络定位，的精准度稍差，但耗电量比较少")]),e._v(" "),n("p",[e._v("android原生定位：国内有墙，无法使用\n第三方SDK：高德或者百度，参考官方文档")]),e._v(" "),n("h3",{attrs:{id:"传感器简介"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#传感器简介"}},[e._v("#")]),e._v(" 传感器简介")]),e._v(" "),n("p",[e._v("手机中内置的传感器是一种微型的物理设备，它能够探测、感受到外界的信号，并按一定规律转换成我们所需要的信息。\nAndroid 手机通常都会支持多种类型的传感器，如光照传感右器、加速度传感器、地磁传感器、压力传感器、温度传感器等。")]),e._v(" "),n("h3",{attrs:{id:"光照传感器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#光照传感器"}},[e._v("#")]),e._v(" 光照传感器")]),e._v(" "),n("p",[e._v("Android 中每个传感器的用法其实都比较类似，真的可以说是一通百通了。")]),e._v(" "),n("p",[e._v("首先第一步要获取到SensorManager 的实例，方法如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("SensorManager senserManager = (SensorManager)\ngetSystemService(Context.SENSOR_SERVICE);\n")])])]),n("p",[e._v("SensorManager是系统所有传感器的管理器，有了它的实例之后就可以调用getDefaultSensor()方法来得到任意的传感器类型了，如下所示：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Sensor sensor = senserManager.getDefaultSensor(Sensor.TYPE_LIGHT);\n")])])]),n("p",[e._v("这里使用Sensor.TYPE_LIGHT 常量来指定传感器类型，此时的Sensor 实例就代表着一个光照传感器。Sensor 中还有很多其他传感器类型的常量，。")]),e._v(" "),n("p",[e._v("接下来我们需要对传感器输出的信号进行监听，这就要借助SensorEventListener 来实现了。\nSensorEventListener 是一个接口，其中定义了onSensorChanged()和onAccuracyChanged()\n这两个方法，如下所示：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("SensorEventListener listener = new SensorEventListener() {\n    @Override\n    public void onAccuracyChanged(Sensor sensor, int accuracy) {\n    }\n    @Override\n    public void onSensorChanged(SensorEvent event) {\n    }\n};\n")])])]),n("p",[e._v("当传感器的精度发生变化时就会调用onAccuracyChanged()方法，\n当传感器监测到的数值发生变化时就会调用onSensorChanged()方法。\n可以看到onSensorChanged()方法中传入了一个SensorEvent 参数，这个参数里又包含了一个values 数组，所有传感器输出的信息都是存放在这里的。")]),e._v(" "),n("p",[e._v("下面我们还需要调用SensorManager 的registerListener()方法来注册SensorEventListener才能使其生效，\nregisterListener()方法接收三个参数，\n第一个参数就是SensorEventListener 的实例，\n第二个参数是Sensor 的实例，这两个参数我们在前面都已经成功得到了。\n第三个参数是用于表示传感器输出信息的更新速率，共有SENSOR_DELAY_UI、SENSOR_DELAY_NORMAL、SENSOR_DELAY_GAME 和SENSOR_DELAY_FASTEST 这四种值可选，它们的更新速率是依次递增的。\n因此，注册一个SensorEventListener 就可以写成：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("senserManager.registerListener(listener, senser, SensorManager.SENSOR_DELAY_NORMAL);\n")])])]),n("p",[e._v("另外始终要记得，当程序退出或传感器使用完毕时，一定要调用unregisterListener ()方法将使用的资源释放掉，如下所示：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("sensorManager.unregisterListener(listener);\n")])])]),n("h3",{attrs:{id:"光照传感器-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#光照传感器-2"}},[e._v("#")]),e._v(" 光照传感器")]),e._v(" "),n("p",[e._v("Sensor sensor = sensorManager.getDefaultSensor(Sensor.TYPE_LIGHT);")]),e._v(" "),n("h3",{attrs:{id:"加速度传感器的用法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#加速度传感器的用法"}},[e._v("#")]),e._v(" 加速度传感器的用法")]),e._v(" "),n("p",[e._v("Sensor sensor = sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);")]),e._v(" "),n("h3",{attrs:{id:"模仿微信摇一摇"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#模仿微信摇一摇"}},[e._v("#")]),e._v(" 模仿微信摇一摇")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('public class MainActivity extends Activity {\n    private SensorManager sensorManager;\n    \n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        sensorManager = (SensorManager) getSystemService(Context.SENSOR_SERVICE);\n        Sensor sensor = sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);\n        sensorManager.registerListener(listener, sensor, SensorManager.SENSOR_DELAY_NORMAL);\n    }\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n        if (sensorManager != null) {\n        sensorManager.unregisterListener(listener);\n        }\n    }\n    private SensorEventListener listener = new SensorEventListener() {\n        @Override\n        public void onSensorChanged(SensorEvent event) {\n            // 加速度可能会是负值，所以要取它们的绝对值\n            float xValue = Math.abs(event.values[0]);\n            float yValue = Math.abs(event.values[1]);\n            float zValue = Math.abs(event.values[2]);\n            if (xValue > 15 || yValue > 15 || zValue > 15) {\n            // 认为用户摇动了手机，触发摇一摇逻辑\n            Toast.makeText(MainActivity.this, "摇一摇",\n            Toast.LENGTH_SHORT).show();\n            }\n        }\n        @Override\n        public void onAccuracyChanged(Sensor sensor, int accuracy) {\n        \n        }\n    };\n}\n\n')])])]),n("h3",{attrs:{id:"方向传感器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#方向传感器"}},[e._v("#")]),e._v(" 方向传感器")]),e._v(" "),n("p",[e._v("Sensor sensor = sensorManager.getDefaultSensor(Sensor.TYPE_ORIENTATION);")]),e._v(" "),n("p",[e._v("之后在onSensorChanged()方法中通过SensorEvent 的values 数组，就可以得到传感器输\n出的所有值了。方向传感器会记录手机在所有方向上的旋转角度，如图12.3 所示。\n其中，values[0]记录着手机围绕Z 轴的旋转角度，values[1] 记录着手机围绕X 轴的旋转角度，values[2] 记录着手机围绕Y 轴的旋转角度。")]),e._v(" "),n("p",[e._v("看起来很美好是吗？但遗憾的是，Android 早就废弃了Sensor.TYPE_ORIENTATION 这种传感器类型，虽然代码还是有效的，但已经不再推荐这么写了。\n事实上，Android 获取手机旋转的方向和角度是通过加速度传感器和地磁传感器共同计算得出的，这也是Android 目前推荐使用的方式。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("首先我们需要分别获取到加速度传感器和地磁传感器的实例，并给它们注册监听器，如下所示：\nSensor accelerometerSensor = sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);\nSensor magneticSensor = sensorManager.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);\nsensorManager.registerListener(listener, accelerometerSensor,SensorManager.SENSOR_DELAY_GAME);\nsensorManager.registerListener(listener, magneticSensor,SensorManager.SENSOR_DELAY_GAME);\n\n由于方向传感器的精确度要求通常都比较高，这里我们把传感器输出信息的更新速率提高了一些，使用的是SENSOR_DELAY_GAME。\n\n接下来在onSensorChanged()方法中可以获取到SensorEvent 的values 数组，\n分别记录着加速度传感器和地磁传感器输出的值。然后将这两个值传入到SensorManager 的\ngetRotationMatrix()方法中就可以得到一个包含旋转矩阵的R 数组，如下所示：\n\nSensorManager.getRotationMatrix(R, null, accelerometerValues, magneticValues);\n第一个参数R 是一个长度为9 的float 数组，getRotationMatrix()方法计算出的旋转数据就会赋值到这个数组当中。\n第二个参数是一个用于将地磁向量转换成重力坐标的旋转矩阵，通常指定为null 即可。\n第三和第四个参数则分别就是加速度传感器和地磁传感器输出的values 值。\n\n得到了R 数组之后，接着就可以调用SensorManager 的getOrientation()方法来计算手机的旋转数据了，如下所示：\nSensorManager.getOrientation(R, values);\nvalues 是一个长度为3 的float 数组，手机在各个方向上的旋转数据都会被存放到这个数组当中。\nvalues[0]记录着手机围绕着图12.3 中Z 轴的旋转弧度，\nvalues[1]记录着手机围绕X 轴的旋转弧度，\nvalues[2]记录着手机围绕Y 轴的旋转弧度。\n\n注意这里计算出的数据都是以弧度为单位的，因此如果你想将它们转换成角度还需要调用如下方法：\nMath.toDegrees(values[0]);\n")])])]),n("h3",{attrs:{id:"制作简易指南针"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#制作简易指南针"}},[e._v("#")]),e._v(" 制作简易指南针")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('public class MainActivity extends Activity {\n    private SensorManager sensorManager;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        sensorManager = (SensorManager) getSystemService(Context.SENSOR_SERVICE);\n        Sensor magneticSensor = sensorManager.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);\n        Sensor accelerometerSensor = sensorManager.getDefaultSensor(\n        Sensor.TYPE_ACCELEROMETER);\n        sensorManager.registerListener(listener, magneticSensor,\n        SensorManager.SENSOR_DELAY_GAME);\n        sensorManager.registerListener(listener, accelerometerSensor,\n        SensorManager.SENSOR_DELAY_GAME);\n    }\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n        if (sensorManager != null) {\n        sensorManager.unregisterListener(listener);\n        }\n    }\n    private SensorEventListener listener = new SensorEventListener() {\n        float[] accelerometerValues = new float[3];\n        float[] magneticValues = new float[3];\n        @Override\n        public void onSensorChanged(SensorEvent event) {\n            // 判断当前是加速度传感器还是地磁传感器\n            if (event.sensor.getType() == Sensor.TYPE_ACCELEROMETER) {\n                // 注意赋值时要调用clone()方法\n                accelerometerValues = event.values.clone();\n            } else if (event.sensor.getType() == Sensor.TYPE_MAGNETIC_FIELD) {\n                // 注意赋值时要调用clone()方法\n                magneticValues = event.values.clone();\n            }\n            float[] R = new float[9];\n            float[] values = new float[3];\n            SensorManager.getRotationMatrix(R, null, accelerometerValues,\n            magneticValues);\n            SensorManager.getOrientation(R, values);\n            Log.d("MainActivity", "value[0] is " + Math.toDegrees(values[0]));\n        }\n        @Override\n        public void onAccuracyChanged(Sensor sensor, int accuracy) {\n        }\n    };\n}\n\n')])])]),n("h3",{attrs:{id:"全局获取context"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#全局获取context"}},[e._v("#")]),e._v(" 全局获取Context")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public class MyApplication extends Application {\n    private static Context context;\n    @Override\n    public void onCreate() {\n        context = getApplicationContext();\n    }\n    public static Context getContext() {\n        return context;\n    }\n}\n")])])]),n("h3",{attrs:{id:"使用intent-传递对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用intent-传递对象"}},[e._v("#")]),e._v(" 使用Intent 传递对象")]),e._v(" "),n("p",[e._v("在Intent 中添加一些附加数据，以达到传值的效果，\n比如在FirstActivity 中添加如下代码：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('Intent intent = new Intent(FirstActivity.this, SecondActivity.class);\nintent.putExtra("string_data", "hello");\nintent.putExtra("int_data", 100);\nstartActivity(intent);\n这里调用了Intent 的putExtra()方法来添加要传递的数据，之后在SecondActivity 中就可\n以得到这些值了，代码如下所示：\ngetIntent().getStringExtra("string_data");\ngetIntent().getIntExtra("int_data", 0);\n')])])]),n("p",[e._v("但是不知道你有没有发现，putExtra()方法中所支持的数据类型是有限的，虽然常用的一\n些数据类型它都会支持，但是当你想去传递一些自定义对象的时候就会发现无从下手。")]),e._v(" "),n("p",[e._v("Serializable 方式")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('public class Person implements Serializable{\n。。。\n\nPerson person = new Person();\nperson.setName("Tom");\nperson.setAge(20);\nIntent intent = new Intent(FirstActivity.this, SecondActivity.class);\nintent.putExtra("person_data", person);\nstartActivity(intent);\n\n获取这个对象也很简单，写法如下：\nPerson person = (Person) getIntent().getSerializableExtra("person_data");\n')])])]),n("p",[e._v("Parcelable 方式")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('public class Person implements Parcelable {\n    private String name;\n    private int age;\n    ……\n    @Override\n    public int describeContents() {\n        return 0;\n    }\n    @Override\n    public void writeToParcel(Parcel dest, int flags) {\n        dest.writeString(name); // 写出name\n        dest.writeInt(age); // 写出age\n    }\n    public static final Parcelable.Creator<Person> CREATOR = new Parcelable.Creator<Person>() {\n        @Override\n        public Person createFromParcel(Parcel source) {\n            Person person = new Person();\n            person.name = source.readString(); // 读取name\n            person.age = source.readInt(); // 读取age\n            return person;\n        }\n        @Override\n        public Person[] newArray(int size) {\n            return new Person[size];\n        }\n    };\n}\n\n获取对象\nPerson person = (Person) getIntent().getParcelableExtra("person_data");\n')])])])])}),[],!1,null,null,null);n.default=r.exports}}]);