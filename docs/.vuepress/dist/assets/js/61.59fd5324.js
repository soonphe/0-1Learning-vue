(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{241:function(t,a,n){t.exports=n.p+"assets/img/luoxiaosheng.3e3f64f6.svg"},242:function(t,a,n){t.exports=n.p+"assets/img/luoxiaosheng_learning.c39ce245.svg"},243:function(t,a,n){t.exports=n.p+"assets/img/luoxiaosheng_wechat.8efd3324.svg"},360:function(t,a,n){"use strict";n.r(a);var l=n(14),s=Object(l.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_0-1learning"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0-1learning"}},[t._v("#")]),t._v(" 0-1Learning")]),t._v(" "),a("p",[a("img",{attrs:{src:n(241),alt:"alt text",title:"公众号"}}),t._v(" "),a("img",{attrs:{src:n(242),alt:"alt text",title:"学习"}}),t._v(" "),a("img",{attrs:{src:n(243),alt:"alt text",title:"微信"}})]),t._v(" "),a("h2",{attrs:{id:"面对对象基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面对对象基础"}},[t._v("#")]),t._v(" 面对对象基础")]),t._v(" "),a("p",[t._v("###简介")]),t._v(" "),a("ul",[a("li",[t._v("面向过程就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候一个一个依次调用就可以了。")]),t._v(" "),a("li",[t._v("面向对象是把构成问题事务分解成各个对象，建立对象的目的不是为了完成一个步骤，而是为了描叙某个事物在整个解决问题的步骤中的行为。")])]),t._v(" "),a("h3",{attrs:{id:"要点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#要点"}},[t._v("#")]),t._v(" 要点")]),t._v(" "),a("ul",[a("li",[t._v("类和对象的关系")]),t._v(" "),a("li",[t._v("构造器的特征和作用")]),t._v(" "),a("li",[t._v("对象创建的内存模型")]),t._v(" "),a("li",[t._v("访问权限修饰符简介")]),t._v(" "),a("li",[t._v("this关键字")])]),t._v(" "),a("h3",{attrs:{id:"面对对象的编程思想"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面对对象的编程思想"}},[t._v("#")]),t._v(" 面对对象的编程思想")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("面向过程编程(ATM提款机终端系统)")]),t._v(" "),a("ul",[a("li",[t._v("1、用户输入的取款密码是否正确。如果正确，进入取款界面。如果错误，提示用户重新输入；")]),t._v(" "),a("li",[t._v("2、取款界面用户输入金额，判断用户余额是否足够。如果余额不足，取款失败。如果余额足够，取款机按照用户输入金额点钞；")]),t._v(" "),a("li",[t._v("3、点钞过程中，如果提款机内的余额不足，取款失败。如果取款机内余额足够，即吐出钞票，打印票据。")])])]),t._v(" "),a("li",[a("p",[t._v("面向过程编程考虑的问题是程序运行的流程，主要是程序的算法，而数据只是在必要的时候插入到算法中间")])]),t._v(" "),a("li",[a("p",[t._v("面向对象编程(ATM提款机终端系统)")]),t._v(" "),a("ul",[a("li",[t._v("客户")]),t._v(" "),a("li",[t._v("银行卡")]),t._v(" "),a("li",[t._v("现金")]),t._v(" "),a("li",[t._v("票据")])])]),t._v(" "),a("li",[a("p",[t._v("这些对象没有先后顺序，共同作用才构成了整个系统。我们只要用代码设计出这几个类型的对象，然后让他们互相通信、传递消息就可以完成系统功能。")])]),t._v(" "),a("li",[a("p",[t._v("显然这里面考虑到的是如何设计出构成系统的各对象类型，在面向对象中称为“类”，而不仅仅是考虑到系统运行的流程。")])]),t._v(" "),a("li",[a("p",[t._v("当然面向对象也要考虑到系统的流程，只不过这些流程存在于不同的类中。")])]),t._v(" "),a("li",[a("p",[t._v("面向对象编程思想：")]),t._v(" "),a("ul",[a("li",[t._v("实际上是一种新的思维方式，从一个新的视角来考虑问题。 它以认知论为基础，使用对象的概念来理解和分析问题空间(项目分析)，然后设计和开发由对象构成的软件系统。")]),t._v(" "),a("li",[t._v("这样分析问题(项目分析)和解决问题(项目设计)都通过对象完成，避免了像面向过程那样，由于问题空间和解决空间不一致引起的麻烦。")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("实际上面向对象就是人类认识客观世界的方式")]),t._v("！")])])]),t._v(" "),a("h3",{attrs:{id:"类的定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类的定义"}},[t._v("#")]),t._v(" 类的定义")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("设计一个系统时必定要分析组成系统的对象有哪些，找出其中有相同特征的对象，利用这些特征创建一个蓝图。")])]),t._v(" "),a("li",[a("p",[t._v("这个蓝图就是类，是面向对象的核心概念，它应该描述了对象 的特征。")])]),t._v(" "),a("li",[a("p",[t._v("任何对象的特征都可以分成两个方面：")]),t._v(" "),a("ul",[a("li",[t._v("一个是描述对象包含的数据特征---实例变量；")]),t._v(" "),a("li",[t._v("另一个是描述对象表现的行为特征---函数。")])])]),t._v(" "),a("li",[a("p",[t._v("所以类由两部分组成，即实例变量和函数，在面向对象学中称 为属性和方法。")])]),t._v(" "),a("li",[a("p",[t._v("类的格式：")])]),t._v(" "),a("li",[a("p",[t._v("修饰符一般为public，也可以没有修饰符。")])]),t._v(" "),a("li",[a("p",[t._v("注意类名的命名规范。")])]),t._v(" "),a("li",[a("p",[t._v("类的成员：")]),t._v(" "),a("ul",[a("li",[t._v("变量成员")]),t._v(" "),a("li",[t._v("函数成员")])])])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('修饰符 class 类名\n{\n类的成员；\n}\n//例1\npublic class Car{ \n    String color;\n    int doorNumber; \n    double topSpeed;\n    String type;\n    String name;\n    public void speedUp(){\n\n    }\n    public void speedDown(){\n\n    }\n    public void brake(){\n\n    }\n}\t\n\n//例2\npublic class Person{\n\tStr\ting name;\n\tint\tage;\n\tdou\tble height;\n\t\t\n\tpub\tlic void sayHello(){\n\t\tSystem.out.println("Hello");\n}\t}\n\n')])])]),a("h3",{attrs:{id:"编写类应该注意的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编写类应该注意的问题"}},[t._v("#")]),t._v(" 编写类应该注意的问题")]),t._v(" "),a("ul",[a("li",[t._v("虽然在代码编写时属性和方法不分先后顺序，但是尽量将属性写在类的顶端，把方法写在类的底端。")])]),t._v(" "),a("h3",{attrs:{id:"创建对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建对象"}},[t._v("#")]),t._v(" 创建对象")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("创建Person类的一个对象p\n//类名  对象名   内存分配操作符  类名\nPerson\tp\t=\tnew\tPerson();")])]),t._v(" "),a("li",[a("p",[t._v("再创建Person类对象q\nPerson\tq\t=\tnew\tPerson();")])])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('//例1\n01\tpublic class Test{\n02\tpublic static void main(String[ ] args){ \n03\tPerson p = new Person();\n04\tp.name="zhangsan";\n05\tp.age=33;\n06\tp.height=1.73;\n07\tp.sayHello();\n08\tPerson q = new Person(); \n09\tq.name="lisi";\n10\tq.age=44;\n11\tq.height=1.74;\n12\tq.sayHello(); 13\t}\n14\t}\n')])])]),a("h3",{attrs:{id:"构造器constructor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构造器constructor"}},[t._v("#")]),t._v(" 构造器Constructor")]),t._v(" "),a("ul",[a("li",[t._v("类中特殊的方法\n"),a("ul",[a("li",[t._v("一般情况权限为public；")]),t._v(" "),a("li",[t._v("没有返回值类型，不要写void；")]),t._v(" "),a("li",[t._v("方法名称与类名完全一致；")]),t._v(" "),a("li",[t._v("作用：完成对象的创建，即完成对象的实例化；")]),t._v(" "),a("li",[t._v("不能直接调用，只能由内存分配操作符（new）来调用。")])])])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('public class Person{\n    String name; \n    int age; \n    double height;\n    public Person( String n,int a, double h) {\n        name=n;\n        age=a; \n        height=h;\n    }\n    public void sayHello(){\n        System.out.println("Hello, my name is "+name);\n    }\n}\n\n')])])]),a("h3",{attrs:{id:"构造器重载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构造器重载"}},[t._v("#")]),t._v(" 构造器重载")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("01\tpublic class Person{\n02\tString name;\n03\tint age;\n04\tdouble height;\n05\t\n06\tpublic Person(){\n07\t}\n08\t\tpublic Person( String n,int a, double h){\n09\t\tname=n;\n10\t\tage=a;\n11\t\theight=h;\n12\t\t}\n13\t}\n\n")])])]),a("h3",{attrs:{id:"构造器重载-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构造器重载-2"}},[t._v("#")]),t._v(" 构造器重载")]),t._v(" "),a("ul",[a("li",[t._v("与类同名的无参构造器")])]),t._v(" "),a("h3",{attrs:{id:"对象创建的内存模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象创建的内存模型"}},[t._v("#")]),t._v(" 对象创建的内存模型")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("内存的类别")]),t._v(" "),a("ul",[a("li",[t._v("栈stack")]),t._v(" "),a("li",[t._v("堆heap")])])]),t._v(" "),a("li",[a("p",[t._v("堆和栈分别存储哪些变量？")])])]),t._v(" "),a("h3",{attrs:{id:"访问对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#访问对象"}},[t._v("#")]),t._v(" 访问对象")]),t._v(" "),a("ul",[a("li",[t._v("在其他类中或main方法中，若想访问对象的属性或方法必须先 实例化这个类，然后通过对象名(引用)和点操作符完成：\n"),a("ul",[a("li",[t._v("对象名.属性名")]),t._v(" "),a("li",[t._v("对象名.方法名()")])])]),t._v(" "),a("li",[t._v("在类内的方法中，访问本类的属性和方法就可以直接访问。")]),t._v(" "),a("li",[t._v("注：上面提到的“类内方法”仅指类内的非静态方法。")])]),t._v(" "),a("h3",{attrs:{id:"匿名对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#匿名对象"}},[t._v("#")]),t._v(" 匿名对象")]),t._v(" "),a("ul",[a("li",[t._v("有时为了使用方便简捷，我们直接使用匿名对象。")]),t._v(" "),a("li",[t._v("匿名对象没有对象名，对它的使用是一次性的，使用完毕马上就变成垃圾。")])]),t._v(" "),a("h3",{attrs:{id:"访问权限修饰符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#访问权限修饰符"}},[t._v("#")]),t._v(" 访问权限修饰符")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("public > protected > friendly > private")])]),t._v(" "),a("li",[a("p",[t._v("public权限")]),t._v(" "),a("ul",[a("li",[t._v("最大的权限，没有任何限制")])])]),t._v(" "),a("li",[a("p",[t._v("private权限")]),t._v(" "),a("ul",[a("li",[t._v("最小的权限，只限类内部访问")])])])]),t._v(" "),a("h3",{attrs:{id:"this关键字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#this关键字"}},[t._v("#")]),t._v(" this关键字")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("代表对象自身的引用")]),t._v(" "),a("ul",[a("li",[t._v("一个引用")]),t._v(" "),a("li",[t._v("指向调用该方法的当前对象")])])]),t._v(" "),a("li",[a("p",[t._v("形参名与属性名相同时必须使用this")])])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('public class Person{\n    private String name;\n    private int age; \n    private double height;\n    public Person(String name, int age){\n        this.name = name; this.age = age;\n    }\n    public void sayHello(){\n        System.out.println("Hello, my name is "+name);\n    }\n}\n')])])])])}),[],!1,null,null,null);a.default=s.exports}}]);