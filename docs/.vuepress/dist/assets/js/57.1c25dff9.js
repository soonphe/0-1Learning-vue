(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{241:function(v,_,t){v.exports=t.p+"assets/img/luoxiaosheng.3e3f64f6.svg"},242:function(v,_,t){v.exports=t.p+"assets/img/luoxiaosheng_learning.c39ce245.svg"},243:function(v,_,t){v.exports=t.p+"assets/img/luoxiaosheng_wechat.8efd3324.svg"},356:function(v,_,t){"use strict";t.r(_);var a=t(14),r=Object(a.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"_0-1learning"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_0-1learning"}},[v._v("#")]),v._v(" 0-1Learning")]),v._v(" "),_("p",[_("img",{attrs:{src:t(241),alt:"alt text",title:"公众号"}}),v._v(" "),_("img",{attrs:{src:t(242),alt:"alt text",title:"学习"}}),v._v(" "),_("img",{attrs:{src:t(243),alt:"alt text",title:"微信"}})]),v._v(" "),_("h2",{attrs:{id:"数据格式和运算符"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数据格式和运算符"}},[v._v("#")]),v._v(" 数据格式和运算符")]),v._v(" "),_("h3",{attrs:{id:"简介"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[v._v("#")]),v._v(" 简介")]),v._v(" "),_("p",[v._v("在日常生活中，人们会用到大量数据，像去ATM机取款，首先，需要插入银行卡，这个过程其实就是ATM机的系统在获取银行卡号这个数据，而后，输入密码，这个过程也是在获取数据，也就是密码。在后续进行的业务处理中，像存钱、取钱、转帐汇款等等，银行卡号和密码会被反复的、频繁的使用， 那就需要一个存储这些数据的地方。")]),v._v(" "),_("p",[v._v("在软件系统中，是将数据存储在内存之中的，而对内存中的数据的引用就是变量，可以理解为变量就是内存中数据的代词。")]),v._v(" "),_("p",[v._v("简单说， 变量就是指代在内存中开辟的存储空间，用于存放运算过程中需要用到的数据。")]),v._v(" "),_("h3",{attrs:{id:"java命名规范"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#java命名规范"}},[v._v("#")]),v._v(" Java命名规范")]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[v._v("元素")]),v._v(" "),_("th",[v._v("规范")]),v._v(" "),_("th",[v._v("示例")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("类名")]),v._v(" "),_("td",[v._v("Pascal规则")]),v._v(" "),_("td",[v._v("Person StudentDemo")])]),v._v(" "),_("tr",[_("td",[v._v("变量名")]),v._v(" "),_("td",[v._v("Camel规则")]),v._v(" "),_("td",[v._v("age\theight\tavgValue")])]),v._v(" "),_("tr",[_("td",[v._v("函数名")]),v._v(" "),_("td",[v._v("Camel规则")]),v._v(" "),_("td",[v._v("getAge\tsetUserName")])]),v._v(" "),_("tr",[_("td",[v._v("包名")]),v._v(" "),_("td",[v._v("全部小写")]),v._v(" "),_("td",[v._v("com.soonphe")])]),v._v(" "),_("tr",[_("td",[v._v("常量名")]),v._v(" "),_("td",[v._v("全部大写")]),v._v(" "),_("td",[v._v("MAX_VALUE")])])])]),v._v(" "),_("h3",{attrs:{id:"_8种基本类型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_8种基本类型"}},[v._v("#")]),v._v(" 8种基本类型")]),v._v(" "),_("ul",[_("li",[v._v("整型\n"),_("ul",[_("li",[v._v("byte")]),v._v(" "),_("li",[v._v("short")]),v._v(" "),_("li",[v._v("int")]),v._v(" "),_("li",[v._v("long")])])]),v._v(" "),_("li",[v._v("浮点型\n"),_("ul",[_("li",[v._v("float")]),v._v(" "),_("li",[v._v("double")])])]),v._v(" "),_("li",[v._v("字符型\n"),_("ul",[_("li",[v._v("char")])])]),v._v(" "),_("li",[v._v("布尔型\n"),_("ul",[_("li",[v._v("boolean")])])])]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[v._v("类型")]),v._v(" "),_("th",[v._v("内存大小")]),v._v(" "),_("th",[v._v("备注")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("byte")]),v._v(" "),_("td",[v._v("1 bytes")]),v._v(" "),_("td",[v._v("-2的7次方~2的7次方-1")])]),v._v(" "),_("tr",[_("td",[v._v("short")]),v._v(" "),_("td",[v._v("2 bytes")]),v._v(" "),_("td",[v._v("-2的15次方~2的15次方-1")])]),v._v(" "),_("tr",[_("td",[v._v("int")]),v._v(" "),_("td",[v._v("4 bytes")]),v._v(" "),_("td",[v._v("-2的31次方~2的31次方-1")])]),v._v(" "),_("tr",[_("td",[v._v("long")]),v._v(" "),_("td",[v._v("8 bytes")]),v._v(" "),_("td",[v._v("-2的63次方~2的63次方-1")])]),v._v(" "),_("tr",[_("td",[v._v("float")]),v._v(" "),_("td",[v._v("4 bytes")]),v._v(" "),_("td",[v._v("表示约6-7位有效数字")])]),v._v(" "),_("tr",[_("td",[v._v("double")]),v._v(" "),_("td",[v._v("8 bytes")]),v._v(" "),_("td",[v._v("表示约15位有效数字")])]),v._v(" "),_("tr",[_("td",[v._v("char")]),v._v(" "),_("td",[v._v("8 bytes")]),v._v(" "),_("td",[v._v("表示约15位有效数字")])]),v._v(" "),_("tr",[_("td",[v._v("boolean")]),v._v(" "),_("td",[v._v("8 bytes")]),v._v(" "),_("td",[v._v("表示约15位有效数字")])])])]),v._v(" "),_("p",[_("strong",[v._v("整型")])]),v._v(" "),_("ul",[_("li",[v._v("十进制形式\n"),_("ul",[_("li",[v._v("255")])])]),v._v(" "),_("li",[v._v("八进制形式\n"),_("ul",[_("li",[v._v("0377")])])]),v._v(" "),_("li",[v._v("十六进制形式\n"),_("ul",[_("li",[v._v("0XFF\t0xff")])])])]),v._v(" "),_("p",[_("strong",[v._v("浮点型")])]),v._v(" "),_("ul",[_("li",[v._v("普通形式\n"),_("ul",[_("li",[v._v("3.14\t3.14d\t3.14f")])])]),v._v(" "),_("li",[v._v("科学计数法\n"),_("ul",[_("li",[v._v("3.14E5\t3E4D 3e-5f")])])])]),v._v(" "),_("p",[_("strong",[v._v("字符型(char)")])]),v._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[v._v("char a= 'a';  // 单个字符或数字，可以是汉字，因为是Unicode编码。需要加单引号。等同于 char c=97\nchar b= 98;  //十进制数，八进制数，十六进制数都可以; //可以用整数赋值【整数范围：0~65535】。输出字符编码表中对应的字符。\nchar c='\\uxxxx';  //用字符的Unicode编码值来初始化，如：char='\\u0000',表示空字符，它的ascll码是0，这句话的意思和 char c=0 是一个意思。\nchar c='\\数字';   //同上，如：char='\\0'\nchar aa='n';     //非转义字符， 等同于 char c=110\nchar aa='\\n';    //转义字符，为ASCII换行符，等同于 char c=10\n\n// char运算：在JAVA中，对char类型字符运行时，直接当做ASCII表对应的整数来对待；char类型是可以运算的因为char在ASCII等字符编码表中有对应的数值。\n// char+char，char+int——类型均提升为int，附值char变量后，输出字符编码表中对应的字符。\nchar m=‘a’+1;　　 --\x3eb //提升为int，计算结果98对应的字符是b。\n\nchar x1 = 'A';        //自增和自减操作符可以用在char类型变量上，这会得到字符之前或者之后的Unicode字符\nSystem.out.println(++x1); //输出B\n")])])]),_("ul",[_("li",[v._v("2字节，16位。char在java中是16位，因为java用的是Unicode。一个16位的编码所能产生的字符只有65536个（2的16次方）。")]),v._v(" "),_("li",[v._v("Unicode码包括ASCII码。大多数计算机采用ASCII（美国标准信息交换码），它是表示所有大小写字母、数字、标点符号和控制字符的8位编码表。从'\\u0000'到'\\u007F'对应128个ASCII字符(7*16+16=128)。")]),v._v(" "),_("li",[v._v("为什么char类型的变量可以赋值为整型数字？ 因为char在java中是unicode编码。Java中对char型数据，在内存中存的就是整数，对应一张ASCII码表。 比如说字符知 ‘A’ 对应的是65，字符 ‘a’ 对应的是97 ，所以char c1 = ‘A’ ; 等效于 char c1 = 65 ;")]),v._v(" "),_("li",[v._v("字符型数据既可以作为一个字符使用，也可以作为一个整数使用，所以char型数据可以和int型数据进行运算！比如 ‘A’ + 1 的结果如果用char型变量接收就是 ‘B’ ， 用int型变量接收就是66；char c = ‘A’+1; 最后c为’B’；int i = ‘A’ + 1 ; 最后i为 66")]),v._v(" "),_("li",[v._v("虽然char型是以整数存储，但是和int型还是有一定区别的，表现在取值范围上： char型 占2个字节 无符号 范围是0~65535，所以char c = 65536 就会报错了，专因为越界了")]),v._v(" "),_("li",[v._v("注意：转义字符与字符串的区别")])]),v._v(" "),_("p",[v._v("说明：Java中，反斜杠来表示转义字符，\\u是转义字符，用u是unicode的缩写，表示后面跟一个十六进制数，通过这个十六进制数来指定一个Unicode字符;")]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[v._v("转义字符")]),v._v(" "),_("th",[v._v("含义")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("\\n")]),v._v(" "),_("td",[v._v("换行")])]),v._v(" "),_("tr",[_("td",[v._v("\\t")]),v._v(" "),_("td",[v._v("制表符")])]),v._v(" "),_("tr",[_("td",[v._v("\\\\")]),v._v(" "),_("td",[v._v("反斜杠")])]),v._v(" "),_("tr",[_("td",[v._v("'")]),v._v(" "),_("td",[v._v("单引号")])]),v._v(" "),_("tr",[_("td",[v._v("''")]),v._v(" "),_("td",[v._v("双引号")])]),v._v(" "),_("tr",[_("td",[v._v("\\uxxxx")]),v._v(" "),_("td",[v._v("Unicode编码字符")])])])]),v._v(" "),_("p",[_("strong",[v._v("布尔型(boolean)")])]),v._v(" "),_("ul",[_("li",[v._v("只能代表布尔值")]),v._v(" "),_("li",[v._v("值为true或false")]),v._v(" "),_("li",[v._v("不能与整型相互转换")])]),v._v(" "),_("p",[_("strong",[v._v("String和char异同点")])]),v._v(" "),_("ul",[_("li",[v._v("类型不同，char是字符类型， String是字符串类型，String不是基本类型之一")]),v._v(" "),_("li",[v._v("String字符串是用\"\"来包含串的， char是用''来包含单字符的。")]),v._v(" "),_("li",[v._v("String内部用来存储的结果是一个char字符数组。")])]),v._v(" "),_("h3",{attrs:{id:"常量池"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#常量池"}},[v._v("#")]),v._v(" 常量池")]),v._v(" "),_("p",[v._v("字符串之所以特殊，是因为java会在内容中为String类型的对像开辟一个空间，叫串池(StringTable[])，字符串对象的创建之后会被放入到串池中。串池有一个特点，就是对于相同对象，池中只存储一份。")]),v._v(" "),_("p",[v._v("StringTable[]在结构上其实是一个hash表，且长度固定，不能扩容；")]),v._v(" "),_("p",[v._v('String a="abc";和String b="abc" 对于这样的类型的声明方式（不是new出来的）串池把他们看做一个对象，所以池中只存储一分，只是有a 和b 两个引用罢了！对于String只要用new关键字new出来的string，都是单独的一个对象。')]),v._v(" "),_("p",[_("strong",[v._v("常量池的作用：")]),v._v("\n每一个class文件都有一个常量池，常量池保存着class的常量信息：字面量和符号引用。通俗来说，常量池就是class文件中的资源仓库，保存了文件运行时需要的常量信息，这些常量都是开发者定义出来的。")]),v._v(" "),_("p",[v._v("我们知道，每一个class文件都是javac编译来的，在编译过程中，java并没有保存方法、字段的内存布局，在运行时必须加载解析这些常量信息才能够将其翻译到具体的内存地址加以使用。")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("字面量\n通俗的讲，字面量就是由字母、数字构成的字符串或数值。且字面量只可以右值出现，例如 a = 123, 123就是字面量。在这里要注意，编译后运行前，字符串也是字面量，也会存在常量池中，只不过这里的常量池就像个静态池。")])]),v._v(" "),_("li",[_("p",[v._v("符号引用\n符号引用是编译原理中的概念，是相对于直接引用来的，主要包括以下三类常量：类的全限定名，字段的名称和描述符以及方法的名称和描述符。简单来说，就是存储了类和方法的入口信息。方便运行时加载入实际内存中。\n类的全限定名：就是类名全称，带包路径的，用点隔开，例如java.lang.String\n字段的名称和描述符：这里的难点在于字段是什么？字段和属性不同，其实就是类变量（static修饰的变量）\n方法的名称和描述符：这个很好理解，就是方法名，修饰符，参数")])])]),v._v(" "),_("p",[_("strong",[v._v("运行时常量池")]),v._v("\n与常量池一样，每一个class在加载时都会有一个对应的运行时常量池，将方法区/元空间的常量池中的class文件加载进来时，常量池中的信息也会放到运行时常量池中，要注意的一点是，常量池中的字符串数据会被放到串池中（字符串常量池）")]),v._v(" "),_("p",[_("strong",[v._v("字符串常量池")]),v._v("\n就是在运行时保存字符串的池子，被放在堆中，而且全局唯一，这是和常量池与运行时常量池不一样的地方。之所以这么设计，是因为字符串不可更改，线程安全，因此可以共用，减少开销。")]),v._v(" "),_("h3",{attrs:{id:"数据类型分类"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数据类型分类"}},[v._v("#")]),v._v(" 数据类型分类")]),v._v(" "),_("ul",[_("li",[v._v("数据类型\n"),_("ul",[_("li",[v._v("基本类型 (primitive)\n"),_("ul",[_("li",[v._v("byte  short  int\tlong")]),v._v(" "),_("li",[v._v("float  double")]),v._v(" "),_("li",[v._v("char")]),v._v(" "),_("li",[v._v("boolean")])])]),v._v(" "),_("li",[v._v("引用类型 (reference)\n"),_("ul",[_("li",[v._v("类 (class)")]),v._v(" "),_("li",[v._v("接口 (interface)")]),v._v(" "),_("li",[v._v("数组(array)")])])])])])]),v._v(" "),_("h3",{attrs:{id:"数据类型转换规则"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数据类型转换规则"}},[v._v("#")]),v._v(" 数据类型转换规则")]),v._v(" "),_("p",[_("strong",[v._v("基础类型转换规则")])]),v._v(" "),_("ul",[_("li",[v._v("自动转换")]),v._v(" "),_("li",[v._v("强制转换：使用(类型)完成强制转换")])]),v._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[v._v("int c=1;\nfloat fc = c; //自动转换，低精度向高精度转换\nchar cc = (char) c; //强制转换\n")])])]),_("hr"),v._v(" "),_("h2",{attrs:{id:"运算符"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#运算符"}},[v._v("#")]),v._v(" 运算符")]),v._v(" "),_("h3",{attrs:{id:"操作符与操作数"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#操作符与操作数"}},[v._v("#")]),v._v(" 操作符与操作数")]),v._v(" "),_("ul",[_("li",[v._v("操作符：也称为运算符，进行运算的符号")]),v._v(" "),_("li",[v._v("操作数：参与运算的变量或常量")])]),v._v(" "),_("h3",{attrs:{id:"操作符的分类"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#操作符的分类"}},[v._v("#")]),v._v(" 操作符的分类")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("一元操作符")]),v._v(" "),_("ul",[_("li",[v._v("例：x++ 只有一个操作数")])])]),v._v(" "),_("li",[_("p",[v._v("二元操作符")]),v._v(" "),_("ul",[_("li",[v._v("例：x+y 有两个操作符")])])]),v._v(" "),_("li",[_("p",[v._v("三元操作符")]),v._v(" "),_("ul",[_("li",[v._v("例：a? x:y 三个操作数")])])]),v._v(" "),_("li",[_("p",[v._v("注：三元操作符在Java中只有一个，而且很少使用，只有条件操作符一种。")])]),v._v(" "),_("li",[_("p",[v._v("从另一个角度，按照操作符参与运算的种类不同，也可以分为以下几种：")]),v._v(" "),_("ul",[_("li",[v._v("算数运算符")]),v._v(" "),_("li",[v._v("关系运算符")]),v._v(" "),_("li",[v._v("逻辑运算符")]),v._v(" "),_("li",[v._v("赋值运算符")]),v._v(" "),_("li",[v._v("位运算符")])])])]),v._v(" "),_("h3",{attrs:{id:"算术运算符"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#算术运算符"}},[v._v("#")]),v._v(" 算术运算符")]),v._v(" "),_("ul",[_("li",[v._v("+\t加法")]),v._v(" "),_("li",[v._v("-\t减法")]),v._v(" "),_("li",[v._v("*\t乘法")]),v._v(" "),_("li",[v._v("/\t除法")]),v._v(" "),_("li",[v._v("%\t取余")])]),v._v(" "),_("h3",{attrs:{id:"关系运算符"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#关系运算符"}},[v._v("#")]),v._v(" 关系运算符")]),v._v(" "),_("ul",[_("li",[v._v(">\t大于")]),v._v(" "),_("li",[v._v(">=\t大于等于")]),v._v(" "),_("li",[v._v("<\t小于")]),v._v(" "),_("li",[v._v("<=\t小于等于")]),v._v(" "),_("li",[v._v("!=\t不等于")]),v._v(" "),_("li",[v._v("==\t等于")])]),v._v(" "),_("h3",{attrs:{id:"逻辑运算符"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#逻辑运算符"}},[v._v("#")]),v._v(" 逻辑运算符")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("&&\t逻辑与")])]),v._v(" "),_("li",[_("p",[v._v("||\t逻辑或")])]),v._v(" "),_("li",[_("p",[v._v("!\t逻辑非")])]),v._v(" "),_("li",[_("p",[v._v("&\t按位与")])]),v._v(" "),_("li",[_("p",[v._v("|\t按位或")])]),v._v(" "),_("li",[_("p",[v._v("短路运算")]),v._v(" "),_("ul",[_("li",[v._v("作用运算符：逻辑与&&，逻辑或||")]),v._v(" "),_("li",[v._v("提高了运算效率")])])])]),v._v(" "),_("h3",{attrs:{id:"赋值运算符"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#赋值运算符"}},[v._v("#")]),v._v(" 赋值运算符")]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[v._v("符号")]),v._v(" "),_("th",[v._v("含义")]),v._v(" "),_("th",[v._v("备注")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("=")]),v._v(" "),_("td",[v._v("x=y;")]),v._v(" "),_("td",[v._v("把变量y的值赋给x")])]),v._v(" "),_("tr",[_("td",[v._v("+=")]),v._v(" "),_("td",[v._v("x+=y;")]),v._v(" "),_("td",[v._v("x=x+y;")])]),v._v(" "),_("tr",[_("td",[v._v("-=")]),v._v(" "),_("td",[v._v("x-=y;")]),v._v(" "),_("td",[v._v("x=x-y;")])]),v._v(" "),_("tr",[_("td",[v._v("*=")]),v._v(" "),_("td",[v._v("x*=y;")]),v._v(" "),_("td",[v._v("x=x*y;")])]),v._v(" "),_("tr",[_("td",[v._v("/=")]),v._v(" "),_("td",[v._v("x/=y;")]),v._v(" "),_("td",[v._v("x=x/y;")])])])]),v._v(" "),_("h3",{attrs:{id:"位运算符"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#位运算符"}},[v._v("#")]),v._v(" 位运算符")]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[v._v("符号")]),v._v(" "),_("th",[v._v("含义")]),v._v(" "),_("th",[v._v("备注")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("&")]),v._v(" "),_("td",[v._v("按位与")]),v._v(" "),_("td",[v._v("x&y;")])]),v._v(" "),_("tr",[_("td",[v._v("|")]),v._v(" "),_("td",[v._v("按位或")]),v._v(" "),_("td",[v._v("x|y;")])]),v._v(" "),_("tr",[_("td",[v._v("^")]),v._v(" "),_("td",[v._v("异或")]),v._v(" "),_("td",[v._v("X^y;")])]),v._v(" "),_("tr",[_("td",[v._v("~")]),v._v(" "),_("td",[v._v("取反")]),v._v(" "),_("td",[v._v("~y;")])]),v._v(" "),_("tr",[_("td",[v._v("<<")]),v._v(" "),_("td",[v._v("有符号左移")]),v._v(" "),_("td",[v._v("x<<y")])]),v._v(" "),_("tr",[_("td",[v._v(">>")]),v._v(" "),_("td",[v._v("有符号右移")]),v._v(" "),_("td",[v._v("x>>y")])]),v._v(" "),_("tr",[_("td",[v._v(">>>")]),v._v(" "),_("td",[v._v("无符号右移")]),v._v(" "),_("td",[v._v("x>>>y")])])])]),v._v(" "),_("h3",{attrs:{id:"运算符优先级"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#运算符优先级"}},[v._v("#")]),v._v(" 运算符优先级")]),v._v(" "),_("ul",[_("li",[v._v("按操作数多少划分\n"),_("ul",[_("li",[v._v("一元操作符 > 二元操作符 > 三元操作符")])])]),v._v(" "),_("li",[v._v("按运算类型划分\n"),_("ul",[_("li",[v._v("算术运算符 > 关系运算符 > 逻辑运算符 > 赋值运算符")])])]),v._v(" "),_("li",[v._v("尽量多的使用括号\n"),_("ul",[_("li",[v._v("括号优先级别最高")])])])]),v._v(" "),_("h3",{attrs:{id:"表达式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#表达式"}},[v._v("#")]),v._v(" 表达式")]),v._v(" "),_("ul",[_("li",[v._v("算术表达式\n"),_("ul",[_("li",[v._v("(x+y-12)*100")])])]),v._v(" "),_("li",[v._v("关系表达式\n"),_("ul",[_("li",[v._v("x>y\tx>=y\tx!=y\tx==y")])])]),v._v(" "),_("li",[v._v("逻辑表达式\n"),_("ul",[_("li",[v._v("x&&y\tx||y||z\t(!x)&&(!y)")])])]),v._v(" "),_("li",[v._v("赋值表达式\n"),_("ul",[_("li",[v._v("x=y x+=y")])])]),v._v(" "),_("li",[v._v("常量表达式\n"),_("ul",[_("li",[v._v("3.14\t100")])])]),v._v(" "),_("li",[v._v("变量表达式\n"),_("ul",[_("li",[v._v("x y")])])])]),v._v(" "),_("h3",{attrs:{id:"表达式数据类型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#表达式数据类型"}},[v._v("#")]),v._v(" 表达式数据类型")]),v._v(" "),_("ul",[_("li",[v._v("表达式的类型取决于表达式中数据类型级别最高的操作数。")]),v._v(" "),_("li",[v._v("类型提升\n"),_("ul",[_("li",[v._v("二元运算符（不包含赋值变体，如+=）和byte short这两种数据类型组成的表达式，其运算结果自动升级为int类型。")])])])])])}),[],!1,null,null,null);_.default=r.exports}}]);