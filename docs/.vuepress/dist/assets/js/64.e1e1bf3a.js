(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{241:function(t,v,e){t.exports=e.p+"assets/img/luoxiaosheng.3e3f64f6.svg"},242:function(t,v,e){t.exports=e.p+"assets/img/luoxiaosheng_learning.c39ce245.svg"},243:function(t,v,e){t.exports=e.p+"assets/img/luoxiaosheng_wechat.8efd3324.svg"},368:function(t,v,e){"use strict";e.r(v);var _=e(14),l=Object(_.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"_0-1learning"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_0-1learning"}},[t._v("#")]),t._v(" 0-1Learning")]),t._v(" "),v("p",[v("img",{attrs:{src:e(241),alt:"alt text",title:"公众号"}}),t._v(" "),v("img",{attrs:{src:e(242),alt:"alt text",title:"学习"}}),t._v(" "),v("img",{attrs:{src:e(243),alt:"alt text",title:"微信"}})]),t._v(" "),v("h2",{attrs:{id:"文件与流io"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#文件与流io"}},[t._v("#")]),t._v(" 文件与流IO")]),t._v(" "),v("p",[v("strong",[t._v("文件是什么？")]),t._v("\n文件是所有数据存储的基本单位，你操作的一切，例如：歌曲，影视，游戏等，都是基于文件计算传输。\n文件有不同的格式，举个例子：文本为什么命名为txt，图片为什么png、jpg等，视频为什么为mp4、avi等，这些格式都有什么特点？")]),t._v(" "),v("p",[v("strong",[t._v("流是什么？")]),t._v("\n大家都知道流重要，事实确实重要，网络传输就是用流，文件的操作也要用流。\n不同的文件用到的流会一样，在Java中，根据处理的数据单位不同，分为字节流和字符流等")]),t._v(" "),v("p",[t._v("IO是什么？")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("IO即是in/out，相对于程序而言的输入(读取)和输出(写出)的过程。")])]),t._v(" "),v("li",[v("p",[t._v("in/out一定要区分方向 如下:")]),t._v(" "),v("ul",[v("li",[t._v("java代表java程序,  disk代表磁盘/硬盘")]),t._v(" "),v("li",[t._v("java <---in--- disk")]),t._v(" "),v("li",[t._v("java ---out--\x3e disk")])])])]),t._v(" "),v("p",[t._v("文件（File）和流(Stream)是既有区别又有联系的两个概念。")]),t._v(" "),v("ul",[v("li",[t._v("文件（File）：\n"),v("ul",[v("li",[t._v("是计算机管理数据的基本单位，同时也是应用程序保存和读取数据的一个重要场所。")]),t._v(" "),v("li",[t._v("存储介质：文件是指在各种存储介质上（如硬盘、可移动磁盘、CD等）永久存储的数据的有序集合，它是进行数据读写操作的基本对象。")]),t._v(" "),v("li",[t._v("特性：每个文件都有文件名、文件所在路径、创建时间及访问仅限等属性")])])]),t._v(" "),v("li",[t._v("流（Stream）\n"),v("ul",[v("li",[t._v("是字节序列的抽象概念，例如文件、输入/输出设备、内部进程通信管道等。流提供一种向后备存储器写入字节和从后备存储器读取字节的方式")]),t._v(" "),v("li",[t._v("存储介质：除了和磁盘文件直接相关的文件流以外，流还有多种类型。流可以分布在网络中、内存中或者是磁带中\n​    * 特性：​程序从输入流读取数据，向输出流写入数据。Java是面向对象的程序语言，每一个数据流都是一个对象，它们提供了各种支持“读入”与“写入”操作的流类。")])])])]),t._v(" "),v("h3",{attrs:{id:"目录"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#目录"}},[t._v("#")]),t._v(" 目录")]),t._v(" "),v("ul",[v("li",[t._v("文件管理\n"),v("ul",[v("li",[t._v("File类的使用与文件操作")])])]),t._v(" "),v("li",[t._v("流的概念及API\n"),v("ul",[v("li",[t._v("流的概念")])])]),t._v(" "),v("li",[t._v("节点流与处理流的使用\n"),v("ul",[v("li",[t._v("节点流")]),t._v(" "),v("li",[t._v("处理流")])])]),t._v(" "),v("li",[t._v("对象的序列化\n"),v("ul",[v("li",[t._v("序列化")]),t._v(" "),v("li",[t._v("transient关键字")])])])]),t._v(" "),v("h3",{attrs:{id:"文件管理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#文件管理"}},[t._v("#")]),t._v(" 文件管理")]),t._v(" "),v("ul",[v("li",[t._v("文件管理的概述\n"),v("ul",[v("li",[v("p",[t._v("Java中的对文件的管理，通过java.io包中的File类实现")])]),t._v(" "),v("li",[v("p",[t._v("Java中文件的管理，主要是针对文件或是目录路径名的管理")]),t._v(" "),v("ul",[v("li",[t._v("文件的属性信息")]),t._v(" "),v("li",[t._v("文件的检查")]),t._v(" "),v("li",[t._v("文件的删除等")]),t._v(" "),v("li",[t._v("不包括文件的访问")])])])])])]),t._v(" "),v("h3",{attrs:{id:"file类"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#file类"}},[t._v("#")]),t._v(" File类")]),t._v(" "),v("ul",[v("li",[t._v("File类\n"),v("ul",[v("li",[t._v("File类的构造方法")])])])]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("File  变量名 = new  File(String pathname) ;\t\nFile 变量名 = new File(String parent,Stirng child) ; \n  File  变量名 = new  File(File parent,Stirng child) ;\t\n")])])]),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("//通过将给定路径名字符串转换成抽象路径名来创建一个新File 实例\nFile f1 = new File (“d:/temp/abc.txt”);\n//根据 parent 路径名字符串和 child 路径名字符串创建一个新File 实例\nFile f3 = new File(“d:/temp”,“abc.txt”);\n//根据 parent 抽象路径名和 child 路径名字符串创建一个新 File实例\nFile f = new File(“d:/temp”);\nFile f4 = new File(f,“abc.txt”);\n")])])]),v("h4",{attrs:{id:"file类常用方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#file类常用方法"}},[t._v("#")]),t._v(" File类常用方法")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("含义")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("boolean createNewFile()")]),t._v(" "),v("td",[t._v("当且仅当不存在具有此抽象路径名指定的名称的文件时，原子地创建由此抽象路径名指定的一个新的空文件。")])]),t._v(" "),v("tr",[v("td",[t._v("static File createTempFile(String prefix,String suffix)")]),t._v(" "),v("td",[t._v("在默认临时文件目录中创建一个空文件，使用给定前缀和后缀生成其名称")])]),t._v(" "),v("tr",[v("td",[t._v("static File createTempFile(String prefix,Stirng suffix,File directory)")]),t._v(" "),v("td",[t._v("在指定目录中创建一个新的空文件，使用给定的前缀和后缀字符串生成其名称")])]),t._v(" "),v("tr",[v("td",[t._v("boolean exists( )")]),t._v(" "),v("td",[t._v("测试此抽象路径名表示的文件或目录是否存在")])]),t._v(" "),v("tr",[v("td",[t._v("boolean delete( )")]),t._v(" "),v("td",[t._v("删除此抽象路径名表示的文件或目录")])]),t._v(" "),v("tr",[v("td",[t._v("boolean equals(Object obj)")]),t._v(" "),v("td",[t._v("测试此抽象路径名与给定对象是否相等")])]),t._v(" "),v("tr",[v("td",[t._v("boolean canRead()")]),t._v(" "),v("td",[t._v("测试应用程序是否可以读取此抽象路径名表示的文件")])]),t._v(" "),v("tr",[v("td",[t._v("boolean canWrite()")]),t._v(" "),v("td",[t._v("测试应用程序是否可以修改此抽象路径名表示的文件")])]),t._v(" "),v("tr",[v("td",[t._v("String[] list( )")]),t._v(" "),v("td",[t._v("返回由此抽象路径名所表示的目录中的文件和目录的名称所组成字符串数组")])]),t._v(" "),v("tr",[v("td",[t._v("String getAbsolutePath( )")]),t._v(" "),v("td",[t._v("返回抽象路径名的绝对路径名字符串")])]),t._v(" "),v("tr",[v("td",[t._v("String getName( )")]),t._v(" "),v("td",[t._v("返回由此抽象路径名表示的文件或目录的名称，不包括路径名称")])]),t._v(" "),v("tr",[v("td",[t._v("String getPath( )")]),t._v(" "),v("td",[t._v("将此抽象路径名转换为一个路径名字符串")])]),t._v(" "),v("tr",[v("td",[t._v("File[] listFiles()")]),t._v(" "),v("td",[t._v("返回一个抽象路径名数组，这些路径名表示此抽象路径名所表示目录中的文件")])]),t._v(" "),v("tr",[v("td",[t._v("boolean renameTo(File dest )")]),t._v(" "),v("td",[t._v("重新命名此抽象路径名表示的文件")])]),t._v(" "),v("tr",[v("td",[t._v("long length( )")]),t._v(" "),v("td",[t._v("返回由此抽象路径名表示的文件的大小，以byte为单位")])]),t._v(" "),v("tr",[v("td",[t._v("boolean mkdir( )")]),t._v(" "),v("td",[t._v("创建此抽象路径名指定的目录")])]),t._v(" "),v("tr",[v("td",[t._v("boolean mkdirs( )")]),t._v(" "),v("td",[t._v("创建此抽象路径名指定的目录，包括创建必需但不存在的父目录。注意，如果此操作失败，可能已成功创建了一些必需的父目录")])])])]),t._v(" "),v("h3",{attrs:{id:"流的概念"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#流的概念"}},[t._v("#")]),t._v(" 流的概念")]),t._v(" "),v("ul",[v("li",[t._v("流的概念\n"),v("ul",[v("li",[v("p",[t._v("流（Stream )的概念代表的是程序中数据的流通")])]),t._v(" "),v("li",[v("p",[t._v("数据流是一串连续不断的数据的集合")])]),t._v(" "),v("li",[v("p",[t._v("在Java程序中，对于数据的输入/输出操作是以流(Stream)的方式进 行的")]),t._v(" "),v("ul",[v("li",[t._v("输入流 — 流入程序的数据")]),t._v(" "),v("li",[t._v("输出流 — 流出程序的数据")]),t._v(" "),v("li",[t._v("在java程序中，从输入流读取数据（读到内存中），而从输出 流输出数据（从内存存储到文件或显示到屏幕上）")])])]),t._v(" "),v("li",[v("p",[t._v("流的分类")])])])]),t._v(" "),v("li",[t._v("按流的方向不同\n"),v("ul",[v("li",[t._v("输入流、输出流")])])]),t._v(" "),v("li",[t._v("按处理数据的单位不同\n"),v("ul",[v("li",[t._v("字节流、字符流")])])]),t._v(" "),v("li",[t._v("按功能不同\n"),v("ul",[v("li",[t._v("节点流、处理流")])])]),t._v(" "),v("li",[t._v("Java语言中，控制数据流的类都放在java.io包中")])]),t._v(" "),v("table",[v("thead",[v("tr",[v("th"),t._v(" "),v("th",[t._v("字节流")]),t._v(" "),v("th",[t._v("字符流")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("输入流")]),t._v(" "),v("td",[t._v("InputStream")]),t._v(" "),v("td",[t._v("Reader")])]),t._v(" "),v("tr",[v("td",[t._v("输出流")]),t._v(" "),v("td",[t._v("OutputStream")]),t._v(" "),v("td",[t._v("Writer")])])])]),t._v(" "),v("ul",[v("li",[t._v("java.io包中有两大继承体系\n"),v("ul",[v("li",[t._v("以byte处理为主的Stream类， 他们的命名方式是XXXStream")]),t._v(" "),v("li",[t._v("以字符处理为主的Reader / Writer类，他们的命名方式XXXReader或XXXWriter")]),t._v(" "),v("li",[t._v("InputStream、OutputStream、Reader、Writer这四个类，是这两大继承体系  的父类")])])])]),t._v(" "),v("h4",{attrs:{id:"字节输入流的主要方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#字节输入流的主要方法"}},[t._v("#")]),t._v(" 字节输入流的主要方法")]),t._v(" "),v("ul",[v("li",[t._v("字节流—InputStream\n"),v("ul",[v("li",[t._v("此抽象类是表示输入字节流的所有类的超类")]),t._v(" "),v("li",[t._v("InputStream常用的方法")])])])]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("含义")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("int read( )")]),t._v(" "),v("td",[t._v("一次读取一个byte的数据，并以int类型把数据返回来，如果没有数据可以读了，会返回”-1”")])]),t._v(" "),v("tr",[v("td",[t._v("int read(byte[] buffer)")]),t._v(" "),v("td",[t._v("把所读取到的数据放在这个byte数组中，返回一个int型的数据，这个int型数据存储了返回的真正读取到的数据byte数")])]),t._v(" "),v("tr",[v("td",[t._v("int read(byte[] buffer,int offset,int length)")]),t._v(" "),v("td",[t._v("读取length个字节，并存储到一个字节数组buffer 中，并从offset位置开始返回实际读取的字节数")])]),t._v(" "),v("tr",[v("td",[t._v("void close( )")]),t._v(" "),v("td",[t._v("关闭此输入流并释放与该流关联的所有系统资源")])])])]),t._v(" "),v("ul",[v("li",[t._v("字节流—OutputStream\n"),v("ul",[v("li",[t._v("此抽象类是表示输出字节流的所有类的超类")]),t._v(" "),v("li",[t._v("OutputStream常用的方法")])])])]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("含义")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("void write(byte[] buffer)")]),t._v(" "),v("td",[t._v("将要输出的数组先放在一个byte数组中，然后用这个方法一次把一组数据输出出去")])]),t._v(" "),v("tr",[v("td",[t._v("void write(byte[] buffer,int off,int len)")]),t._v(" "),v("td",[t._v("将指定字节数组中从偏移量off 开始的len 个字节写入此输出流")])]),t._v(" "),v("tr",[v("td",[t._v("abstract void write(int b)")]),t._v(" "),v("td",[t._v("将指定的字节写入此输出流")])]),t._v(" "),v("tr",[v("td",[t._v("void close( )")]),t._v(" "),v("td",[t._v("关闭此输出流并释放与此流有关的所有系统资源")])]),t._v(" "),v("tr",[v("td",[t._v("void flush( )")]),t._v(" "),v("td",[t._v("刷新此输出流并强制写出所有缓冲的输出字节")])])])]),t._v(" "),v("ul",[v("li",[t._v("字符流— Reader\n"),v("ul",[v("li",[t._v("用于输入字符流的抽象类")]),t._v(" "),v("li",[t._v("Reader常用的方法")])])])]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("含义")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("int read( )")]),t._v(" "),v("td",[t._v("一次读取一个char的数据，并以int类型把数据返回来，如果没有数据可以读了，会返回”-1”")])]),t._v(" "),v("tr",[v("td",[t._v("int read(char[] cbuffer)")]),t._v(" "),v("td",[t._v("把所读取到的数据放在这个char数组中，返回一个int型的数据，这个int型数据存储了返回的真正读取到的数据char数")])]),t._v(" "),v("tr",[v("td",[t._v("int read(char[] cbuffer,int offset,int length)")]),t._v(" "),v("td",[t._v("读取length个字符，并存储到一个字节数组cbuffer中，并从offset位置开始返回实际读取的字符数")])]),t._v(" "),v("tr",[v("td",[t._v("void close( )")]),t._v(" "),v("td",[t._v("关闭此Reader并释放与其关联的所有系统资源")])])])]),t._v(" "),v("ul",[v("li",[t._v("字符流—Writer\n"),v("ul",[v("li",[t._v("输出字符流的抽象类")]),t._v(" "),v("li",[t._v("Writer常用的方法")])])])]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("含义")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("void write(char[] cbuffer)")]),t._v(" "),v("td",[t._v("将要输出的数组先放在一个char数组中，然后用这个方法一次把一组数据输出出去")])]),t._v(" "),v("tr",[v("td",[t._v("void write(char[] cbuffer,int off,int len)")]),t._v(" "),v("td",[t._v("将指定字符数组中从偏移量off 开始的len 个字符写入此输出流")])]),t._v(" "),v("tr",[v("td",[t._v("int write(int b)")]),t._v(" "),v("td",[t._v("将指定的字符写入此输出流")])]),t._v(" "),v("tr",[v("td",[t._v("void write(String str)")]),t._v(" "),v("td",[t._v("写入字符串")])]),t._v(" "),v("tr",[v("td",[t._v("void write(String str, int off,int len)")]),t._v(" "),v("td",[t._v("将指定字符串中从偏移量off 开始的len 个字符写入此输出流")])]),t._v(" "),v("tr",[v("td",[t._v("void close( )")]),t._v(" "),v("td",[t._v("关闭此输出流并释放与此流有关的所有系统资源")])]),t._v(" "),v("tr",[v("td",[t._v("void flush( )")]),t._v(" "),v("td",[t._v("刷新此输出流并强制写出所有缓冲的输出字节")])])])]),t._v(" "),v("h3",{attrs:{id:"节点流"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#节点流"}},[t._v("#")]),t._v(" 节点流")]),t._v(" "),v("ul",[v("li",[t._v("节点流\n"),v("ul",[v("li",[v("p",[t._v("节点流：从一个特定的数据源（节点）读写数据（如：文件、内存） 的类叫做节点流类")])]),t._v(" "),v("li",[v("p",[t._v("这些节点类跟数据源或数据目的地做直接连接用的")])]),t._v(" "),v("li",[v("p",[t._v("在java.io包中，字节继承体系有三种节点类，而字符继承体系有四 种节点类")])])])])]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("类型")]),t._v(" "),v("th",[t._v("字节流")]),t._v(" "),v("th",[t._v("字符流")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("File")]),t._v(" "),v("td",[t._v("FileInputStream、FileOutputStream")]),t._v(" "),v("td",[t._v("FileReader、FileWriter")])]),t._v(" "),v("tr",[v("td",[t._v("Memory Array")]),t._v(" "),v("td",[t._v("ByteArrayInputStream ByteArrayOutputStream")]),t._v(" "),v("td",[t._v("CharArrayReader CharArrayWriter")])]),t._v(" "),v("tr",[v("td",[t._v("Memory String")]),t._v(" "),v("td"),t._v(" "),v("td",[t._v("StringReader、StringWriter")])]),t._v(" "),v("tr",[v("td",[t._v("Piped")]),t._v(" "),v("td",[t._v("PipedInputStream PipedOutputStream")]),t._v(" "),v("td",[t._v("PipedReader PipedWriter")])])])]),t._v(" "),v("h3",{attrs:{id:"节点流方法inputstream"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#节点流方法inputstream"}},[t._v("#")]),t._v(" 节点流方法InputStream")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("含义")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("int read( )")]),t._v(" "),v("td",[t._v("这个方法没有参数，一次读取一个byte的数据，并以int类型把数据返回来，如果没有数据可以读了，会返回”-1”。")])]),t._v(" "),v("tr",[v("td",[t._v("int read(byte[] b)")]),t._v(" "),v("td",[t._v("这个方法有一个byte数据类型的参数，这个方法会把所读取到的数据放在这个byte数组中，返回一个int型的数据，这个int型数据存储了返回的真正读取到的数据byte数。")])]),t._v(" "),v("tr",[v("td",[t._v("int read(byte[] b,int off,int len)")]),t._v(" "),v("td",[t._v("将输入流中最多len 个数据字节读入字节,返回值同上。")])]),t._v(" "),v("tr",[v("td",[t._v("void close( )")]),t._v(" "),v("td",[t._v("关闭此输入流并释放与该流关联的所有系统资源。")])]),t._v(" "),v("tr",[v("td",[t._v("int available( )")]),t._v(" "),v("td",[t._v("获取这个流中还有多少个byte 的数据可以读取。返回值告诉我们还有多少个byte的数据可以读取。注：这个方法会产生IOException异常，另外如果InputStream对象调用这个方法的话，它只会返回0，这个方法必须由继承InputStream类的子类对象调用才有作用。")])]),t._v(" "),v("tr",[v("td",[t._v("long skip(long n)")]),t._v(" "),v("td",[t._v("跳过和放弃此输入流中的n 个数据字节。返回值返回真正跳过的字节数。")])])])]),t._v(" "),v("h4",{attrs:{id:"节点流方法outputstream"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#节点流方法outputstream"}},[t._v("#")]),t._v(" 节点流方法OutputStream")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("含义")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("void write(byte[] b)")]),t._v(" "),v("td",[t._v("将要输出的数组先放在一个byte 数组中，然后用这个方法一次把一组数据输出出去。")])]),t._v(" "),v("tr",[v("td",[t._v("void write(byte[] b, int off, int len)")]),t._v(" "),v("td",[t._v("将指定字节数组中从偏移量off开始的 len 个字节写入此输出流")])]),t._v(" "),v("tr",[v("td",[t._v("void write(int b)")]),t._v(" "),v("td",[t._v("将要输出的byte数据传给这个方法就可。")])]),t._v(" "),v("tr",[v("td",[t._v("void close()")]),t._v(" "),v("td",[t._v("关闭此输出流并释放与此流有关的所有系统资源")])]),t._v(" "),v("tr",[v("td",[t._v("void flush()")]),t._v(" "),v("td",[t._v("刷新此输出流并强制写出所有缓冲的输出字节。")])])])]),t._v(" "),v("ul",[v("li",[v("p",[t._v("节点流的方法— OutputStream")]),t._v(" "),v("ul",[v("li",[t._v("注意：\n"),v("ul",[v("li",[t._v("使用write方法输出数据时，有些数据并不会马上输出到我们指 定的目的，通常会在内存中有个暂存区，有些输出的数据会暂 时存放在这里，如果我们想要立刻把数据输出到目的地，不要 放在暂存区中时，可以调用”flush”这个方法来对暂存区做清除的动作。")]),t._v(" "),v("li",[t._v("同样，数据输出完后，记得把它”close”，在调用close这个方法时，会先调用flush这个方法，以确保所有的数据都已经输出 到目的地了。")])])])])]),t._v(" "),v("li",[v("p",[t._v("节点流的方法— Reader")]),t._v(" "),v("ul",[v("li",[t._v("Reader是输入字符数据用的类，它所提供的方法和InputStream  类一样，差别在于InputStream类中用的是byte类型，而Reader 类中用的是char类型。\n"),v("ul",[v("li",[t._v("注：")])])])])]),t._v(" "),v("li",[v("p",[t._v("Reader类中没有available方法，取而代之的是”ready” 方法，这个方法会去检查Reader对象是否已经准备好输 入数据了，如果是返回true，反之返回false。")])]),t._v(" "),v("li",[v("p",[t._v("节点流的方法 — Writer")]),t._v(" "),v("ul",[v("li",[t._v("Writer类是输出字符数据的类，同样地，提供的方法和OutputStream类中的方法类似，将OutputStream类中用到的byte类型，换成char类型就可。\n"),v("ul",[v("li",[t._v("注：")])])])])]),t._v(" "),v("li",[v("p",[t._v("Writer类另外提供了两个writer方法，所以Writer类有5 个writer方法，多出来的两个只是把char数据换成String 对象而已，方便输出字符的数据。")])])]),t._v(" "),v("h3",{attrs:{id:"文件的访问"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#文件的访问"}},[t._v("#")]),t._v(" 文件的访问")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("文件的访问")]),t._v(" "),v("ul",[v("li",[t._v("了解了流操作的方法和File类的使用后，我们来看看如何访问一个 文件中的数据")]),t._v(" "),v("li",[t._v("在java.io包中，可以利用以下四种节点类来进行文件的访问\n"),v("ul",[v("li",[t._v("FileInputStream")]),t._v(" "),v("li",[t._v("FileOutputStream")]),t._v(" "),v("li",[t._v("FileReader")]),t._v(" "),v("li",[t._v("FileWriter")])])])])]),t._v(" "),v("li",[v("p",[t._v("文件的访问— FileInputStream\t示例 FileInputStreamDemo.java")]),t._v(" "),v("ul",[v("li",[t._v("构造方法")])])])]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("含义")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("FileInputStream(String fileurl)")]),t._v(" "),v("td",[t._v("通过打开一个到实际文件的链接来创建一个FileInputStream，该文件通过文件系统中的路径名指定")])]),t._v(" "),v("tr",[v("td",[t._v("FileInputStream(File fileobj)")]),t._v(" "),v("td",[t._v("通过打开一个到实际文件的连接来创建一个FileInputStream，该文件通过文件系统中的File 对象file 指定")])])])]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("File f = new File(“d:/io/a.txt”);\nFileInputStream fin1 = new FileInputStream(f); \nFileInputStream fin2 = new FileInputStream(“d:/io/b.txt”);\n")])])]),v("ul",[v("li",[t._v("文件的访问— FileReader\t示例 FileReaderDemo.java\n"),v("ul",[v("li",[t._v("构造方法")])])])]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("含义")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("FileReader(String fileurl)")]),t._v(" "),v("td",[t._v("通过打开一个到实际文件的连接来创建一个FileReader，该文件通过文件系统中的路径名指定")])]),t._v(" "),v("tr",[v("td",[t._v("FileReader(File fileobj)")]),t._v(" "),v("td",[t._v("通过打开一个到实际文件的连接来创建一个FileReader，该文件通过文件系统中的File 对象 file 指定")])])])]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("File f = new File(“d:/io/a.txt”);\nFileReader fin1 = new FileReader(file);\nFileReader fin2 = new FileReader(“d:/io/b.txt”);\n")])])]),v("ul",[v("li",[t._v("文件的访问— FileOutputStream\t示例\tFileOutputStreamDemo.java\n"),v("ul",[v("li",[t._v("构造方法")])])])]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("含义")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("FileOutputStream(String fileurl)\t创建一个向路径为fileurl的文件中写入数据的输出文件流")]),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[t._v("FileOutputStream(String fileurl， boolean append)\t创建一个向路径为fileurl的文件中写入数据的输出文件流,并将字节写在文件尾处")]),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[t._v("FileOutputStream(File fileobj)\t创建一个向指定 File对象fileobj表示的文件中写入数据的文件输出流")]),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[t._v("FileOutputStream(File fileobj,boolean append)\t创建一个向指定 File对象fileobj表示的文件中写入数据的文件输出流,并将字节写在文件尾处")]),t._v(" "),v("td")])])]),t._v(" "),v("ul",[v("li",[t._v("文件的访问 — FileWriter\n"),v("ul",[v("li",[t._v("构造方法")])])])]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("含义")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("FileWriter(String fileurl)")]),t._v(" "),v("td",[t._v("创建一个向路径为fileurl的文件中写入数据的输出文件流")])]),t._v(" "),v("tr",[v("td",[t._v("FileWriter(String fileurl，boolean append)")]),t._v(" "),v("td",[t._v("创建一个向路径为fileurl的文件中写入数据的输出文件流,并将字节写在文件尾处")])]),t._v(" "),v("tr",[v("td",[t._v("FileWriter(File fileobj)")]),t._v(" "),v("td",[t._v("创建一个向指定 File对象fileobj表示的文件中写入数据的文件输出流")])]),t._v(" "),v("tr",[v("td",[t._v("FileWriter(File fileobj,boolean append)")]),t._v(" "),v("td",[t._v("创建一个向指定 File对象fileobj表示的文件中写入数据的文件输出流,并将字节写在文件尾处")])])])]),t._v(" "),v("h3",{attrs:{id:"处理流"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#处理流"}},[t._v("#")]),t._v(" 处理流")]),t._v(" "),v("ul",[v("li",[t._v("处理流\n"),v("ul",[v("li",[t._v("只用字节或是字符为单位来对数据做输入输出是不够的，有时候 我们需要一行一行的读数据，有时我们需要读取特定格式的数据， 因此Java提供了这样的机制，能把数据流作连接(chain)，让原本没有特殊访问方法的流，通过连接到特殊的流后，变成可以用特定的方法来访问数据")]),t._v(" "),v("li",[t._v("“连接”在已存在的流（节点流或处理流）之上，通过对数据的 处理为程序提供更为强大的读写功能")]),t._v(" "),v("li",[t._v("处理流类的构造函数中，都必须接收另外一个流对象作为参数")])])])]),t._v(" "),v("h4",{attrs:{id:"常见的处理流类"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#常见的处理流类"}},[t._v("#")]),t._v(" 常见的处理流类")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("种类\\继承体系")]),t._v(" "),v("th",[t._v("字节")]),t._v(" "),v("th",[t._v("字符")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("缓冲(Buffered)")]),t._v(" "),v("td",[t._v("BufferedInputStream, BuueredOutputStream")]),t._v(" "),v("td",[t._v("BufferedReader, BufferedWriter")])]),t._v(" "),v("tr",[v("td",[t._v("字符和字节转换")]),t._v(" "),v("td"),t._v(" "),v("td",[t._v("InputStreamReader, OutputStreamWriter")])]),t._v(" "),v("tr",[v("td",[t._v("对象序列化")]),t._v(" "),v("td",[t._v("ObjectInputStream, ObjectOutputStream")]),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[t._v("特定数据类型访问")]),t._v(" "),v("td",[t._v("DataInputStream, DataOutputStream")]),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[t._v("计数")]),t._v(" "),v("td",[t._v("LineNumberInputStream")]),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[t._v("重复")]),t._v(" "),v("td",[t._v("PushbackInputStream")]),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[t._v("打印")]),t._v(" "),v("td",[t._v("PrintStream")]),t._v(" "),v("td",[t._v("PrintWriter")])])])]),t._v(" "),v("ul",[v("li",[t._v("常见处理流类 — 缓冲流（Buffered）\n"),v("ul",[v("li",[t._v("缓冲流对读写的数据提供了缓冲的功能，提高了读写的效率，同 时增加了一些新的方法")]),t._v(" "),v("li",[t._v("Java提供了以下缓冲流，其构造方法")])])])]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("含义")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("BufferedInputStream(InputStream in)")]),t._v(" "),v("td",[t._v("创建了一个带有32字节缓冲区的缓冲输入流")])]),t._v(" "),v("tr",[v("td",[t._v("BufferedInputStream(InputStream in, int size)")]),t._v(" "),v("td",[t._v("创建了一个带有size大小缓冲区的缓冲输入流")])]),t._v(" "),v("tr",[v("td",[t._v("BufferedOutputStream(OutputStream out)")]),t._v(" "),v("td",[t._v("创建了一个带有32字节缓冲区的缓冲输出流")])]),t._v(" "),v("tr",[v("td",[t._v("BufferedOutputStream(OutputStream out，int size)")]),t._v(" "),v("td",[t._v("创建了一个带有size大小缓冲区的缓冲输出流")])]),t._v(" "),v("tr",[v("td",[t._v("BufferedReader(Reader in)")]),t._v(" "),v("td",[t._v("创建一个使用默认大小输入缓冲区的缓冲字符输入流")])]),t._v(" "),v("tr",[v("td",[t._v("BufferedReader(Reader in,int size)")]),t._v(" "),v("td",[t._v("创建一个使用size大小输入缓冲区的缓冲字符输入流")])]),t._v(" "),v("tr",[v("td",[t._v("BufferedWriter(Writer out)")]),t._v(" "),v("td",[t._v("创建一个使用默认大小输入缓冲区的缓冲字符输出流")])]),t._v(" "),v("tr",[v("td",[t._v("BufferedWriter(Writer out,int size)")]),t._v(" "),v("td",[t._v("创建一个使用size大小输入缓冲区的缓冲字符输出流")])])])]),t._v(" "),v("ul",[v("li",[t._v("常见处理流类 — 缓冲流（Buffered）\n"),v("ul",[v("li",[t._v("缓冲流中的方法\n"),v("ul",[v("li",[t._v("BufferedInputStream支持其父类的mark和reset方法")]),t._v(" "),v("li",[t._v("BufferedWriter提供了readLine方法用于读取一行字符串(以\\r或\\n分隔)")]),t._v(" "),v("li",[t._v("BufferedWriter提供了newLine方法用于写入一个行分隔符")]),t._v(" "),v("li",[t._v("对于BufferedOutputStream和BufferdWriter，写出的数据会先在 内存中缓存，使用flush()方法将使内存中的数据立刻写出")])])])])])]),t._v(" "),v("h3",{attrs:{id:"对象序列化"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#对象序列化"}},[t._v("#")]),t._v(" 对象序列化")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("对象序列化概述")]),t._v(" "),v("ul",[v("li",[t._v("通过使用ObjectInputStream和ObjectOutputStream类保存和读取对 象的机制叫做序列化机制")]),t._v(" "),v("li",[t._v("对象(Object)序列化是指将对象转换为字节序列的过程")]),t._v(" "),v("li",[t._v("反序列化则是根据字节序列恢复对象的过程")]),t._v(" "),v("li",[t._v("序列化一般用于以下场景：\n"),v("ul",[v("li",[t._v("永久性保存对象，保存对象的字节序列到本地文件中")]),t._v(" "),v("li",[t._v("通过序列化对象在网络中传递对象")]),t._v(" "),v("li",[t._v("通过序列化在进程间传递对象")])])])])]),t._v(" "),v("li",[v("p",[t._v("支持序列化的接口和类")]),t._v(" "),v("ul",[v("li",[t._v("序列化的过程，是将任何实现了Serializable接口或Externalizable接口的对象通过ObjectOutputStream类提供的相应方法转换为连续的字节数据，这些数据以后仍可通过ObjectInputStream类提供的相应方法被还原为原来的对象状态，这样就可以将对象完成的保存在本 地文件中，或在网络和进程间传递")]),t._v(" "),v("li",[t._v("支持序列化的接口和类\n"),v("ul",[v("li",[t._v("Serializable接口、Externalizable接口")]),t._v(" "),v("li",[t._v("ObjectInputStream")]),t._v(" "),v("li",[t._v("ObjectOutputStream")])])])])]),t._v(" "),v("li",[v("p",[t._v("Serializable接口")]),t._v(" "),v("ul",[v("li",[t._v("只有一个实现Serializable接口的对象可以被序列化工具存储和 恢复")]),t._v(" "),v("li",[t._v("Serializable接口没有定义任何属性或方法。它只用来表示一个类可以被序列化。如果一个类可以序列化，它的所有子类都可 以序列化")])])]),t._v(" "),v("li",[v("p",[t._v("Externalizable接口")]),t._v(" "),v("ul",[v("li",[t._v("可以让需要序列化的类实现Serializable接口的子接口Externalizable")]),t._v(" "),v("li",[t._v("Externalizable接口表示实现该接口的类在序列化中由该类本身 来控制信息的写出和读入")])])]),t._v(" "),v("li",[v("p",[t._v("ObjectInputStream 类")]),t._v(" "),v("ul",[v("li",[t._v("ObjectInputStream类继承InputStream类，并实现了ObjectInput接口。它负责从流中读取对象")]),t._v(" "),v("li",[t._v("构造方法 \tObjectInputStream(InputStream in)")]),t._v(" "),v("li",[t._v("主要方法\n"),v("ul",[v("li",[t._v("readObject(Object obj)")]),t._v(" "),v("li",[t._v("从指定的InputStream中读取对象")])])])])]),t._v(" "),v("li",[v("p",[t._v("ObjectOutputStream 类")]),t._v(" "),v("ul",[v("li",[t._v("ObjectOutputStream类继承OutputStream类，并实现了ObjectOutput接口。它负责向流写入对象")]),t._v(" "),v("li",[t._v("构造方法   ObjectOutputStream(OutputStream out)")]),t._v(" "),v("li",[t._v("主要方法\n"),v("ul",[v("li",[t._v("writeObject(Object obj)")]),t._v(" "),v("li",[t._v("向指定的OutputStream中写入对象obj")])])])])]),t._v(" "),v("li",[v("p",[t._v("对象序列化的条件")]),t._v(" "),v("ul",[v("li",[t._v("该对象类必须实现Serializable接口")]),t._v(" "),v("li",[t._v("如果该类有直接或者间接的不可序列化的基类，那么该基类必须 有一个默认的构造器。该派生类需要负责将其基类中的数据写入 流中。")]),t._v(" "),v("li",[t._v("建议所有可序列化类都显式声明 serialVersionUID 值。\n"),v("ul",[v("li",[t._v("serialVersionUID在反序列化过程中用于验证序列化对象的发 送者和接收者是否为该对象加载了与序列化兼容的类。")]),t._v(" "),v("li",[t._v("如果接收者加载的该对象的类的 serialVersionUID 与对应的发送者的类的版本号不同，则反序列化将会导致InvalidClassException。")])])])])]),t._v(" "),v("li",[v("p",[t._v("transient 关键字")]),t._v(" "),v("ul",[v("li",[t._v("transient修饰的属性不进行序列化的操作，起到一定消息屏蔽的 效果")]),t._v(" "),v("li",[t._v("被transient修饰的属性可以正确的创建，但被系统赋为默认值。 即int类型为0，String类型为null")])])]),t._v(" "),v("li",[v("p",[t._v("注：ObjectInputStream和ObjectOutputStream类不会保存和读写对象中的transient和static类型的成员变量")])])]),t._v(" "),v("hr"),t._v(" "),v("h3",{attrs:{id:"io模型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#io模型"}},[t._v("#")]),t._v(" IO模型")]),t._v(" "),v("ul",[v("li",[t._v("5种IO模型：\n"),v("ul",[v("li",[t._v("阻塞I/O（blocking IO）")]),t._v(" "),v("li",[t._v("非阻塞I/O（noblocking IO）")]),t._v(" "),v("li",[t._v("I/O复用    (IO multiplexing )")]),t._v(" "),v("li",[t._v("信号驱动I/O (signal driven IO)")]),t._v(" "),v("li",[t._v("异步I/O (asynchronous IO)")])])])]),t._v(" "),v("h3",{attrs:{id:"io分两阶段"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#io分两阶段"}},[t._v("#")]),t._v(" IO分两阶段：")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",[v("code",[t._v("1. 数据准备阶段\n2. 内核空间复制回用户进程缓冲区阶段\n")])])]),v("ul",[v("li",[t._v("一般来讲：阻塞IO模型、非阻塞IO模型、IO复用模型(select/poll/epoll)、信号驱动IO模型都属于同步IO，因为阶段2是阻塞的(尽管时间很短)。")]),t._v(" "),v("li",[t._v("只有异步IO模型是符合异步IO操作含义的，不管在阶段1还是阶段2都可以干别的事。")])]),t._v(" "),v("h4",{attrs:{id:"io框架主要用到什么设计模式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#io框架主要用到什么设计模式"}},[t._v("#")]),t._v(" IO框架主要用到什么设计模式")]),t._v(" "),v("ul",[v("li",[t._v("JDK的I/O包中就主要使用到了两种设计模式：Adatper适配器模式和Decorator装饰者模式。")])]),t._v(" "),v("h4",{attrs:{id:"_5种io模型解析"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5种io模型解析"}},[t._v("#")]),t._v(" 5种IO模型解析：")]),t._v(" "),v("ol",[v("li",[v("p",[t._v("blocking IO（BIO）阻塞IO：")]),t._v(" "),v("ul",[v("li",[t._v("blockingIO的特点就是在IO执行的两个阶段（等待数据和拷贝数据两个阶段）都被block了。")]),t._v(" "),v("li",[t._v("使用recv的默认参数一直等数据直到拷贝到用户空间，这段时间内进程始终阻塞。打个比方，A同学排队买票，他只能排队买上票才可以离开。这一过程就可以看成使用了阻塞       IO模型，因为如果在没买到票之前，他不能离开队伍做别的事情（离开等于白排队，回来又要重新排队）。很显然这种，I/O模型是同步的。")])])]),t._v(" "),v("li",[v("p",[t._v("nonblocking IO（NIO）非阻塞IO：")]),t._v(" "),v("ul",[v("li",[t._v("在非阻塞式IO中，用户进程其实是需要不断的主动询问kernel数据准备好了没有。")]),t._v(" "),v("li",[t._v("在Java 1.4 中引入了NIO框架，对应 java.nio 包，提供了 Channel , Selector，Buffer等抽象")]),t._v(" "),v("li",[t._v("NIO中的N可以理解为Non-blocking，不单纯是New。它支持面向缓冲的，基于通道的I/O操作方法")]),t._v(" "),v("li",[t._v("改变flags,让recv不管有没有获取到数据都返回，如果没有数据那么一段时间后再调用recv看看，如此循环。对比阻塞模型，相当于A同学买票过程中，采用了取号买票，再没有到他前，他可以不断的返回购票大厅看下是不是到了自己的号，中间的过程可以做其他事情。他就不用向之前一样一刻不能离开购票大厅。这就是非阻塞IO模型。但是它只有是检查无数据的时候是非阻塞的，在数据到达的时候依然要等待复制数据到用户空间(到自己的号买上票)，因此它还是同步IO。")])])]),t._v(" "),v("li",[v("p",[t._v("IO multiplexing      IO多路复用：")]),t._v(" "),v("ul",[v("li",[t._v("select/epoll的优势并不是对于单个连接能处理得更快，而是在于能处理更多的连接。")]),t._v(" "),v("li",[t._v("这里在调用recv前先调用select或者poll，这2个系统调用都可以在内核准备好数据(网络数据到达内核)时告知用户进程，这个时候再调用recv一定是有数据的。因此这一过程中它     是阻塞于select或poll，而没有阻塞于recv，有人将非阻塞IO定义成在读写操作时没有阻塞于系统调用的IO操作(不包括数据从内核复制到用户空间时的阻塞，因为这相对于网络IO       来说确实很短暂)，如果按这样理解，这种IO模型也能称之为非阻塞IO模型，但它也是同步IO，那么也和楼上一样称之为同步非阻塞IO吧。")]),t._v(" "),v("li",[t._v("这种IO模型比较特别，分个段。因为它能同时监听多个文件描述符(fd)。举例A同学来北京到南京的车票，发现有一排售票窗口，售票服务人员告诉他这些窗口目前没有票，等有票告诉他。于是等啊等(select调用中)，过了一会售票服务人员告诉他有票了，但不知道是哪个窗口卖北京到南京的车票，自己看吧。于是A同学一个个窗口问，直到找到卖北京到南京车票的窗口买上票(recv)。这里再顺便说说鼎鼎大名的epoll(高性能的代名词啊)，epoll也属于IO复用模型，主要区别在于售票服务人员告诉他A同学哪几个窗口卖北京到南京的车票，不需要一个个去问了。")])])]),t._v(" "),v("li",[v("p",[t._v("signal driven IO     信号驱动IO（在实际中并不常用）：")]),t._v(" "),v("ul",[v("li",[t._v("通过调用sigaction注册信号函数，等内核数据准备好的时候系统中断当前程序，执行信号函数(在这里面调用recv)。A同学让舍售票服务人员等有票的时候通知他(注册信号函数)，    没多久A同学得知有票了，跑去买票。是不是很像异步IO？很遗憾，它还是同步IO(省不了买票的时间啊)。")])])]),t._v(" "),v("li",[v("p",[t._v("asynchronous IO    异步IO：")]),t._v(" "),v("ul",[v("li",[t._v("AIO 也就是 NIO 2。在 Java 7 中引入了 NIO 的改进版 NIO 2,它是异步非阻塞的IO模型")]),t._v(" "),v("li",[t._v("调用aio_read，让内核等数据准备好，并且复制到用户进程空间后执行事先指定好的函数。A同学让售票服务人员帮他买好票后通知他。整个过程A同学都可以做别的事情(没有           recv)，这才是真正的异步IO。")])])])]),t._v(" "),v("h4",{attrs:{id:"select-epoll"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#select-epoll"}},[t._v("#")]),t._v(" select/epoll")]),t._v(" "),v("ul",[v("li",[t._v("select/epoll，大概就都能明白了。有些地方也称这种IO方式为事件驱动IO(event driven IO)。")]),t._v(" "),v("li",[t._v("我们都知道，select/epoll的好处就在于单个process就可以同时处理多个网络连接的IO。它的基本原理就是select/epoll这个function会不断的轮询所负责的所有socket，当某个socket有数据到达了，就通知用户进程。")]),t._v(" "),v("li",[t._v("在多路复用模型中，对于每一个socket，一般都设置成为non-blocking，但是，如上图所示，整个用户的process其实是一直被block的。只不过process是被select这个函数block，而不是被socket IO给block。")]),t._v(" "),v("li",[t._v("结论:select的优势在于可以处理多个连接，不适用于单个连接")])]),t._v(" "),v("h4",{attrs:{id:"select、poll、epoll之间的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#select、poll、epoll之间的区别"}},[t._v("#")]),t._v(" select、poll、epoll之间的区别")]),t._v(" "),v("ol",[v("li",[t._v("select==>时间复杂度O(n)\n它仅仅知道了，有I/O事件发生了，却并不知道是哪那几个流（可能有一个，多个，甚至全部），我们只能无差别轮询所有流，找出能读出数据，或者写入数据的流，对他们进行操作。所以select具有O(n)的无差别轮询复杂度，同时处理的流越多，无差别轮询时间就越长。")]),t._v(" "),v("li",[t._v("poll==>时间复杂度O(n)")]),t._v(" "),v("li",[t._v("epoll==>时间复杂度O(1)\nLinux下多路复用IO接口select/poll的增强版本\nepoll可以理解为event poll，不同于忙轮询和无差别轮询，epoll会把哪个流发生了怎样的I/O事件通知我们。所以我们说epoll实际上是事件驱动（每个事件关联上fd）的，此时我们对这些流的操作都是有意义的。（复杂度降低到了O(1)）")])]),t._v(" "),v("h3",{attrs:{id:"select-poll-epoll的底层数据结构是什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#select-poll-epoll的底层数据结构是什么"}},[t._v("#")]),t._v(" select,poll,epoll的底层数据结构是什么")]),t._v(" "),v("p",[t._v("select是数组，poll是链表，epoll红黑树+链表\nepoll 没 IOCP 好，如果 IOCP 的数据结构：IOCP是WINDOWS系统下使用。Epoll是Linux系统下使用。")]),t._v(" "),v("h4",{attrs:{id:"nio包有哪些结构-分别起到的作用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#nio包有哪些结构-分别起到的作用"}},[t._v("#")]),t._v(" NIO包有哪些结构？分别起到的作用？")]),t._v(" "),v("h4",{attrs:{id:"nio针对什么情景会比io有更好的优化-线程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#nio针对什么情景会比io有更好的优化-线程"}},[t._v("#")]),t._v(" NIO针对什么情景会比IO有更好的优化？线程")])])}),[],!1,null,null,null);v.default=l.exports}}]);