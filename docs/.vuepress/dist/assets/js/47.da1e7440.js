(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{241:function(t,e,a){t.exports=a.p+"assets/img/luoxiaosheng.3e3f64f6.svg"},242:function(t,e,a){t.exports=a.p+"assets/img/luoxiaosheng_learning.c39ce245.svg"},243:function(t,e,a){t.exports=a.p+"assets/img/luoxiaosheng_wechat.8efd3324.svg"},348:function(t,e,a){"use strict";a.r(e);var s=a(14),n=Object(s.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"_0-1learning"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_0-1learning"}},[t._v("#")]),t._v(" 0-1Learning")]),t._v(" "),e("p",[e("img",{attrs:{src:a(241),alt:"alt text",title:"公众号"}}),t._v(" "),e("img",{attrs:{src:a(242),alt:"alt text",title:"学习"}}),t._v(" "),e("img",{attrs:{src:a(243),alt:"alt text",title:"微信"}})]),t._v(" "),e("h2",{attrs:{id:"html-overview"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#html-overview"}},[t._v("#")]),t._v(" html-overview")]),t._v(" "),e("h3",{attrs:{id:"ajax"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ajax"}},[t._v("#")]),t._v(" Ajax：")]),t._v(" "),e("p",[t._v("Ajax：“Asynchronous JavaScript and XML”，翻译过来就是异步JavaScript和XML。\n要创建Ajax，主角是XMLHttpRequest（下简称XHR）对象。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('第一步：创建XHR对象\nvar xhr = new XMLHttpRequest();\n\n第二步：向服务器发送请求\n方法：open(method,url,async) 和 send(string)\nopen()方法传入三参数\n• method：请求的类型（GET/POST）\n• url：文件在服务器上的位置\n• async：布尔值，true表示异步，false表示同步（可选，默认为true）\n1 xhr.open("GET","demo.asp?t=" + Math.random(),true);\n2 xhr.send();\n\n第三步：服务器响应\nXMLHttpRequest对象的responseText和responseXML属性分别获得字符串形式的响应数据和XML形式的响应数据\n还有三个关于响应状态的属性也经常用到：\n• readyState：存有XMLHttpRequest的状态。XHR对象会经历5种不同的状态\n○ 0：请求未初始化（new完后）；\n○ 1：服务器连接已建立（对象已创建并初始化，尚未调用send方法）；\n○ 2：请求已接收；\n○ 3：请求处理中；\n○ 4：请求已完成，响应就绪；\n• status：（HTTP状态码很多，请自行了解，举例常见的）\n○ 200：请求成功\n○ 404：未找到页面\n• onreadystatechange：存储函数（或函数名），每当readyState属性改变时，就会调用该函数。\n1 xhr.onreadystatechange = function () {\n2     if (xhr.readyState == 4 && xhr.status == 200) {\n3     console.log(xhr.responseText);\n4 };\n')])])]),e("h3",{attrs:{id:"icon"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#icon"}},[t._v("#")]),t._v(" Icon")]),t._v(" "),e("ol",[e("li",[t._v("img一个页面的请求资源中图片 img 占了大部分，所以为了优化有了image sprite 就是所谓的雪碧图，\n就是将多个图片合成一个图片，然后利用 css 的 background-position 定位显示不同的 icon 图标，但这个也有一个很大的痛点，维护困难")]),t._v(" "),e("li",[t._v("font 库，常见的如 Font Awesome ，使用起来也非常的方便，定制性也非常的不友善，图标库一共有675个图标")]),t._v(" "),e("li",[t._v("iconfont：几百个公司的开源图标库，还有各式各样的小图标，还支持自定义创建图标库")])]),t._v(" "),e("p",[e("strong",[t._v("iconfont 三种使用姿势")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('1.unicode\n第一步：引入自定义字体 `font-face 第二步：定义使用iconfont的样式 第三步：挑选相应图标并获取字体编码，应用于页面\n\n2.font-class <i class="iconfont icon-xxx"></i>\n\n3.symbol：svg-icon 使用形式慢慢成为主流和推荐\n第一步 引入  ./iconfont.js  \n引入  ./iconfont.js\n第二步：加入通用css代码（引入一次就行）\n<style type="text/css">\n    .icon {\n       width: 1em; height: 1em;\n       vertical-align: -0.15em;\n       fill: currentColor;\n       overflow: hidden;\n    }\n</style>\n第三步：挑选相应图标并获取类名，应用于页面：\n<svg class="icon" aria-hidden="true">\n<use xlink:href="#icon-xxx"></use>\n</svg>\n\n使用svg-sprite：引入 svg-sprite-loader\nsvgo：清除svg中多余的东西\n')])])]),e("h3",{attrs:{id:"content-type几种值的区别及用法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#content-type几种值的区别及用法"}},[t._v("#")]),t._v(" Content-Type几种值的区别及用法")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("application/json")]),t._v(" "),e("ul",[e("li",[t._v("告诉服务器请求的主题内容是json格式的字符串，服务器端会对json字符串进行解析  好处： 前端不需要关心数据结构的复杂度，只要是标准的json格式就能提交成功。")])])]),t._v(" "),e("li",[e("p",[t._v("application/x-www-form-urlencoded")]),t._v(" "),e("ul",[e("li",[t._v("数据被编码为名称/值对。这是标准的编码格式，是post的默认格式，所有浏览器都支持。")]),t._v(" "),e("li",[t._v("在请求发送过程中会对数据进行序列化处理，以键值对形式？key1=value1&key2=value2的方式发送到服务器")]),t._v(" "),e("li",[t._v("使用js中URLencode转码方法。包括将name、value中的空格替换为加号；将非ascii字符做百分号编码；将input的name、value用‘=’连接，不同的input之间用‘&’连接。")])])]),t._v(" "),e("li",[e("p",[t._v("multipart/form-data")]),t._v(" "),e("ul",[e("li",[t._v("需要在表单中进行文件上传时，就需要使用该格式。常见的媒体格式是上传文件之时使用的")]),t._v(" "),e("li",[t._v("对于一段utf8编码的字节，用application/x-www-form-urlencoded传输其中的ascii字符没有问题，但对于非ascii字符传输效率就很低了（汉字‘丁’从三字节变成了九字节），因此在传很长的字节（如文件）时应用multipart/form-data格式。smtp等协议也使用或借鉴了此格式。")]),t._v(" "),e("li",[t._v("multipart/form-data将表单中的每个input转为了一个由boundary分割的小格式，没有转码，直接将utf8字节拼接到请求体中，在本地有多少字节实际就发送多少字节，极大提高了效率，适合传输长字节。")])])]),t._v(" "),e("li",[e("p",[t._v("text/plain")]),t._v(" "),e("ul",[e("li",[t._v("数据以纯文本形式(text/json/xml/html)进行编码，其中不含任何控件或格式字符。")])])])]),t._v(" "),e("h3",{attrs:{id:"前端调试神器-vconsole和eruda"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前端调试神器-vconsole和eruda"}},[t._v("#")]),t._v(" 前端调试神器：vConsole和eruda")]),t._v(" "),e("h3",{attrs:{id:"typescript-是-javascript-的关系"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#typescript-是-javascript-的关系"}},[t._v("#")]),t._v(" TypeScript 是 JavaScript 的关系")]),t._v(" "),e("p",[t._v("TypeScript 是 JavaScript 的类型的超集，它可以编译成纯 JavaScript")]),t._v(" "),e("h3",{attrs:{id:"组件介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#组件介绍"}},[t._v("#")]),t._v(" 组件介绍")]),t._v(" "),e("ul",[e("li",[e("p",[t._v('element-ui\n"element-ui": "2.7.0",')])]),t._v(" "),e("li",[e("p",[t._v('Normalize.css：供了跨浏览器的高度一致性\n"normalize.css": "7.0.0",\nimport \'normalize.css/normalize.css\'')])]),t._v(" "),e("li",[e("p",[t._v('font-awesome：矢量图标\n"font-awesome": "4.7.0",\nimport \'font-awesome/css/font-awesome.min.css\' // font-awesome')])]),t._v(" "),e("li",[e("p",[t._v('nprogress：进度条\n"nprogress": "0.2.0",\nimport \'nprogress/nprogress.css\';\n使用：')])])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import NProgress from 'nprogress' // Progress 进度条\nimport 'nprogress/nprogress.css'// Progress 进度条样式\nrouter.beforeEach((to, from, next) => {\n  NProgress.start()\n  。。。\n  next()\n})\nrouter.afterEach(() => {\n  NProgress.done() // 结束Progress\n})\n")])])]),e("ul",[e("li",[t._v('babel-polyfill：ES6转码ES5\n"babel-polyfill": "^6.26.0",\nimport "babel-polyfill";')])]),t._v(" "),e("h3",{attrs:{id:"引入方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#引入方式"}},[t._v("#")]),t._v(" 引入方式")]),t._v(" "),e("ul",[e("li",[t._v("完整引入")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("/*Element：完整引入*/\n  import ElementUI from 'element-ui';\n  import 'element-ui/lib/theme-chalk/index.css';\n")])])]),e("ul",[e("li",[t._v("按需引入")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('/*icon字体路径变量*/\n$--font-path: "~element-ui/lib/theme-chalk/fonts";\n/*按需引入用到的组件的scss文件和基础scss文件*/\n@import "~element-ui/packages/theme-chalk/src/base.scss";\n/*按需引入组件*/\nimport {Rate,Row,Button} from \'element-ui\'\n')])])]),e("h3",{attrs:{id:"路由router跳转携带参数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#路由router跳转携带参数"}},[t._v("#")]),t._v(" 路由Router跳转携带参数")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("this.$router.push({\n    // 由于动态路由也是传递params的，所以在 this.$router.push() 方法中 path不能和params一起使用，否则params将无效。需要用name来指定页面\n    // path: ({path: '/advert/add', params: {typeList: this.typeList}}) 错误\n    // 通过路由名称跳转，携带参数（已成功）\n    // name: 'advertAdd', params: {typeList: this.typeList}\n});\n")])])]),e("p",[t._v("接收：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("          this.listQuery.clueId = this.$route.query.clueId;\n          this.listQuery.cpid = this.$route.query.cpid;\n")])])]),e("p",[t._v("页面间传值：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("    // path: '/clue/detail', query: { clue: row }\t//query方式页面刷新不丢失\n    path: '/clue/detail', query: { clueId: row.id, cpid: row.cpid } //但无法支持对象不丢失\n")])])]),e("p",[t._v("页面跳转携带参数还可以使用vuex")]),t._v(" "),e("h3",{attrs:{id:"public-index-html-初始页"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#public-index-html-初始页"}},[t._v("#")]),t._v(" public/index.html 初始页")]),t._v(" "),e("p",[t._v("因为 index 文件被用作模板，所以你可以使用 lodash template 语法插入内容：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<%= VALUE %> 用来做不转义插值；\n<%- VALUE %> 用来做 HTML 转义插值；\n<% expression %> 用来描述 JavaScript 流程控制。\n<link rel="icon" href="<%= BASE_URL %>favicon.ico">\t//引用客户端环境变量\n')])])]),e("h3",{attrs:{id:"指令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#指令"}},[t._v("#")]),t._v(" 指令")]),t._v(" "),e("p",[t._v("v-bind——缩写：:，动态地绑定一个或多个特性，或一个组件 prop 到表达式。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<a v-bind:href="url" v-bind:class="klass">click me</a>\n<a :class="{active:isActive}">click me</a> //动态判断是否加载class\n\x3c!-- prop 绑定。“prop”必须在 my-component 中声明。--\x3e\n<my-component :prop="someThing"></my-component>\nv-on:——缩写：@，綁定事件\n\x3c!-- 阻止默认行为 --\x3e\n<button @click.prevent="doThis"></button>\n@click.native.prevent="onSubmit"  //监听根组件，阻止默认行为\nv-model：随表单控件类型不同而不同。\n限制：\n<input>\n<select>\n<textarea>\ncomponents\n修饰符：\n.lazy - 取代 input 监听 change 事件\n.number - 输入字符串转为有效的数字\n.trim - 输入首尾空格过滤\n')])])]),e("p",[t._v("常用指令：v-text:v-html,v-show,v-if,v-else,v-for,v-slot,v-pre,v-cloak,v-once")]),t._v(" "),e("h3",{attrs:{id:"特殊特性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#特殊特性"}},[t._v("#")]),t._v(" 特殊特性：")]),t._v(" "),e("p",[t._v("key：虚拟 DOM 算法\n有相同父元素的子元素必须有独特的 key。重复的 key 会造成渲染错误。\n最常见的用例是结合 v-for：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<ul>\n  <li v-for="item in items" :key="item.id">...</li>\n</ul>\n')])])]),e("h3",{attrs:{id:"ref-给元素或子组件注册引用信息"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ref-给元素或子组件注册引用信息"}},[t._v("#")]),t._v(" ref：给元素或子组件注册引用信息")]),t._v(" "),e("p",[t._v("引用信息将会注册在父组件的 $refs 对象上。\n如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('\x3c!-- `vm.$refs.p` will be the DOM node --\x3e\n<p ref="p">hello</p>\n')])])]),e("p",[t._v("如果用在子组件上，引用就指向组件实例：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('\x3c!-- `vm.$refs.child` will be the child component instance --\x3e\n<child-component ref="child"></child-component>\n')])])]),e("h3",{attrs:{id:"is-用于动态组件且基于-dom-内模板的限制来工作。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#is-用于动态组件且基于-dom-内模板的限制来工作。"}},[t._v("#")]),t._v(" is：用于动态组件且基于 DOM 内模板的限制来工作。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('\x3c!-- 当 `currentView` 改变时，组件也跟着改变 --\x3e\n<component v-bind:is="currentView"></component>\n')])])]),e("h3",{attrs:{id:"内置组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#内置组件"}},[t._v("#")]),t._v(" 内置组件：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('component：渲染一个“元组件”为动态组件\n\x3c!-- 动态组件由 vm 实例的属性值 `componentId` 控制 --\x3e\n<component :is="componentId"></component>\n')])])]),e("h3",{attrs:{id:"transition-元素作为单个元素-组件的过渡效果"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#transition-元素作为单个元素-组件的过渡效果"}},[t._v("#")]),t._v(" transition：元素作为单个元素/组件的过渡效果")]),t._v(" "),e("p",[t._v('Props：name (CSS 过渡类名,会自动拓展),mode离开/进入的过渡时间序列，例 "out-in" 和 "in-out"\n事件：before-enter，before-leave，before-appear，enter，leave，appear。。')]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('\x3c!-- 简单元素 --\x3e\n<transition>\n  <div v-if="ok">toggled content</div>\n</transition>\n\x3c!-- 动态组件 --\x3e\n<transition name="fade" mode="out-in" appear>\n  <component :is="view"></component>\n</transition>\n  <transition @after-enter="transitionComplete"> //事件钩子\n')])])]),e("h3",{attrs:{id:"transition-group-元素作为多个元素-组件的过渡效果"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#transition-group-元素作为多个元素-组件的过渡效果"}},[t._v("#")]),t._v(" transition-group：元素作为多个元素/组件的过渡效果")]),t._v(" "),e("p",[t._v("Props：tag - string，默认为 span，哪个属性应该被渲染\nmove-class - 覆盖移动过渡期间应用的 CSS 类。\n除了 mode，其他特性和 "),e("code",[t._v("<transition>")]),t._v(" 相同。\n事件：事件和 "),e("code",[t._v("<transition>")]),t._v(" 相同。")]),t._v(" "),e("h3",{attrs:{id:"keep-alive-主要用于保留组件状态或避免重新渲染。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#keep-alive-主要用于保留组件状态或避免重新渲染。"}},[t._v("#")]),t._v(" keep-alive：主要用于保留组件状态或避免重新渲染。")]),t._v(" "),e("h3",{attrs:{id:"slot-插槽"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#slot-插槽"}},[t._v("#")]),t._v(" slot：插槽")]),t._v(" "),e("h3",{attrs:{id:"vue对路径-不识别问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue对路径-不识别问题"}},[t._v("#")]),t._v(" vue对路径@不识别问题：")]),t._v(" "),e("p",[t._v("webstorm配置webpack引用路径")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("node_modules\\@vue\\cli-service\\webpack.config.js\n")])])]),e("h3",{attrs:{id:"组建注册与引用-components"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#组建注册与引用-components"}},[t._v("#")]),t._v(" 组建注册与引用：components")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("Vue.component('命名'，{template,data等，注：这里自动使用new Vue(),所有省略了new}\n)\n\n在 Vue 里，一个组件本质上是一个拥有预定义选项的一个 Vue 实例。在 Vue 中注册组件很简单：\n// 定义名为 todo-item 的新组件\nVue.component('todo-item', {\n  template: '<li>这是个待办项</li>'\n})\n")])])]),e("h3",{attrs:{id:"生命周期钩子"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#生命周期钩子"}},[t._v("#")]),t._v(" 生命周期钩子")]),t._v(" "),e("p",[t._v("created（创建），mounted（挂载），updated（更新），destoryed（销毁）\n例：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("  created: function () {\n    // `this` 指向 vm 实例\n    console.log('a is: ' + this.a)\n  }\n")])])]),e("p",[t._v("不要在选项属性或回调上使用箭头函数，")]),t._v(" "),e("p",[t._v("比如 created: () => console.log(this.a) 或 vm.$watch('a', newValue => this.myMethod())。\n因为箭头函数是和父级上下文绑定在一起的，this 不会是如你所预期的 Vue 实例，\n经常导致 Uncaught TypeError: Cannot read property of undefined 或 Uncaught TypeError: this.myMethod is not a function 之类的错误。")]),t._v(" "),e("h3",{attrs:{id:"vuex"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vuex"}},[t._v("#")]),t._v(" VueX")]),t._v(" "),e("p",[t._v("两种方式可以操作存取：")]),t._v(" "),e("ul",[e("li",[t._v("存对象：")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import { mapActions } from 'vuex'\n  methods: {\n    ...mapActions(['saveAdvert', 'saveAdvertType', 'clearAdvert']),\n\n最后调用\nthis.saveAdvertType(this.list)\n\n取对象：\nimport { mapState } from 'vuex'\t//这里的mapState 只用于获取值\n  computed: {\n    ...mapState({\n      form: state => state.advert.advert\n      // typeList: state => state.Advert.advertType\n    })\n  },\n")])])]),e("p",[t._v("推荐使用方式：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("存对象：\nthis.$store.dispatch('advert/saveAdvert', this.list)\nthis.$store.dispatch('app/toggleSideBar')\t//无参\nthis.$store.dispatch('advert/saveAdvertType',this.typeList)\t//有参\n\n\n取对象：mapGetters//这里可以理解为store的计算属性，访问：store.getters.getItems\n  computed: {\n    ...mapGetters([\n      'permission_routes',\n      'sidebar'\n    ]),\n")])])]),e("h3",{attrs:{id:"import-layout-from-layout"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#import-layout-from-layout"}},[t._v("#")]),t._v(" import Layout from '@/layout'")]),t._v(" "),e("p",[t._v("这里是“@”相当于“../”")]),t._v(" "),e("h3",{attrs:{id:"获取环境信息"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#获取环境信息"}},[t._v("#")]),t._v(" 获取环境信息：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("process.env.VUE_APP_API_HOST,\n")])])]),e("h3",{attrs:{id:"registry源"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#registry源"}},[t._v("#")]),t._v(" registry源")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("npm下载源切换\n//npm修改为淘宝源\nnpm config set registry https://registry.npm.taobao.org\n// 验证是否成功\nnpm config get registry\n")])])]),e("h3",{attrs:{id:"data-与-data-的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#data-与-data-的区别"}},[t._v("#")]),t._v(" data () {  与  data：  的区别：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("data：如果多次引用统一组件，data中的值只有一份，一次改变就都改变，\ndata（）使用返回值方法，每次调用都是新的返回值\n")])])]),e("h3",{attrs:{id:"锚点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#锚点"}},[t._v("#")]),t._v(" 锚点")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("@change=\"goAnchor\"\n\n跳跃：\ngoAnchor(){\nthis.$el.querySelector('#table'+this.tabPosition).scrollIntoView();\n},\n")])])]),e("h3",{attrs:{id:"filters-变换状态等"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#filters-变换状态等"}},[t._v("#")]),t._v(" filters（变换状态等）")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("组件内声明过滤器：\n    filters: {\n        statusFilter(status) {\n            const statusMap = {\n                published: 'success',\n                draft: 'gray',\n                deleted: 'danger'\n            };\n            return statusMap[status];\n        }\n    },\n引用：\n<el-table-column prop=\"state\" label=\"状态\" align=\"center\" >\n                <template slot-scope=\"scope\">\n                    <span>{{scope.row.state | statusFilter}}</span>\n                </template>\n</el-table-column>\n注：\n{{ msg | filter('arg1','arg2') }}\n// msg对应函数中的第一个参数data，arg1为第二个参数，类推\n")])])]),e("h3",{attrs:{id:"formatter-变换状态等"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#formatter-变换状态等"}},[t._v("#")]),t._v(" formatter（变换状态等）")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('method中定义：\n        typeFormat(row, column) {\n            if (row.state === 0) {\n                return \'未知\';\n            } else if (row.state === 1) {\n                return \'男\';\n            } else {\n                return \'女\';\n            }\n        },\n引用：\n<el-table-column prop="state" label="状态" align="center" :formatter="typeFormat">\n</el-table-column>\n注：el-table-column中不用写template\n')])])]),e("p",[t._v("if-else判断显示：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<span v-if="scope.row.state === 0">未审核</span>\n<span v-else-if="scope.row.state === 1">审核未通过</span>\n')])])]),e("p",[t._v("也可以使用foreach循环匹配")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("      this.typeList.forEach((item, index) => {\n        console.log(row.delFlag + '___' + item.id)\n        if (row.delFlag === item.id) {\n          console.log('equals___' + item.name)\n          return item.name\n        }\n      })\n")])])]),e("h3",{attrs:{id:"timestamp转date"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#timestamp转date"}},[t._v("#")]),t._v(" timestamp转date")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("    filters: {\n        formatDate: function (value) {\n            if (value === 0) {\n                return '';\n            }\n            let date = new Date(value);\n            let y = date.getFullYear();\n            let MM = date.getMonth() + 1;\n            MM = MM < 10 ? ('0' + MM) : MM;\n            let d = date.getDate();\n            d = d < 10 ? ('0' + d) : d;\n            let h = date.getHours();\n            h = h < 10 ? ('0' + h) : h;\n            let m = date.getMinutes();\n            m = m < 10 ? ('0' + m) : m;\n            let s = date.getSeconds();\n            s = s < 10 ? ('0' + s) : s;\n            return y + '-' + MM + '-' + d + ' ' + h + ':' + m + ':' + s;\n        }\n    },\n\n调用：\n<templateslot-scope=\"scope\">\n    {{scope.row.createdAt|formatDate}}\n</template>\n")])])]),e("p",[t._v("组件形式发布：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("过滤器组件定义：\nexport const formatDateFilter = value => {\n  if (value === 0) {\n    return '';\n  }\n  const date = new Date(value);\n  const y = date.getFullYear();\n  let MM = date.getMonth() + 1;\n  MM = MM < 10 ? ('0' + MM) : MM;\n  let d = date.getDate();\n  d = d < 10 ? ('0' + d) : d;\n  let h = date.getHours();\n  h = h < 10 ? ('0' + h) : h;\n  let m = date.getMinutes();\n  m = m < 10 ? ('0' + m) : m;\n  let s = date.getSeconds();\n  s = s < 10 ? ('0' + s) : s;\n  return y + '-' + MM + '-' + d + ' ' + h + ':' + m + ':' + s;\n};\n\n引用：\nimport { formatDateFilter } from '@/filter/index';\n\nexport default {\n  components: {\n    followRecordAdd\n  },\n  filters: {\n    formatDate: formatDateFilter\n  },\n")])])]),e("h3",{attrs:{id:"封装axios直接请求"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#封装axios直接请求"}},[t._v("#")]),t._v(" 封装axios直接请求")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("          axios({\n            url: this.uploadAction + 'sysRole/add',\n            method: 'POST',\n            data: formData,\n            params: parm\n          }).then((result) => {\n            this.loading = false\n            this.$message.success('添加成功')\n            this.$router.push({\n              path: '/sysRole/index'\n            })\n          }).catch((err) => {\n            this.loading = false\n            this.$message({\n              message: '添加失败!',\n              info: 'warning'\n            })\n          })\n")])])]),e("h3",{attrs:{id:"vue-axios-get请求传参"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue-axios-get请求传参"}},[t._v("#")]),t._v(" vue axios get请求传参：")]),t._v(" "),e("p",[t._v("示例：")]),t._v(" "),e("ul",[e("li",[t._v("带花括号"),e("code",[t._v("{token}")]),t._v("\n实际参数 "),e("code",[t._v("token: admin-token")])]),t._v(" "),e("li",[t._v("不带花括号"),e("code",[t._v("token")]),t._v("\n实际参数 "),e("code",[t._v("0:token")])])]),t._v(" "),e("h3",{attrs:{id:"axios异步获取stream"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#axios异步获取stream"}},[t._v("#")]),t._v(" axios异步获取stream")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("axios({\n  url: 'https://api',\n  data: {\n    prompt: 'a beautiful cat',\n    action: 'generate'\n  },\n  headers: {\n    'accept': 'application/x-ndjson',\n    'content-type': 'application/json'\n  },\n  responseType: 'stream',\n  method: 'POST',\n  onDownloadProgress: progressEvent => {\n     const response = progressEvent.target.response;\n     const lines = response.split('\\r\\n').filter(line => !!line)\n     const lastLine = lines[lines.length - 1]\n     console.log(lastLine)\n  }\n}).then(({ data }) => Promise.resolve(data));\n")])])]),e("h3",{attrs:{id:"跨域获取cookie"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#跨域获取cookie"}},[t._v("#")]),t._v(" 跨域获取cookie")]),t._v(" "),e("p",[t._v("domain表示的是cookie所在的域，默认为请求的地址，\n如网址为www.test.net/test/test.aspx，那么domain默认为www.test.net。")]),t._v(" "),e("p",[t._v("而跨域访问，如域A为t1.test.com，域B为t2.test.com，\n一般情况下，域A和域B对应的cookie是不能互相访问的\n那么在域A生产一个令域A和域B都能访问的cookie就要将该cookie的domain设置为.test.com；")]),t._v(" "),e("p",[t._v("例：\n线上地址：https://jzedu-recruit-betaa.djtest.cn/#/clue/list  //携带有cookie验证，domain为.djtest.cn\n修改本机hosts：127.0.0.1  jzedu-recruit-stable.djtest.cn——将线上cookie验证指向本机后台服务\n本机后台服务器启动\nnginx配置80端口转发：本地真实服务地址：proxy_pass http://localhost:8080/;\n最终访问线上地址：http://jzedu-recruit-stable.djtest.cn/#/clue/list\n就能通过本机后台cookie验证")]),t._v(" "),e("h3",{attrs:{id:"rem自适应布局"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rem自适应布局"}},[t._v("#")]),t._v(" rem自适应布局")]),t._v(" "),e("p",[t._v("先来看一段代码：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('  <head>\n    <meta charset="utf-8">\n    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">\n    <meta name="renderer" content="webkit">\n    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">\n    <link rel="icon" href="<%= BASE_URL %>favicon.ico">\n    <title><%= webpackConfig.name %></title>\n  </head>\n')])])]),e("p",[t._v("meta为网页的元属性：")]),t._v(" "),e("ol",[e("li",[t._v("name项：常用的选项有Keywords(关键字) ，description(网站内容描述)，author(作者)，robots(机器人向导)等。")]),t._v(" "),e("li",[t._v("http-equiv项：可用于代替name项，常用的选项有Expires(期限)，Pragma(cache模式)，Refresh(刷新)，Set-Cookie(cookie设定)，Window-target(显示窗口的设定)，content-Type(显示字符集的设定)等。")]),t._v(" "),e("li",[t._v("content项：根据name项或http-equiv项的定义来决定此项填写什么样的字符串。")])]),t._v(" "),e("ul",[e("li",[t._v("width=device-width：网页宽度等于设备屏幕宽度")]),t._v(" "),e("li",[t._v("initial-scale=1：页面初始缩放比例为1")]),t._v(" "),e("li",[t._v("user-scalable=no：禁止用户进行缩放")]),t._v(" "),e("li",[t._v("maximum-scale=1，minimum-scale=1：最大和最小的页面缩放比例")])]),t._v(" "),e("p",[t._v("实现手机端自适应，就是可以让页面的元素字体、间距、宽高等属性的属性值可以随着手机屏幕尺寸的变化而变化")]),t._v(" "),e("p",[e("strong",[t._v("em")]),t._v("\nem：em的特点 : ① em的值并不是固定的; ② em始终会继承父级元素的字体大小。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("body{\n    font-size: 20px;\n}\n.one{\n    font-size: 1.5em;——30px\n}\n.two{\n    font-size: 0.5em;——15px\n}\n")])])]),e("p",[e("strong",[t._v("rem：相对长度单位rem")]),t._v("\nrem是CSS3新增的一个相对单位（root em，根em）。注：相对的只是HTML根元素。这个单位可谓集相对大小和绝对大小的优点于一身，通过它既可以做到只修改根元素就成比例地调整所有字体大小，又可以避免字体大小逐层复合的连锁反应。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("html{\n    font-size: 20px;\n}\n.one{\n    font-size: 1.5rem;——30px\n}\n.two{\n    font-size: 0.5rem;——10px\n}\n")])])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("  <script info=\"text/javascript\">\n    (function(win,doc){\n      change();\n      function change(){\n        doc.documentElement.style.fontSize = doc.documentElement.clientWidth *20/320+'px';\n      }\n      win.addEventListener('resize',change,false);\n      win.addEventListener('orientationchange',change,false);  /* 这个是移动端设备横屏、竖屏转换时触发的事件处理函数 */\n    })(window,document);\n  <\/script>\n")])])]),e("h3",{attrs:{id:"gulp和webpack"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#gulp和webpack"}},[t._v("#")]),t._v(" gulp和webpack")]),t._v(" "),e("p",[e("strong",[t._v("webpack：一个模块打包工具（更适合单页面spa模块开发）")]),t._v("\nWebpack更侧重于模块打包，把开发中的所有资源（图片、js文件、css文件等）看成模块。Webpack是通过loader（加载器）和plugins（插件）对资源进行处理的")]),t._v(" "),e("p",[e("strong",[t._v("gulp：基于流格式的打包构建工具（更适合多页面模块mpa开发）")]),t._v("\ngulp：前端自动化打包构建工具，基于流格式的打包构建工具\n打包:把文件压缩,整合,移动,混淆")]),t._v(" "),e("p",[t._v("gulp的常见api：gulp.src()、gulp.dest()、gulp.task()、gulp.watch()、gulp.series()、gulp.parallel()")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("gulp.src()方法： 创建一个流，用于从文件系统读取 Vinyl 对象。")])]),t._v(" "),e("li",[e("p",[t._v("语法：gulp.src(globs, [options])")]),t._v(" "),e("ul",[e("li",[t._v("globs参数是文件匹配模式(类似正则表达式)，用来匹配文件路径(包括文件名)，当然这里也可以直接指定某个具体的文件路径。当有多个匹配模式时，该参数可以为一个数组。")]),t._v(" "),e("li",[t._v("options为一个可选的参数对象，通常我们不需要用到\n注：BOMs(字节顺序标记)在 UTF-8 中没有任何作用，除非使用 removeBOM 选项禁用，否则 src() 将从读取的 UTF-8 文件中删除BOMs。")])])]),t._v(" "),e("li",[e("p",[t._v("gulp.dest()方法：创建一个用于将 Vinyl 对象写入到文件系统的流。")])]),t._v(" "),e("li",[e("p",[t._v("语法：gulp.dest(path[,options])")]),t._v(" "),e("ul",[e("li",[t._v("path为写入文件的路径")]),t._v(" "),e("li",[t._v("options为一个可选的参数对象，通常我们不需要用到")])])]),t._v(" "),e("li",[e("p",[t._v("gulp.task方法：用来定义任务")])]),t._v(" "),e("li",[e("p",[t._v("语法：gulp.task(name[, deps], fn)")]),t._v(" "),e("ul",[e("li",[t._v("name为任务名")]),t._v(" "),e("li",[t._v("deps 是当前定义的任务需要依赖的其他任务，为一个数组。当前定义的任务会在所有依赖的任务执行完毕后才开始执行。如果没有依赖，则可省略这个参数")]),t._v(" "),e("li",[t._v("fn 为任务函数，我们把任务要执行的代码都写在里面。该参数也是可选的。")])])]),t._v(" "),e("li",[e("p",[t._v("gulp.watch方法：用来监视文件的变化，当文件发生变化后，我们可以利用它来执行相应的任务，例如文件压缩等。")])]),t._v(" "),e("li",[e("p",[t._v("语法1：gulp.watch(glob[, opts], tasks)")]),t._v(" "),e("ul",[e("li",[t._v("glob 为要监视的文件匹配模式，规则和用法与gulp.src()方法中的glob相同")]),t._v(" "),e("li",[t._v("opts 为一个可选的配置对象，通常不需要用到")]),t._v(" "),e("li",[t._v("tasks 为文件变化后要执行的任务，为一个数组")])])]),t._v(" "),e("li",[e("p",[t._v("gulp.series方法：将任务函数和/或组合操作组合成更大的操作，这些操作将按顺序依次执行。\n对于使用 series() 和 parallel() 组合操作的嵌套深度没有强制限制\n语法1：gulp.series(…tasks)")])]),t._v(" "),e("li",[e("p",[t._v("gulp.parallel方法：将任务功能和/或组合操作组合成同时执行的较大操作。\n对于使用 series() 和 parallel() 进行嵌套组合的深度没有强制限制。\n语法1：gulp.parallel(…tasks)")])])])])}),[],!1,null,null,null);e.default=n.exports}}]);