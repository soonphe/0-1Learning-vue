(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{241:function(e,t,s){e.exports=s.p+"assets/img/luoxiaosheng.3e3f64f6.svg"},242:function(e,t,s){e.exports=s.p+"assets/img/luoxiaosheng_learning.c39ce245.svg"},243:function(e,t,s){e.exports=s.p+"assets/img/luoxiaosheng_wechat.8efd3324.svg"},346:function(e,t,s){"use strict";s.r(t);var a=s(14),n=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"_0-1learning"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_0-1learning"}},[e._v("#")]),e._v(" 0-1Learning")]),e._v(" "),t("p",[t("img",{attrs:{src:s(241),alt:"alt text",title:"公众号"}}),e._v(" "),t("img",{attrs:{src:s(242),alt:"alt text",title:"学习"}}),e._v(" "),t("img",{attrs:{src:s(243),alt:"alt text",title:"微信"}})]),e._v(" "),t("h2",{attrs:{id:"vue-cli-vue脚手架"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue-cli-vue脚手架"}},[e._v("#")]),e._v(" vue-cli（VUE脚手架）")]),e._v(" "),t("p",[e._v("脚手架，顾名思义就是为开发提供一个可直接使用的半成品模板，省去前期的准备环节。（快速开始一个vue的项目，包含基础的依赖库，只需要 npm install就可以安装相关依赖）")]),e._v(" "),t("h3",{attrs:{id:"vue-cli安装"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue-cli安装"}},[e._v("#")]),e._v(" vue-cli安装")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("npm install -g @vue/cli\n# OR\nyarn global add @vue/cli\n")])])]),t("p",[e._v("检查是否安装成功：vue --version\n升级：npm update -g @vue/cli")]),e._v(" "),t("h3",{attrs:{id:"快速原型开发"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#快速原型开发"}},[e._v("#")]),e._v(" 快速原型开发")]),e._v(" "),t("p",[e._v("你可以使用 vue serve 和 vue build 命令对单个 *.vue 文件进行快速原型开发，不过这需要先额外安装一个全局的扩展：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("npm install -g @vue/cli-service-global\n")])])]),t("p",[e._v("vue serve 的缺点就是它需要安装全局依赖，这使得它在不同机器上的一致性不能得到保证。因此这只适用于快速原型开发。")]),e._v(" "),t("p",[e._v("vue serve")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Usage: serve [options] [entry] 在开发环境模式下零配置为 .js 或 .vue 文件启动一个服务器\n\nOptions:\n  -o, --open  打开浏览器\n  -c, --copy  将本地 URL 复制到剪切板\n  -h, --help  输出用法信息\n")])])]),t("p",[e._v("在vue文件所在的目录下运行：vue serve\n指定文件运行：vue serve MyComponent.vue")]),e._v(" "),t("p",[e._v("vue build")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Usage: build [options] [entry] 在生产环境模式下零配置构建一个 .js 或 .vue 文件\n\nOptions:\n  -t, --target <target>  构建目标 (app | lib | wc | wc-async, 默认值：app)\n  -n, --name <name>      库的名字或 Web Components 组件的名字 (默认值：入口文件名)\n  -d, --dest <dir>       输出目录 (默认值：dist)\n  -h, --help             输出用法信息\n")])])]),t("p",[e._v("构建包部署：vue build MyComponent.vue")]),e._v(" "),t("h3",{attrs:{id:"创建一个项目"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建一个项目"}},[e._v("#")]),e._v(" 创建一个项目")]),e._v(" "),t("p",[e._v("创建新项目：vue create hello-world（你可以选默认的包含了基本的 Babel + ESLint 设置的 preset，也可以选“手动选择特性”来选取需要的特性。）")]),e._v(" "),t("blockquote",[t("p",[e._v("~/.vuerc\n被保存的 preset 将会存在用户的 home 目录下一个名为 .vuerc 的 JSON 文件里。如果你想要修改被保存的 preset / 选项，可以编辑这个文件。\n在项目创建的过程中，你也会被提示选择喜欢的包管理器或使用淘宝 npm 镜像源以更快地安装依赖。这些选择也将会存入 ~/.vuerc。")])]),e._v(" "),t("p",[e._v("vue create 命令有一些可选项")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("用法：create [options] <app-name> 创建一个由 `vue-cli-service` 提供支持的新项目\n\n选项：\n  -p, --preset <presetName>       忽略提示符并使用已保存的或远程的预设选项\n  -d, --default                   忽略提示符并使用默认预设选项\n  -i, --inlinePreset <json>       忽略提示符并使用内联的 JSON 字符串预设选项\n  -m, --packageManager <command>  在安装依赖时使用指定的 npm 客户端\n  -r, --registry <url>            在安装依赖时使用指定的 npm registry\n  -g, --git [message]             强制 / 跳过 git 初始化，并可选的指定初始化提交信息\n  -n, --no-git                    跳过 git 初始化\n  -f, --force                     覆写目标目录可能存在的配置\n  -c, --clone                     使用 git clone 获取远程预设选项\n  -x, --proxy                     使用指定的代理创建项目\n  -b, --bare                      创建项目时省略默认组件中的新手指导信息\n  -h, --help                      输出使用帮助信息\n")])])]),t("p",[e._v("使用图形化界面创建和管理项目：：vue ui\n创建一个基于 mpvue-quickstart 模板的新项目")]),e._v(" "),t("p",[e._v("Vue CLI >= 3 和旧版使用了相同的 vue 命令，所以 Vue CLI 2 (vue-cli) 被覆盖了。如果你仍然需要使用旧版本的 vue init 功能，你可以全局安装一个桥接工具：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("npm install -g @vue/cli-init\n# `vue init` 的运行效果将会跟 `vue-cli@2.x` 相同\nvue init webpack my-project\n")])])]),t("p",[e._v("$ vue init mpvue/mpvue-quickstart my-project")]),e._v(" "),t("h3",{attrs:{id:"插件和preset"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#插件和preset"}},[e._v("#")]),e._v(" 插件和Preset")]),e._v(" "),t("p",[e._v("插件：\nVue CLI 使用了一套基于插件的架构。如果你查阅一个新创建项目的 package.json，就会发现依赖都是以 @vue/cli-plugin- 开头的。\n插件可以修改 webpack 的内部配置，也可以向 vue-cli-service 注入命令。在项目创建的过程中，绝大部分列出的特性都是通过插件来实现的。")]),e._v(" "),t("p",[e._v("在现有的项目中安装插件：vue add eslint")]),e._v(" "),t("p",[e._v("Preset：\n一个 Vue CLI preset 是一个包含创建新项目所需预定义选项和插件的 JSON 对象，让用户无需在命令提示中选择它们。")]),e._v(" "),t("p",[e._v("在 vue create 过程中保存的 preset 会被放在你的 home 目录下的一个配置文件中 (~/.vuerc)。你可以通过直接编辑这个文件来调整、添加、删除保存好的 preset。")]),e._v(" "),t("h3",{attrs:{id:"cli-服务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cli-服务"}},[e._v("#")]),e._v(" CLI 服务")]),e._v(" "),t("p",[e._v("在一个 Vue CLI 项目中，@vue/cli-service 安装了一个名为 vue-cli-service 的命令。你可以在 npm scripts 中以 vue-cli-service、或者从终端中以 ./node_modules/.bin/vue-cli-service 访问这个命令。")]),e._v(" "),t("p",[e._v("这是你使用默认 preset 的项目的 package.json：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n  "scripts": {\n    "serve": "vue-cli-service serve",\n    "build": "vue-cli-service build"\n  }\n}\n')])])]),t("p",[e._v("你可以通过 npm 或 Yarn 调用这些 script：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("npm run serve\n# OR\nyarn serve\n")])])]),t("p",[e._v("vue-cli-service serve：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("用法：vue-cli-service serve [options] [entry]\n\n选项：\n\n  --open    在服务器启动时打开浏览器\n  --copy    在服务器启动时将 URL 复制到剪切版\n  --mode    指定环境模式 (默认值：development)\n  --host    指定 host (默认值：0.0.0.0)\n  --port    指定 port (默认值：8080)\n  --https   使用 https (默认值：false)\n")])])]),t("p",[e._v("vue-cli-service serve 命令会启动一个开发服务器 (基于 webpack-dev-server) 并附带开箱即用的模块热重载 (Hot-Module-Replacement)。\n除了通过命令行参数，你也可以使用 vue.config.js 里的 devServer 字段配置开发服务器。\n命令行参数 [entry] 将被指定为唯一入口，而非额外的追加入口。尝试使用 [entry] 覆盖 config.pages 中的 entry 将可能引发错误。")]),e._v(" "),t("p",[e._v("vue-cli-service build")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('用法：vue-cli-service build [options] [entry|pattern]\n\n选项：\n\n  --mode        指定环境模式 (默认值：production)\n  --dest        指定输出目录 (默认值：dist)\n  --modern      面向现代浏览器带自动回退地构建应用\n  --target      app | lib | wc | wc-async (默认值：app)\n  --name        库或 Web Components 模式下的名字 (默认值：package.json 中的 "name" 字段或入口文件名)\n  --no-clean    在构建项目之前不清除目标目录\n  --report      生成 report.html 以帮助分析包内容\n  --report-json 生成 report.json 以帮助分析包内容\n  --watch       监听文件变化\n')])])]),t("p",[e._v("vue-cli-service build 会在 dist/ 目录产生一个可用于生产环境的包，带有 JS/CSS/HTML 的压缩，和为更好的缓存而做的自动的 vendor chunk splitting。它的 chunk manifest 会内联在 HTML 里。\n这里还有一些有用的命令参数：\n--modern 使用现代模式构建应用，为现代浏览器交付原生支持的 ES2015 代码，并生成一个兼容老浏览器的包用来自动回退。\n--target 允许你将项目中的任何组件以一个库或 Web Components 组件的方式进行构建。更多细节请查阅构建目标。\n--report 和 --report-json 会根据构建统计生成报告，它会帮助你分析包中包含的模块们的大小。")])])}),[],!1,null,null,null);t.default=n.exports}}]);