(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{241:function(t,a,s){t.exports=s.p+"assets/img/luoxiaosheng.3e3f64f6.svg"},242:function(t,a,s){t.exports=s.p+"assets/img/luoxiaosheng_learning.c39ce245.svg"},243:function(t,a,s){t.exports=s.p+"assets/img/luoxiaosheng_wechat.8efd3324.svg"},361:function(t,a,s){"use strict";s.r(a);var n=s(14),i=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_0-1learning"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0-1learning"}},[t._v("#")]),t._v(" 0-1Learning")]),t._v(" "),a("p",[a("img",{attrs:{src:s(241),alt:"alt text",title:"公众号"}}),t._v(" "),a("img",{attrs:{src:s(242),alt:"alt text",title:"学习"}}),t._v(" "),a("img",{attrs:{src:s(243),alt:"alt text",title:"微信"}})]),t._v(" "),a("h2",{attrs:{id:"函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数"}},[t._v("#")]),t._v(" 函数")]),t._v(" "),a("h3",{attrs:{id:"简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[t._v("#")]),t._v(" 简介")]),t._v(" "),a("ul",[a("li",[t._v("函数是一个数学术语")]),t._v(" "),a("li",[t._v("百度百科是这么说明的：\n"),a("ul",[a("li",[t._v("函数（function）的定义通常分为传统定义和近代定义，函数的两个定义本质是相同的，只是叙述概念的出发点不同，传统定义是从运动变化的观点出发，而近代定义是从集合、映射的观点出发。函数的近代定义是给定一个数集A，假设其中的元素为x，对A中的元素x施加对应法则f，记作f（x），得到另一数集B，假设B中的元素为y，则y与x之间的等量关系可以用y=f（x）表示，函数概念含有三个要素：定义域A、值域B和对应法则f。其中核心是对应法则f，它是函数关系的本质特征。")])])])]),t._v(" "),a("h3",{attrs:{id:"要点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#要点"}},[t._v("#")]),t._v(" 要点")]),t._v(" "),a("ul",[a("li",[t._v("函数的定义")]),t._v(" "),a("li",[t._v("函数的调用")]),t._v(" "),a("li",[t._v("函数的重载")])]),t._v(" "),a("h3",{attrs:{id:"函数的定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数的定义"}},[t._v("#")]),t._v(" 函数的定义")]),t._v(" "),a("ul",[a("li",[t._v("函数的格式")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("修饰符 返回值类型 函数名(参数列表)\n{\n函数体\n}\n\n// 有返回值函数例题\npublic static int square( int x )\n{\nint y=x*x;\nreturn y;\t//返回值\n}\n")])])]),a("h3",{attrs:{id:"函数的分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数的分类"}},[t._v("#")]),t._v(" 函数的分类")]),t._v(" "),a("ul",[a("li",[t._v("根据参数\n"),a("ul",[a("li",[t._v("有参函数")]),t._v(" "),a("li",[t._v("无参函数")])])]),t._v(" "),a("li",[t._v("根据返回值\n"),a("ul",[a("li",[t._v("有返回值函数")]),t._v(" "),a("li",[t._v("无返回值函数")])])])]),t._v(" "),a("h3",{attrs:{id:"无返回值函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#无返回值函数"}},[t._v("#")]),t._v(" 无返回值函数")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("public class FunctionDemo {\n\tpublic static void getBigger( int x, int y ) 04\t{\n\tif( x>=y ){\n\t\tSystem.out.println( x ); 08\t\n    }else{\n\t\tSystem.out.println( y ); 12\t}\n\t\treturn;\t//没有返回值，return可以省略14\t}\n\t}\n")])])]),a("h3",{attrs:{id:"函数调用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数调用"}},[t._v("#")]),t._v(" 函数调用")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("01\tpublic class FunctionDemo \n02\t{\n    //这里的是形式参数\n03\tpublic static int add( int x , int y ) \n04\t{\n05\tint z=x+y;\n06\treturn z ; \n07\t}\n08\tpublic static void main(String[] args) \n09\t{\n    //这里的是实际参数\n10\tint x =add( 10 , 20 );\n11\tSystem.out.println(x);\n12\tint y=add(100,200);\n13\t\tSystem.out.println(y); 14\t}\n15\t}\n\n")])])]),a("h3",{attrs:{id:"函数注意事项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数注意事项"}},[t._v("#")]),t._v(" 函数注意事项")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("形参必须注明数据类型")])]),t._v(" "),a("li",[a("p",[t._v("实参直接写，不需要类型声明")])]),t._v(" "),a("li",[a("p",[t._v("遇到return语句，函数结束执行，后续语句不执行！")])]),t._v(" "),a("li",[a("p",[t._v("函数的返回值，必须与函数声明中的返回值类型匹配")])]),t._v(" "),a("li",[a("p",[t._v("函数定义，不能写在main()中。函数是不能嵌套的；")])])]),t._v(" "),a("h3",{attrs:{id:"函数重载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数重载"}},[t._v("#")]),t._v(" 函数重载")]),t._v(" "),a("ul",[a("li",[t._v("重载的规则\n"),a("ul",[a("li",[t._v("多个函数名称相同")]),t._v(" "),a("li",[t._v("函数的参数个数不同，或参数类型不同，或参数顺序不同")])])])]),t._v(" "),a("h3",{attrs:{id:"函数重写"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数重写"}},[t._v("#")]),t._v(" 函数重写")]),t._v(" "),a("ul",[a("li",[t._v("函数重写一般出现在继承父类方法的子类中")]),t._v(" "),a("li",[t._v("在子类里写个与父类相同函数名、返回类型、参数个数、参数类型、参数顺序的方法")])])])}),[],!1,null,null,null);a.default=i.exports}}]);