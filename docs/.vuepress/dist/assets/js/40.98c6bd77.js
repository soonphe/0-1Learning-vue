(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{241:function(n,e,t){n.exports=t.p+"assets/img/luoxiaosheng.3e3f64f6.svg"},242:function(n,e,t){n.exports=t.p+"assets/img/luoxiaosheng_learning.c39ce245.svg"},243:function(n,e,t){n.exports=t.p+"assets/img/luoxiaosheng_wechat.8efd3324.svg"},339:function(n,e,t){"use strict";t.r(e);var a=t(14),s=Object(a.a)({},(function(){var n=this,e=n._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"_0-1learning"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_0-1learning"}},[n._v("#")]),n._v(" 0-1Learning")]),n._v(" "),e("p",[e("img",{attrs:{src:t(241),alt:"alt text",title:"公众号"}}),n._v(" "),e("img",{attrs:{src:t(242),alt:"alt text",title:"学习"}}),n._v(" "),e("img",{attrs:{src:t(243),alt:"alt text",title:"微信"}})]),n._v(" "),e("h2",{attrs:{id:"过渡和动画"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#过渡和动画"}},[n._v("#")]),n._v(" 过渡和动画")]),n._v(" "),e("p",[n._v("Vue 在插入、更新或者移除 DOM 时，提供多种不同方式的应用过渡效果。包括以下工具：")]),n._v(" "),e("p",[n._v("在 CSS 过渡和动画中自动应用 class\n可以配合使用第三方 CSS 动画库，如 Animate.css\n在过渡钩子函数中使用 JavaScript 直接操作 DOM\n可以配合使用第三方 JavaScript 动画库，如 Velocity.js\n在这里，我们只会讲到进入、离开和列表的过渡，你也可以看下一节的管理过渡状态。")]),n._v(" "),e("h3",{attrs:{id:"单元素-组件的过渡"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#单元素-组件的过渡"}},[n._v("#")]),n._v(" 单元素/组件的过渡")]),n._v(" "),e("p",[n._v("Vue 提供了 transition 的封装组件，在下列情形中，可以给任何元素和组件添加进入/离开过渡")]),n._v(" "),e("p",[n._v("条件渲染 (使用 v-if)\n条件展示 (使用 v-show)\n动态组件\n组件根节点\n这里是一个典型的例子：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('<div id="demo">\n  <button v-on:click="show = !show">\n    Toggle\n  </button>\n  <transition name="fade">\n    <p v-if="show">hello</p>\n  </transition>\n</div>\n\nnew Vue({\n  el: \'#demo\',\n  data: {\n    show: true\n  }\n})\n\n.fade-enter-active, .fade-leave-active {\n  transition: opacity .5s;\n}\n.fade-enter, .fade-leave-to /* .fade-leave-active below version 2.1.8 */ {\n  opacity: 0;\n}\n')])])]),e("h3",{attrs:{id:"过渡的类名"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#过渡的类名"}},[n._v("#")]),n._v(" 过渡的类名")]),n._v(" "),e("p",[n._v("在进入/离开的过渡中，会有 6 个 class 切换。")]),n._v(" "),e("p",[n._v("v-enter：定义进入过渡的开始状态。在元素被插入之前生效，在元素被插入之后的下一帧移除。")]),n._v(" "),e("p",[n._v("v-enter-active：定义进入过渡生效时的状态。在整个进入过渡的阶段中应用，在元素被插入之前生效，在过渡/动画完成之后移除。这个类可以被用来定义进入过渡的过程时间，延迟和曲线函数。")]),n._v(" "),e("p",[n._v("v-enter-to：2.1.8 版及以上定义进入过渡的结束状态。在元素被插入之后下一帧生效 (与此同时 v-enter 被移除)，在过渡/动画完成之后移除。")]),n._v(" "),e("p",[n._v("v-leave：定义离开过渡的开始状态。在离开过渡被触发时立刻生效，下一帧被移除。")]),n._v(" "),e("p",[n._v("v-leave-active：定义离开过渡生效时的状态。在整个离开过渡的阶段中应用，在离开过渡被触发时立刻生效，在过渡/动画完成之后移除。这个类可以被用来定义离开过渡的过程时间，延迟和曲线函数。")]),n._v(" "),e("p",[n._v("v-leave-to：2.1.8 版及以上定义离开过渡的结束状态。在离开过渡被触发之后下一帧生效 (与此同时 v-leave 被删除)，在过渡/动画完成之后移除。")]),n._v(" "),e("h3",{attrs:{id:"css-过渡"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#css-过渡"}},[n._v("#")]),n._v(" CSS 过渡")]),n._v(" "),e("p",[n._v("常用的过渡都是使用 CSS 过渡。")]),n._v(" "),e("p",[n._v("下面是一个简单例子：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('<div id="example-1">\n  <button @click="show = !show">\n    Toggle render\n  </button>\n  <transition name="slide-fade">\n    <p v-if="show">hello</p>\n  </transition>\n</div>\nnew Vue({\n  el: \'#example-1\',\n  data: {\n    show: true\n  }\n})\n/* 可以设置不同的进入和离开动画 */\n/* 设置持续时间和动画函数 */\n.slide-fade-enter-active {\n  transition: all .3s ease;\n}\n.slide-fade-leave-active {\n  transition: all .8s cubic-bezier(1.0, 0.5, 0.8, 1.0);\n}\n.slide-fade-enter, .slide-fade-leave-to\n/* .slide-fade-leave-active for below version 2.1.8 */ {\n  transform: translateX(10px);\n  opacity: 0;\n}\n')])])]),e("h3",{attrs:{id:"css-动画"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#css-动画"}},[n._v("#")]),n._v(" CSS 动画")]),n._v(" "),e("p",[n._v("CSS 动画用法同 CSS 过渡，区别是在动画中 v-enter 类名在节点插入 DOM 后不会立即删除，而是在 animationend 事件触发时删除。")]),n._v(" "),e("p",[n._v("示例：(省略了兼容性前缀)")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('<div id="example-2">\n  <button @click="show = !show">Toggle show</button>\n  <transition name="bounce">\n    <p v-if="show">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris facilisis enim libero, at lacinia diam fermentum id. Pellentesque habitant morbi tristique senectus et netus.</p>\n  </transition>\n</div>\nnew Vue({\n  el: \'#example-2\',\n  data: {\n    show: true\n  }\n})\n.bounce-enter-active {\n  animation: bounce-in .5s;\n}\n.bounce-leave-active {\n  animation: bounce-in .5s reverse;\n}\n@keyframes bounce-in {\n  0% {\n    transform: scale(0);\n  }\n  50% {\n    transform: scale(1.5);\n  }\n  100% {\n    transform: scale(1);\n  }\n}\n')])])]),e("h3",{attrs:{id:"javascript-钩子"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#javascript-钩子"}},[n._v("#")]),n._v(" JavaScript 钩子")]),n._v(" "),e("p",[n._v("可以在 attribute 中声明 JavaScript 钩子")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('<transition\n  v-on:before-enter="beforeEnter"\n  v-on:enter="enter"\n  v-on:after-enter="afterEnter"\n  v-on:enter-cancelled="enterCancelled"\n\n  v-on:before-leave="beforeLeave"\n  v-on:leave="leave"\n  v-on:after-leave="afterLeave"\n  v-on:leave-cancelled="leaveCancelled"\n>\n  \x3c!-- ... --\x3e\n</transition>\n')])])]),e("h3",{attrs:{id:"初始渲染的过渡"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#初始渲染的过渡"}},[n._v("#")]),n._v(" 初始渲染的过渡")]),n._v(" "),e("p",[n._v("可以通过 appear attribute 设置节点在初始渲染的过渡\n这里默认和进入/离开过渡一样，同样也可以自定义 CSS 类名。")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('<transition appear>\n  \x3c!-- ... --\x3e\n</transition>\n\n<transition\n  appear\n  appear-class="custom-appear-class"\n  appear-to-class="custom-appear-to-class" (2.1.8+)\n  appear-active-class="custom-appear-active-class"\n>\n  \x3c!-- ... --\x3e\n</transition>\n')])])]),e("h3",{attrs:{id:"多个元素的过渡"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#多个元素的过渡"}},[n._v("#")]),n._v(" 多个元素的过渡")]),n._v(" "),e("p",[n._v("我们之后讨论多个组件的过渡，对于原生标签可以使用 v-if/v-else。最常见的多标签过渡是一个列表和描述这个列表为空消息的元素：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('<transition>\n  <table v-if="items.length > 0">\n    \x3c!-- ... --\x3e\n  </table>\n  <p v-else>Sorry, no items found.</p>\n</transition>\n')])])]),e("p",[n._v("可以这样使用，但是有一点需要注意：")]),n._v(" "),e("p",[n._v("当有相同标签名的元素切换时，需要通过 key attribute 设置唯一的值来标记以让 Vue 区分它们，否则 Vue 为了效率只会替换相同标签内部的内容。即使在技术上没有必要，给在 "),e("transition",[n._v(" 组件中的多个元素设置 key 是一个更好的实践。")])],1),n._v(" "),e("p",[n._v("示例：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('<transition>\n  <button v-if="isEditing" key="save">\n    Save\n  </button>\n  <button v-else key="edit">\n    Edit\n  </button>\n</transition>\n')])])]),e("h3",{attrs:{id:"过度模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#过度模式"}},[n._v("#")]),n._v(" 过度模式")]),n._v(" "),e("p",[n._v("同时生效的进入和离开的过渡不能满足所有要求，所以 Vue 提供了过渡模式")]),n._v(" "),e("p",[n._v("in-out：新元素先进行过渡，完成之后当前元素过渡离开。")]),n._v(" "),e("p",[n._v("out-in：当前元素先进行过渡，完成之后新元素过渡进入。")]),n._v(" "),e("p",[n._v("用 out-in 重写之前的开关按钮过渡：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('<transition name="fade" mode="out-in">\n  \x3c!-- ... the buttons ... --\x3e\n</transition>\n')])])]),e("h3",{attrs:{id:"多个组件的过渡"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#多个组件的过渡"}},[n._v("#")]),n._v(" 多个组件的过渡")]),n._v(" "),e("p",[n._v("多个组件的过渡简单很多 - 我们不需要使用 key attribute。相反，我们只需要使用动态组件：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("<transition name=\"component-fade\" mode=\"out-in\">\n  <component v-bind:is=\"view\"></component>\n</transition>\nnew Vue({\n  el: '#transition-components-demo',\n  data: {\n    view: 'v-a'\n  },\n  components: {\n    'v-a': {\n      template: '<div>Component A</div>'\n    },\n    'v-b': {\n      template: '<div>Component B</div>'\n    }\n  }\n})\n.component-fade-enter-active, .component-fade-leave-active {\n  transition: opacity .3s ease;\n}\n.component-fade-enter, .component-fade-leave-to\n/* .component-fade-leave-active for below version 2.1.8 */ {\n  opacity: 0;\n}\n")])])]),e("h3",{attrs:{id:"列表过渡"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#列表过渡"}},[n._v("#")]),n._v(" 列表过渡")]),n._v(" "),e("p",[n._v("列表的进入/离开过渡\n现在让我们由一个简单的例子深入，进入和离开的过渡使用之前一样的 CSS 类名。")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('<div id="list-demo" class="demo">\n  <button v-on:click="add">Add</button>\n  <button v-on:click="remove">Remove</button>\n  <transition-group name="list" tag="p">\n    <span v-for="item in items" v-bind:key="item" class="list-item">\n      {{ item }}\n    </span>\n  </transition-group>\n</div>\nnew Vue({\n  el: \'#list-demo\',\n  data: {\n    items: [1,2,3,4,5,6,7,8,9],\n    nextNum: 10\n  },\n  methods: {\n    randomIndex: function () {\n      return Math.floor(Math.random() * this.items.length)\n    },\n    add: function () {\n      this.items.splice(this.randomIndex(), 0, this.nextNum++)\n    },\n    remove: function () {\n      this.items.splice(this.randomIndex(), 1)\n    },\n  }\n})\n.list-item {\n  display: inline-block;\n  margin-right: 10px;\n}\n.list-enter-active, .list-leave-active {\n  transition: all 1s;\n}\n.list-enter, .list-leave-to\n/* .list-leave-active for below version 2.1.8 */ {\n  opacity: 0;\n  transform: translateY(30px);\n}\n')])])]),e("h3",{attrs:{id:"可复用的过渡"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#可复用的过渡"}},[n._v("#")]),n._v(" 可复用的过渡")]),n._v(" "),e("p",[n._v("过渡可以通过 Vue 的组件系统实现复用。要创建一个可复用过渡组件，你需要做的就是将 "),e("transition",[n._v(" 或者 "),e("transition-group",[n._v(" 作为根组件，然后将任何子组件放置在其中就可以了。")])],1)],1),n._v(" "),e("p",[n._v("使用 template 的简单例子：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('Vue.component(\'my-special-transition\', {\ntemplate: \'\\\n<transition\\\nname="very-special-transition"\\\nmode="out-in"\\\nv-on:before-enter="beforeEnter"\\\nv-on:after-enter="afterEnter"\\\n>\\\n<slot></slot>\\\n</transition>\\\n\',\nmethods: {\nbeforeEnter: function (el) {\n// ...\n},\nafterEnter: function (el) {\n// ...\n}\n}\n})\n')])])])])}),[],!1,null,null,null);e.default=s.exports}}]);