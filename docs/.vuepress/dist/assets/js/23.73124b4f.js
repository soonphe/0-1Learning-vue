(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{241:function(t,a,v){t.exports=v.p+"assets/img/luoxiaosheng.3e3f64f6.svg"},242:function(t,a,v){t.exports=v.p+"assets/img/luoxiaosheng_learning.c39ce245.svg"},243:function(t,a,v){t.exports=v.p+"assets/img/luoxiaosheng_wechat.8efd3324.svg"},309:function(t,a,v){t.exports=v.p+"assets/img/java_array.6c738284.png"},363:function(t,a,v){"use strict";v.r(a);var e=v(14),_=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_0-1learning"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0-1learning"}},[t._v("#")]),t._v(" 0-1Learning")]),t._v(" "),a("p",[a("img",{attrs:{src:v(241),alt:"alt text",title:"公众号"}}),t._v(" "),a("img",{attrs:{src:v(242),alt:"alt text",title:"学习"}}),t._v(" "),a("img",{attrs:{src:v(243),alt:"alt text",title:"微信"}})]),t._v(" "),a("h2",{attrs:{id:"集合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集合"}},[t._v("#")]),t._v(" 集合")]),t._v(" "),a("h3",{attrs:{id:"简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[t._v("#")]),t._v(" 简介")]),t._v(" "),a("p",[t._v("很多时候，我们专心研究一个东西的时候，往往忘记了我们最初的目的是什么。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("    曾经研究过那么久的Java集合框架，为了搞清里面的细节，甚至都跑去重新买了一本数据结构，终于知道了线性表，知道了树，知道了查找表。也自己动手实现了ArrayList，LinkedList，HashMap等。\n\n    今天在公交车上，突然想到“我们为什么要使用Java集合框架呢？”竟然一时语塞，半天想不起来，也说不出个所以然呢。顿时悲从中来啊。\n")])])]),a("p",[t._v("回答前言中的问题，我们为什么使用集合框架？")]),t._v(" "),a("p",[t._v("大家还记得我们为什么要使用数组嘛？")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("Java是一门面向对象的语言，就免不了处理对象，当我们需要保持一组一样（类型相同）的对象（元素）的时候，我们应该使用一个容器（集合）来保存，数组就是这样一个容器。\n")])])]),a("p",[t._v("那么，数组有没有缺点呢？")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("数组一旦定义，长度将不能再变化。\n")])])]),a("p",[t._v("然而在我们的开发实践中，经常需要保存一些变长的数据集合，于是，我们需要一些能够动态增长长度的容器来保存我们的数据。")]),t._v(" "),a("p",[t._v("而我们需要对数据的保存的逻辑可能各种各样，于是就有了各种各样的数据结构。")]),t._v(" "),a("p",[t._v("我们将数据结构在Java中实现，于是就有了我们的集合框架。")]),t._v(" "),a("h3",{attrs:{id:"要点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#要点"}},[t._v("#")]),t._v(" 要点")]),t._v(" "),a("ul",[a("li",[t._v("Java中的集合类")]),t._v(" "),a("li",[t._v("Collection接口\n"),a("ul",[a("li",[t._v("Set接口")]),t._v(" "),a("li",[t._v("List接口")]),t._v(" "),a("li",[t._v("Iterator接口")])])]),t._v(" "),a("li",[t._v("Collections类")]),t._v(" "),a("li",[t._v("Map接口\n"),a("ul",[a("li",[t._v("Map接口")])])]),t._v(" "),a("li",[t._v("集合中的异常")]),t._v(" "),a("li",[t._v("泛型的使用")])]),t._v(" "),a("h3",{attrs:{id:"java中的集合类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java中的集合类"}},[t._v("#")]),t._v(" Java中的集合类")]),t._v(" "),a("ul",[a("li",[t._v("集合的概念\n"),a("ul",[a("li",[t._v("Java中集合类是用来存放对象的")]),t._v(" "),a("li",[t._v("集合相当于一个容器，里面包容着一组对象 ——\t容器类")]),t._v(" "),a("li",[t._v("其中的每个对象作为集合的一个元素出现")]),t._v(" "),a("li",[t._v("Java API提供的集合类位于java.util包内")])])]),t._v(" "),a("li",[t._v("Java中数组与集合的比较\n"),a("ul",[a("li",[t._v("数组也是容器，它是定长的，访问较快，但是数组不会自动扩充")]),t._v(" "),a("li",[t._v("数组可以包含基本数据类型或引用类型的对象，而集合中只能包 含引用类型的对象\n"),a("img",{attrs:{src:v(309),alt:"alt text"}})])])])]),t._v(" "),a("h3",{attrs:{id:"collection接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#collection接口"}},[t._v("#")]),t._v(" Collection接口")]),t._v(" "),a("ul",[a("li",[t._v("Collection接口\n"),a("ul",[a("li",[t._v("一组称为元素的对象")]),t._v(" "),a("li",[t._v("一个Collection中可以放不同类型的数据")]),t._v(" "),a("li",[t._v("是Set接口和List接口的父类")]),t._v(" "),a("li",[t._v("是否有特定的顺序以及是否允许重复，取决于它的实现")]),t._v(" "),a("li",[t._v("Set － 无序的集合；不允许重复")]),t._v(" "),a("li",[t._v("HashSet")]),t._v(" "),a("li",[t._v("List － 有序的集合；允许重复")]),t._v(" "),a("li",[t._v("ArrayList、LinkedList")])])])]),t._v(" "),a("h3",{attrs:{id:"collection接口常用方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#collection接口常用方法"}},[t._v("#")]),t._v(" Collection接口常用方法")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("方法")]),t._v(" "),a("th",[t._v("含义")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("boolean add(Object)")]),t._v(" "),a("td",[t._v("集合中加入一个对象，成功时返回true")])]),t._v(" "),a("tr",[a("td",[t._v("boolean addAll(Collection)")]),t._v(" "),a("td",[t._v("集合中加入另外一个集合对象")])]),t._v(" "),a("tr",[a("td",[t._v("int size()")]),t._v(" "),a("td",[t._v("集合内容纳的元素数量")])]),t._v(" "),a("tr",[a("td",[t._v("boolean isEmpty()")]),t._v(" "),a("td",[t._v("集合是否为空")])]),t._v(" "),a("tr",[a("td",[t._v("boolean contains(Object)")]),t._v(" "),a("td",[t._v("集合内是否含有参数对象")])]),t._v(" "),a("tr",[a("td",[t._v("Iterator iterator()")]),t._v(" "),a("td",[t._v("产生一个迭代器")])]),t._v(" "),a("tr",[a("td",[t._v("Object[] toArray()")]),t._v(" "),a("td",[t._v("返回一个包含所有元素的对象数组")])]),t._v(" "),a("tr",[a("td",[t._v("Object[] toArray(Object[])")]),t._v(" "),a("td",[t._v("把所有元素放入对象数组中")])]),t._v(" "),a("tr",[a("td",[t._v("boolean remove(Object)")]),t._v(" "),a("td",[t._v("从集合中删除对象")])]),t._v(" "),a("tr",[a("td",[t._v("boolean removeAll(Collection)")]),t._v(" "),a("td",[t._v("清空指定集合")])]),t._v(" "),a("tr",[a("td",[t._v("boolean containsAll(Collection)")]),t._v(" "),a("td",[t._v("判断集合内是否包含子集")])]),t._v(" "),a("tr",[a("td",[t._v("boolean retainAll(Collection)")]),t._v(" "),a("td",[t._v("删除子集合不包含的元素")])]),t._v(" "),a("tr",[a("td",[t._v("void clear()")]),t._v(" "),a("td",[t._v("清空集合")])]),t._v(" "),a("tr",[a("td",[t._v("Object[] toArray(Object[])")]),t._v(" "),a("td",[t._v("把所有元素放入对象数组中")])])])]),t._v(" "),a("h3",{attrs:{id:"set接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set接口"}},[t._v("#")]),t._v(" Set接口")]),t._v(" "),a("ul",[a("li",[t._v("Set接口\t示例\tSetDemo.java\n"),a("ul",[a("li",[t._v("Collection的子接口")]),t._v(" "),a("li",[t._v("用来包含一组 无序无重复 的对象")]),t._v(" "),a("li",[t._v("无序 — 是指元素存入顺序和集合内存储的顺序不同")]),t._v(" "),a("li",[t._v("无重复 — 两个对象e1和e2，如果e1.equals(e2)返回true，则认为e1和e2重复")]),t._v(" "),a("li",[t._v("Set有两种主要的集合实现类：")]),t._v(" "),a("li",[t._v("HashSet — HashSet的特性在于其内部对象的散列存取，即采用哈希技术")]),t._v(" "),a("li",[t._v("TreeSet — TreeSet存入的顺序跟存储的顺序不同，但是存储是按照排序存储的")])])])]),t._v(" "),a("h3",{attrs:{id:"list接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#list接口"}},[t._v("#")]),t._v(" List接口")]),t._v(" "),a("ul",[a("li",[t._v("List接口\t示例\tListDemo.java\n"),a("ul",[a("li",[t._v("Collection的子接口")]),t._v(" "),a("li",[t._v("用来包含一组 有序有重复 的对象")]),t._v(" "),a("li",[t._v("List中的元素都对应一个整数型的序号，记载其在容器中的位置， 可以根据序号存取容器中的元素")]),t._v(" "),a("li",[t._v("List有两种主要的集合实现类：")]),t._v(" "),a("li",[t._v("ArrayList")]),t._v(" "),a("li",[t._v("LinkedList")])])])]),t._v(" "),a("h4",{attrs:{id:"list接口常用的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#list接口常用的方法"}},[t._v("#")]),t._v(" List接口常用的方法")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("方法")]),t._v(" "),a("th",[t._v("含义")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("void add(int index,Object element)")]),t._v(" "),a("td",[t._v("在列表中的index位置，添加element元素")])]),t._v(" "),a("tr",[a("td",[t._v("Object get(int index)")]),t._v(" "),a("td",[t._v("返回列表中指定位置的元素")])]),t._v(" "),a("tr",[a("td",[t._v("int indexOf(Object o)")]),t._v(" "),a("td",[t._v("在list中查询元素的索引值，如不存在， 返回－1。")])]),t._v(" "),a("tr",[a("td",[t._v("int lastIndexOf(Object o)")]),t._v(" "),a("td",[t._v("List中如果存在多个重复元素， indexOf()方法返回第一个匹配元素的index。lastIndexOf(o)是返回最后一个匹配元素的index.")])]),t._v(" "),a("tr",[a("td",[t._v("ListIterator listIterator()")]),t._v(" "),a("td",[t._v("返回列表中元素的列表迭代器")])]),t._v(" "),a("tr",[a("td",[t._v("Object remove(int index)")]),t._v(" "),a("td",[t._v("移除列表中指定位置的元素")])]),t._v(" "),a("tr",[a("td",[t._v("Object set(int index,Object element)")]),t._v(" "),a("td",[t._v("用指定元素替换列表中指定位置的元素")])])])]),t._v(" "),a("h3",{attrs:{id:"list接口实现类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#list接口实现类"}},[t._v("#")]),t._v(" List接口实现类")]),t._v(" "),a("ul",[a("li",[t._v("ArrayList类\n"),a("ul",[a("li",[t._v("ArrayList是线性顺序存储的，是一种线性表")]),t._v(" "),a("li",[t._v("它的特性和数组很接近，数组大小是不变的，而ArrayList的大小 是可以动态改变的")])])]),t._v(" "),a("li",[t._v("ArrayList的构造方法")]),t._v(" "),a("li",[t._v("LinkedList类\n"),a("ul",[a("li",[t._v("是数据结构中链表的java实现")]),t._v(" "),a("li",[t._v("相对于List来说，LinkedList最主要的功能方面的增强是可以在List  的头部和尾部添加、删除、取得元素，直接提供了这些方法的实现。所以它可以非常方便的实现我们数据结构中的常见的Stack( 栈)、queue(队列)等")])])]),t._v(" "),a("li",[t._v("LinkedList类的构造方法")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" \tLinkedList 变量名 = new\tLinkedList() ;\t\n \tLinkedList 变量名 = new LinkedList(Collection c) ;\n")])])]),a("h4",{attrs:{id:"linkedlist类特有的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#linkedlist类特有的方法"}},[t._v("#")]),t._v(" LinkedList类特有的方法")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("方法")]),t._v(" "),a("th",[t._v("含义")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("void addFirst(Object o)")]),t._v(" "),a("td",[t._v("将给定元素插入此列表的开头")])]),t._v(" "),a("tr",[a("td",[t._v("void addLast(Object o)")]),t._v(" "),a("td",[t._v("将给定元素追加到此列表的结尾")])]),t._v(" "),a("tr",[a("td",[t._v("Object getFirst()")]),t._v(" "),a("td",[t._v("返回此列表的第一个元素")])]),t._v(" "),a("tr",[a("td",[t._v("Object getLast()")]),t._v(" "),a("td",[t._v("返回此列表的最后一个元素")])]),t._v(" "),a("tr",[a("td",[t._v("Object removeFirst()")]),t._v(" "),a("td",[t._v("移除并返回此列表的第一个元素")])]),t._v(" "),a("tr",[a("td",[t._v("Object removeLast()")]),t._v(" "),a("td",[t._v("移除并返回此列表的最后一个元素")])])])]),t._v(" "),a("h4",{attrs:{id:"arraylist与linkedlist的比较"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arraylist与linkedlist的比较"}},[t._v("#")]),t._v(" ArrayList与LinkedList的比较")]),t._v(" "),a("ul",[a("li",[t._v("存储结构\n"),a("ul",[a("li",[t._v("ArrayList是线性顺序存储")]),t._v(" "),a("li",[t._v("LinkedList对象间彼此串连起来的一个链表")])])]),t._v(" "),a("li",[t._v("操作性能\n"),a("ul",[a("li",[t._v("ArrayList适合随机查询的场合")]),t._v(" "),a("li",[t._v("LinkedList元素的插入和删除操作性高")]),t._v(" "),a("li",[t._v("从功能上，LinkedList要多一些")])])])]),t._v(" "),a("h3",{attrs:{id:"iterator接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#iterator接口"}},[t._v("#")]),t._v(" Iterator接口")]),t._v(" "),a("ul",[a("li",[t._v("Iterator接口\n"),a("ul",[a("li",[t._v("Iterator对象称作迭代器，用来方便的实现对容器内的元素进行遍 历操作")]),t._v(" "),a("li",[t._v("所有实现了Collection接口的集合类都有一个iterator(\t)方法，返回一个实现了Iterator接口的对象")]),t._v(" "),a("li",[t._v("Iterator对象实现了统一的一个用来遍历Collection中对象的方法")]),t._v(" "),a("li",[t._v("Iterator是为遍历而设计，能够从集合中取出元素和删除元素，但是没有添加元素的功能")]),t._v(" "),a("li",[t._v("Iterator的功能上比较简单，使用中，只能单向移动")])])])]),t._v(" "),a("h3",{attrs:{id:"iterator接口常用方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#iterator接口常用方法"}},[t._v("#")]),t._v(" Iterator接口常用方法")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("方法")]),t._v(" "),a("th",[t._v("含义")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Object next()")]),t._v(" "),a("td",[t._v("返回游标右边的元素并将游标移动到下一个位置")])]),t._v(" "),a("tr",[a("td",[t._v("boolean hasNext()")]),t._v(" "),a("td",[t._v("判断游标右边是否有元素")])]),t._v(" "),a("tr",[a("td",[t._v("void remove()")]),t._v(" "),a("td",[t._v("删除游标左边的元素，在执行完next之后，该操作只能执行一次")])])])]),t._v(" "),a("h3",{attrs:{id:"collections类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#collections类"}},[t._v("#")]),t._v(" Collections类")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("* Collections\n    * Collections类是类似于Arrays类的公用工具类 ,它提供了一些static方法供集合类使用或操作集合类 。\n")])])]),a("h4",{attrs:{id:"collections类常用方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#collections类常用方法"}},[t._v("#")]),t._v(" Collections类常用方法")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("方法")]),t._v(" "),a("th",[t._v("含义")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Objectmax(Colectionc,Comparatorcomp)")]),t._v(" "),a("td",[t._v("max算法采用Comparator比较算法")])]),t._v(" "),a("tr",[a("td",[t._v("Objectmax(colectionc)")]),t._v(" "),a("td",[t._v("返回集合中的最大元素，需要考虑比较接口的实现")])]),t._v(" "),a("tr",[a("td",[t._v("Objectmin(Colectionc)")]),t._v(" "),a("td",[t._v("返回集合中的最小元素")])]),t._v(" "),a("tr",[a("td",[t._v("voidreverse(Colectionc\t)")]),t._v(" "),a("td",[t._v("把集合中的元素顺序反转")])]),t._v(" "),a("tr",[a("td",[t._v("voidcopy(Listdest,Listsrc)")]),t._v(" "),a("td",[t._v("src集合中元素复制到dest集合")])]),t._v(" "),a("tr",[a("td",[t._v("voidfil(Listlist,Objecto)")]),t._v(" "),a("td",[t._v("填充list集合，填充元素为o")])]),t._v(" "),a("tr",[a("td",[t._v("intbinarySearch(List")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("list,Objectkey)")]),t._v(" "),a("td",[t._v("对排序后的集合list进行查询元素操作")])]),t._v(" "),a("tr",[a("td",[t._v("voidsort(Listlist)")]),t._v(" "),a("td",[t._v("对一种List做排序")])])])]),t._v(" "),a("h3",{attrs:{id:"map接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#map接口"}},[t._v("#")]),t._v(" Map接口")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("Map接口")]),t._v(" "),a("ul",[a("li",[t._v("Map内存储的是键/值对这样以成对的对象组(可以把一组对象当成 一个元素)，通过“键”对象来查询“值”对象")]),t._v(" "),a("li",[t._v("Map是不同于Collection的另外一种集合接口")]),t._v(" "),a("li",[t._v("Map中，key值是唯一的(不能重复)，而key对象是 与value对象关联在一起的")])])]),t._v(" "),a("li",[a("p",[t._v("Map接口有两个实现：")]),t._v(" "),a("ul",[a("li",[t._v("HashMap — key/value对是按照Hash算法存储的")]),t._v(" "),a("li",[t._v("TreeMap — key/value对是排序(按key排序)存储的")])])])]),t._v(" "),a("h4",{attrs:{id:"map常用方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#map常用方法"}},[t._v("#")]),t._v(" Map常用方法")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("方法")]),t._v(" "),a("th",[t._v("含义")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Object put(Object key,Object value)")]),t._v(" "),a("td",[t._v("将指定的值与此映射中的指定键相关联")])]),t._v(" "),a("tr",[a("td",[t._v("void putAll(Map t)")]),t._v(" "),a("td",[t._v("将映射t中所有映射关系复制到此映射中")])]),t._v(" "),a("tr",[a("td",[t._v("Object get(Object key)")]),t._v(" "),a("td",[t._v("返回此映射中映射到指定键的值")])]),t._v(" "),a("tr",[a("td",[t._v("Object remove(Object key)")]),t._v(" "),a("td",[t._v("若存在此键的映射关系,将其从映射中移除")])]),t._v(" "),a("tr",[a("td",[t._v("boolean containsKey(Object key)")]),t._v(" "),a("td",[t._v("若此映射包含指定键的映射关系，返回true")])]),t._v(" "),a("tr",[a("td",[t._v("boolean containsValue(Object value)")]),t._v(" "),a("td",[t._v("若此映射为指定值映射一个或多个键, 返回 true")])]),t._v(" "),a("tr",[a("td",[t._v("int size()")]),t._v(" "),a("td",[t._v("返回此映射中的键-值映射对数")])]),t._v(" "),a("tr",[a("td",[t._v("void clear()")]),t._v(" "),a("td",[t._v("从此映射中移除所有映射关系")])]),t._v(" "),a("tr",[a("td",[t._v("boolean isEmpty()")]),t._v(" "),a("td",[t._v("若此映射未包含键-值映射关系,返回 true")])]),t._v(" "),a("tr",[a("td",[t._v("Set keySet()")]),t._v(" "),a("td",[t._v("返回此映射中包含的键的 set 视图")])])])]),t._v(" "),a("h4",{attrs:{id:"map实现类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#map实现类"}},[t._v("#")]),t._v(" Map实现类")]),t._v(" "),a("ul",[a("li",[t._v("HashMap类\t示例\tHashMapDemo.java\n"),a("ul",[a("li",[t._v("基于哈希表的 Map 接口的实现")]),t._v(" "),a("li",[t._v("HashMap的构造方法")])])])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" \tHashMap 变量名 = new\tHashMap() ;\t\n \tHashMap  变量名 = new HashMap(int capacity) ;\t\n \tHashMap 变量名 = new HashMap(int capacity,float lodeFactor) ;\t\n \tHashMap 变量名 = new HashMap(Map m) ;\n")])])]),a("h4",{attrs:{id:"hashmap与treemap的比较"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashmap与treemap的比较"}},[t._v("#")]),t._v(" HashMap与TreeMap的比较")]),t._v(" "),a("ul",[a("li",[t._v("HashMap与TreeMap的比较\n"),a("ul",[a("li",[t._v("HashMap基于哈希表实现。TreeMap基于树实现。")]),t._v(" "),a("li",[t._v("HashMap可以通过调优初始容量和负载因子，优化HashMap空间 的使用。TreeMap没有调优选项，因为该树总处于平衡状态")]),t._v(" "),a("li",[t._v("HashMap性能优于TreeMap。")])])])]),t._v(" "),a("h4",{attrs:{id:"hashmap与hashtable的比较"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashmap与hashtable的比较"}},[t._v("#")]),t._v(" HashMap与Hashtable的比较")]),t._v(" "),a("ul",[a("li",[t._v("HashMap与Hashtable的比较\n"),a("ul",[a("li",[t._v("Hashtable是基于陈旧的Dictionary类的，HashMap是Java\t1.2引进的Map接口的一个实现。")]),t._v(" "),a("li",[t._v("Hashtable是线程安全的，也就是说是同步的，而HashMap是线 程序不安全的，不是同步的。")]),t._v(" "),a("li",[t._v("HashMap允许将null作为一个entry的key或者value，而Hashtable不允许。")])])])]),t._v(" "),a("h3",{attrs:{id:"集合类选择"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集合类选择"}},[t._v("#")]),t._v(" 集合类选择")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("* Set内存放的元素不允许重复，List存放的元素有一定的顺序。\n* Map的应用主要在利用键/值对进行快速查询。\n* ArrayList和LinkedList的区别在于随机查询性能上ArrayList要好， 但LinkedList的中间元素的插入与删除性能好 。\n* HashSet和TreeSet的区别在于集合内元素是否排序 。\n")])])]),a("h3",{attrs:{id:"集合种的异常"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集合种的异常"}},[t._v("#")]),t._v(" 集合种的异常")]),t._v(" "),a("ul",[a("li",[t._v("使用集合类时常见的异常")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("方法")]),t._v(" "),a("th",[t._v("含义")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("ClassCastException")]),t._v(" "),a("td",[t._v("从集合中取得元素对象在进行类型转换的时候类型不匹配")])]),t._v(" "),a("tr",[a("td",[t._v("UnsupportedOperationException")]),t._v(" "),a("td",[t._v("当底层实现没有实现上层的相关方法的时候由Collection抛出该异常。Collection接口(或其他集合超类)中的一些函数在java doc中是标明”可有可无(Optional)”的函数，这些函数在底层的一些具体实现中，有的实现了，有的没有实现，当我们调用底层实现集合类的这些没有实现的方法时就会抛出该异常。")])]),t._v(" "),a("tr",[a("td",[t._v("ConcurrentModificationException")]),t._v(" "),a("td",[t._v("ConcurrentModificationException 当采用Iterator遍历集合时，如果此时集合中的元素被改变则Iterator遍历抛出此异常")])]),t._v(" "),a("tr",[a("td",[t._v("IndexOutOfBoundsException")]),t._v(" "),a("td",[t._v("集合中元素引用的索引值超出界限(<0或>size())")])]),t._v(" "),a("tr",[a("td",[t._v("NoSuchElementException")]),t._v(" "),a("td",[t._v("LinkedList中getLast，getFirst等方法取元素的时候List为空")])])])]),t._v(" "),a("h3",{attrs:{id:"泛型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#泛型"}},[t._v("#")]),t._v(" 泛型")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("集合在使用上的问题\t示例\tCollectionException.java")]),t._v(" "),a("ul",[a("li",[t._v("集合中的add( )方法接受的是一个Object对象的参数 ，在获取集合中的对象时，必须进行造型（强制类型转换）操作。")]),t._v(" "),a("li",[t._v("造型操作可能出现问题，一般在程序运行时才能发生，发现问题 比较困难。")])])]),t._v(" "),a("li",[a("p",[t._v("泛型的出现")]),t._v(" "),a("ul",[a("li",[t._v("在对象放入集合前，为其作个限制")]),t._v(" "),a("li",[t._v("在获取集合中的对象时，不用进行造型的操作")]),t._v(" "),a("li",[t._v("当有不同类型的对象添加到集合中的时候，编译时就能检查出错 误")])])]),t._v(" "),a("li",[a("p",[t._v("泛型的定义")]),t._v(" "),a("ul",[a("li",[t._v("泛型经常被称为参数化类型，它能够像方法一样接受不同类型的 参数。")]),t._v(" "),a("li",[t._v("定义方式    ArrayList"),a("E",[t._v(" 变量名 ;")])],1),t._v(" "),a("li",[t._v("E是变量类型")])])])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("ArrayList<String>\tarr;\narr = new ArrayList<String>();\nHashMap<Integer,String>  hm = new\tHashMap<Integer,String>();\n")])])]),a("h4",{attrs:{id:"类型擦除"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型擦除"}},[t._v("#")]),t._v(" 类型擦除")]),t._v(" "),a("p",[t._v("Java语言在JDK1.5之后引入的泛型实际上只在程序源码中存在，在编译后的字节码文件中，就已经被替换为了原来的原生类型，并且在相应的地方插入了强制转型代码，因此对于运行期的Java语言来说，"),a("code",[t._v("ArrayList<String>")]),t._v("和"),a("code",[t._v("ArrayList<Integer>")]),t._v("就是同一个类。所以泛型技术实际上是Java语言的一颗语法糖，Java语言中的泛型实现方法称为类型擦除，基于这种方法实现的泛型被称为伪泛型。\n下面是一段简单的Java泛型代码：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('Map<Integer,String> map = new HashMap<Integer,String>();  \nmap.put(1,"No.1");  \nmap.put(2,"No.2");  \nSystem.out.println(map.get(1));  \nSystem.out.println(map.get(2));  \n')])])]),a("p",[t._v("将这段Java代码编译成Class文件，然后再用字节码反编译工具进行反编译后，将会发现泛型都变回了原生类型，如下面的代码所示：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('Map map = new HashMap();  \nmap.put(1,"No.1");  \nmap.put(2,"No.2");  \nSystem.out.println((String)map.get(1));  \nSystem.out.println((String)map.get(2));  \n')])])]),a("p",[t._v("为了更详细地说明类型擦除，再看如下代码：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('import java.util.List;  \npublic class FanxingTest{  \n    public void method(List<String> list){  \n        System.out.println("List String");  \n    }  \n    public void method(List<Integer> list){  \n        System.out.println("List Int");  \n    }  \n}  \n')])])]),a("p",[t._v("当我用Javac编译器编译这段代码时，报出了如下错误：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("FanxingTest.java:3: 名称冲突：method(java.util.List<java.lang.String>) 和 method\n\n(java.util.List<java.lang.Integer>) 具有相同疑符\n\npublic void method(List<String> list){\n\n^\n\nFanxingTest.java:6: 名称冲突：method(java.util.List<java.lang.Integer>) 和 metho\n\nd(java.util.List<java.lang.String>) 具有相同疑符\n\npublic void method(List<Integer> list){\n\n^\n")])])]),a("p",[t._v("这是因为泛型List"),a("String",[t._v("和List"),a("Integer",[t._v("编译后都被擦除了，变成了一样的原生类型List，擦除动作导致这两个方法的特征签名变得一模一样，在Class类文件结构一文中讲过，Class文件中不能存在特征签名相同的方法。")])],1)],1),t._v(" "),a("p",[t._v("把以上代码修改如下：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('import java.util.List;  \npublic class FanxingTest{  \n    public int method(List<String> list){  \n        System.out.println("List String");  \n        return 1;  \n    }  \n    public boolean method(List<Integer> list){  \n        System.out.println("List Int");  \n        return true;  \n    }  \n}  \n')])])]),a("p",[t._v("发现这时编译可以通过了（注意：Java语言中true和1没有关联，二者属于不同的类型，不能相互转换，不存在C语言中整数值非零即真的情况）。两个不同类型的返回值的加入，使得方法的重载成功了。这是为什么呢？")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("我们知道，Java代码中的方法特征签名只包括了方法名称、参数顺序和参数类型，并不包括方法的返回值，因此方法的返回值并不参与重载方法的选择，这样看来为重载方法加入返回值貌似是多余的。对于重载方法的选择来说，这确实是多余的，但我们现在要解决的问题是让上述代码能通过编译，让两个重载方法能够合理地共存于同一个Class文件之中，这就要看字节码的方法特征签名，它不仅包括了Java代码中方法特征签名中所包含的那些信息，还包括方法返回值及受查异常表。为两个重载方法加入不同的返回值后，因为有了不同的字节码特征签名，它们便可以共存于一个Class文件之中。\n")])])])])}),[],!1,null,null,null);a.default=_.exports}}]);