(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{241:function(e,a,s){e.exports=s.p+"assets/img/luoxiaosheng.3e3f64f6.svg"},242:function(e,a,s){e.exports=s.p+"assets/img/luoxiaosheng_learning.c39ce245.svg"},243:function(e,a,s){e.exports=s.p+"assets/img/luoxiaosheng_wechat.8efd3324.svg"},336:function(e,a,s){"use strict";s.r(a);var t=s(14),n=Object(t.a)({},(function(){var e=this,a=e._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"_0-1learning"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0-1learning"}},[e._v("#")]),e._v(" 0-1Learning")]),e._v(" "),a("p",[a("img",{attrs:{src:s(241),alt:"alt text",title:"公众号"}}),e._v(" "),a("img",{attrs:{src:s(242),alt:"alt text",title:"学习"}}),e._v(" "),a("img",{attrs:{src:s(243),alt:"alt text",title:"微信"}})]),e._v(" "),a("h2",{attrs:{id:"指令语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#指令语法"}},[e._v("#")]),e._v(" 指令语法")]),e._v(" "),a("h3",{attrs:{id:"模板语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模板语法"}},[e._v("#")]),e._v(" 模板语法")]),e._v(" "),a("p",[e._v("Vue.js 使用了基于 HTML 的模板语法，允许开发者声明式地将 DOM 绑定至底层 Vue 实例的数据。所有 Vue.js 的模板都是合法的 HTML，所以能被遵循规范的浏览器和 HTML 解析器解析。")]),e._v(" "),a("h3",{attrs:{id:"插值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#插值"}},[e._v("#")]),e._v(" 插值")]),e._v(" "),a("p",[e._v("文本\n数据绑定最常见的形式就是使用“Mustache”语法 (双大括号) 的文本插值：\n"),a("span",[e._v("Message: "+e._s(e.msg))])]),e._v(" "),a("h3",{attrs:{id:"指令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#指令"}},[e._v("#")]),e._v(" 指令")]),e._v(" "),a("h3",{attrs:{id:"指令v-html原始"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#指令v-html原始"}},[e._v("#")]),e._v(" 指令v-html原始")]),e._v(" "),a("p",[e._v("双大括号会将数据解释为普通文本，而非 HTML 代码。为了输出真正的 HTML，你需要使用 v-html 指令：\n")]),a("p",[e._v("Using mustaches: "+e._s(e.rawHtml))]),e._v(" "),a("p",[e._v("Using v-html directive: "),a("span",{domProps:{innerHTML:e._s(e.rawHtml)}})]),a("p"),e._v(" "),a("h3",{attrs:{id:"指令v-bind"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#指令v-bind"}},[e._v("#")]),e._v(" 指令v-bind")]),e._v(" "),a("p",[e._v("示例：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("<div id=\"app-2\">\n  <span v-bind:title=\"message\">\n    鼠标悬停几秒钟查看此处动态绑定的提示信息！\n  </span>\n</div>\nvar app2 = new Vue({\n  el: '#app-2',\n  data: {\n    message: '页面加载于 ' + new Date().toLocaleString()\n  }\n})\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("鼠标悬停几秒钟查看此处动态绑定的提示信息！\n")])])]),a("p",[e._v("你看到的 v-bind attribute 被称为指令。指令带有前缀 v-，以表示它们是 Vue 提供的特殊 attribute。可能你已经猜到了，它们会在渲染的 DOM 上应用特殊的响应式行为。在这里，该指令的意思是：“将这个元素节点的 title attribute 和 Vue 实例的 message property 保持一致”。")]),e._v(" "),a("p",[e._v("如果你再次打开浏览器的 JavaScript 控制台，输入 app2.message = '新消息'，就会再一次看到这个绑定了 title attribute 的 HTML 已经进行了更新。")]),e._v(" "),a("p",[e._v("v-bind 缩写")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('\x3c!-- 完整语法 --\x3e\n<a v-bind:href="url">...</a>\n\n\x3c!-- 缩写 --\x3e\n<a :href="url">...</a>\n')])])]),a("p",[e._v("v-on 缩写")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('\x3c!-- 完整语法 --\x3e\n<a v-on:click="doSomething">...</a>\n\n\x3c!-- 缩写 --\x3e\n<a @click="doSomething">...</a>\n')])])]),a("h3",{attrs:{id:"指令v-if-条件判断"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#指令v-if-条件判断"}},[e._v("#")]),e._v(" 指令v-if：条件判断")]),e._v(" "),a("p",[e._v("控制切换一个元素是否显示也相当简单：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<div id="app-3">\n  <p v-if="seen">现在你看到我了</p>\n</div>\nvar app3 = new Vue({\n  el: \'#app-3\',\n  data: {\n    seen: true\n  }\n})\n\n')])])]),a("p",[e._v("继续在控制台输入 app3.seen = false，你会发现之前显示的消息消失了。")]),e._v(" "),a("p",[e._v("这个例子演示了我们不仅可以把数据绑定到 DOM 文本或 attribute，还可以绑定到 DOM "),a("em",[e._v("结构")]),e._v("。此外，Vue 也提供一个强大的过渡效果系统，可以在 Vue 插入/更新/移除元素时自动应用过渡效果。")]),e._v(" "),a("h3",{attrs:{id:"指令v-else和v-else-if"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#指令v-else和v-else-if"}},[e._v("#")]),e._v(" 指令v-else和v-else-if")]),e._v(" "),a("p",[e._v("v-else\n你可以使用 v-else 指令来表示 v-if 的“else 块”：")]),e._v(" "),a("p",[e._v("v-else-if，顾名思义，充当 v-if 的“else-if 块”，可以连续使用：")]),e._v(" "),a("p",[e._v("例：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("<div v-if=\"type === 'A'\">\n  A\n</div>\n<div v-else-if=\"type === 'B'\">\n  B\n</div>\n<div v-else-if=\"type === 'C'\">\n  C\n</div>\n<div v-else>\n  Not A/B/C\n</div>\n")])])]),a("h3",{attrs:{id:"指令v-for-循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#指令v-for-循环"}},[e._v("#")]),e._v(" 指令v-for：循环")]),e._v(" "),a("p",[e._v("例如，v-for 指令可以绑定数组的数据来渲染一个项目列表：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("<div id=\"app-4\">\n  <ol>\n    <li v-for=\"todo in todos\">\n      {{ todo.text }}\n    </li>\n  </ol>\n</div>\nvar app4 = new Vue({\n  el: '#app-4',\n  data: {\n    todos: [\n      { text: '学习 JavaScript' },\n      { text: '学习 Vue' },\n      { text: '整个牛项目' }\n    ]\n  }\n})\n")])])]),a("p",[e._v("在控制台里，输入 app4.todos.push({ text: '新项目' })，你会发现列表最后添加了一个新项目。")]),e._v(" "),a("h3",{attrs:{id:"指令v-on-事件监听"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#指令v-on-事件监听"}},[e._v("#")]),e._v(" 指令v-on：事件监听")]),e._v(" "),a("p",[e._v("例： v-on 指令添加一个事件监听器，通过它调用在 Vue 实例中定义的方法：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("<div id=\"app-5\">\n  <p>{{ message }}</p>\n  <button v-on:click=\"reverseMessage\">反转消息</button>\n</div>\nvar app5 = new Vue({\n  el: '#app-5',\n  data: {\n    message: 'Hello Vue.js!'\n  },\n  methods: {\n    reverseMessage: function () {\n      this.message = this.message.split('').reverse().join('')\n    }\n  }\n})\n")])])]),a("p",[e._v("注意在 reverseMessage 方法中，我们更新了应用的状态，但没有触碰 DOM——所有的 DOM 操作都由 Vue 来处理，你编写的代码只需要关注逻辑层面即可。")]),e._v(" "),a("h3",{attrs:{id:"指令v-model-表单输入和应用状态之间的双向绑定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#指令v-model-表单输入和应用状态之间的双向绑定"}},[e._v("#")]),e._v(" 指令v-model：表单输入和应用状态之间的双向绑定")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("<div id=\"app-6\">\n  <p>{{ message }}</p>\n  <input v-model=\"message\">\n</div>\nvar app6 = new Vue({\n  el: '#app-6',\n  data: {\n    message: 'Hello Vue!'\n  }\n})\n\n")])])]),a("p",[e._v("你会看到输入和提示都是一样的字符。\nHello Vue!\nHello Vue!")]),e._v(" "),a("h3",{attrs:{id:"指令v-model-表单输入和应用状态之间的双向绑定-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#指令v-model-表单输入和应用状态之间的双向绑定-2"}},[e._v("#")]),e._v(" 指令v-model：表单输入和应用状态之间的双向绑定")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("<div id=\"app-6\">\n  <p>{{ message }}</p>\n  <input v-model=\"message\">\n</div>\nvar app6 = new Vue({\n  el: '#app-6',\n  data: {\n    message: 'Hello Vue!'\n  }\n})\n\n")])])]),a("p",[e._v("你会看到输入和提示都是一样的字符。\nHello Vue!\nHello Vue!")]),e._v(" "),a("h3",{attrs:{id:"指令v-show"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#指令v-show"}},[e._v("#")]),e._v(" 指令v-show")]),e._v(" "),a("p",[e._v("v-show\n另一个用于根据条件展示元素的选项是 v-show 指令。用法大致一样：")]),e._v(" "),a("h1",{directives:[{name:"show",rawName:"v-show",value:e.ok,expression:"ok"}]},[e._v("Hello!")]),e._v("\n不同的是带有 v-show 的元素始终会被渲染并保留在 DOM 中。v-show 只是简单地切换元素的 CSS property display。\n"),a("p",[e._v("注意，v-show 不支持 "),[e._v(" 元素，也不支持 v-else。")]],2)])}),[],!1,null,null,null);a.default=n.exports}}]);