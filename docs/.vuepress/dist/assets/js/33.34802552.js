(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{241:function(e,t,n){e.exports=n.p+"assets/img/luoxiaosheng.3e3f64f6.svg"},242:function(e,t,n){e.exports=n.p+"assets/img/luoxiaosheng_learning.c39ce245.svg"},243:function(e,t,n){e.exports=n.p+"assets/img/luoxiaosheng_wechat.8efd3324.svg"},331:function(e,t,n){"use strict";n.r(t);var a=n(14),r=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"_0-1learning"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_0-1learning"}},[e._v("#")]),e._v(" 0-1Learning")]),e._v(" "),t("p",[t("img",{attrs:{src:n(241),alt:"alt text",title:"公众号"}}),e._v(" "),t("img",{attrs:{src:n(242),alt:"alt text",title:"学习"}}),e._v(" "),t("img",{attrs:{src:n(243),alt:"alt text",title:"微信"}})]),e._v(" "),t("h2",{attrs:{id:"数据存储"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据存储"}},[e._v("#")]),e._v(" 数据存储")]),e._v(" "),t("h3",{attrs:{id:"持久化技术简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#持久化技术简介"}},[e._v("#")]),e._v(" 持久化技术简介")]),e._v(" "),t("p",[e._v("数据持久化就是指将那些内存中的瞬时数据保存到存储设备中，保证即使在手机或电脑关机的情况下，这些数据仍然不会丢失。\n保存在内存中的数据是处于瞬时状态的，而保存在存储设备中的数据是处于持久状态的，持久化技术则是提供了一种机制可以让数据在瞬时状态和持久状态之间进行转换。\n持久化技术被广泛应用于各种程序设计的领域当中，而本书中要探讨的自然是Android中的数据持久化技术。Android 系统中主要提供了三种方式用于简单地实现数据持久化功能，")]),e._v(" "),t("p",[e._v("即文件存储、SharedPreference 存储以及数据库存储")]),e._v(" "),t("h3",{attrs:{id:"文件存储"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#文件存储"}},[e._v("#")]),e._v(" 文件存储")]),e._v(" "),t("p",[e._v("数据写入文件")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('public void save() {\n    String data = "Data to save";\n    FileOutputStream out = null;\n    BufferedWriter writer = null;\n    try {\n        out = openFileOutput("data", Context.MODE_PRIVATE);\n        writer = new BufferedWriter(new OutputStreamWriter(out));\n        writer.write(data);\n    } catch (IOException e) {\n        e.printStackTrace();\n    } finally {\n        try {\n            if (writer != null) {\n                writer.close();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n')])])]),t("p",[e._v("从文件中读取数据")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('public String load() {\n    FileInputStream in = null;\n    BufferedReader reader = null;\n    StringBuilder content = new StringBuilder();\n    try {\n        in = openFileInput("data");\n        reader = new BufferedReader(new InputStreamReader(in));\n        String line = "";\n        while ((line = reader.readLine()) != null) {\n            content.append(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    } finally {\n        if (reader != null) {\n            try {\n                reader.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n    return content.toString();\n}\n\n')])])]),t("h3",{attrs:{id:"sharedpreferences-存储"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sharedpreferences-存储"}},[e._v("#")]),e._v(" SharedPreferences 存储")]),e._v(" "),t("p",[e._v("SharedPreferences 是使用键值对的方式进行存储数据的。\n想要使用SharedPreferences 来存储数据，首先主要获取到SharedPreferences 对象。")]),e._v(" "),t("p",[e._v("Android提供了三种方法用于获取SharedPreferences对象：\n1，Context类中的getSharedPreferences(）方法\n//此方法接收两个参数，一个参数用于指定SharedPreferences文件的名称，如果指定的文件不存在则会创建一个，SharedPreferences文件都是存放在/data/data/"),t("package",{attrs:{name:""}},[e._v('/shared_prefs/目录下\n//第二个参数用于指定操作模式，目前只有MODE_PRIVATE这种模式，和直接传入0效果相同\nSharedPreferences.Editor editor = getSharedPreferences("data",MODE_PRIVATE).edit();\neditor.putString("name", "Tom");\neditor.putInt("age",13);\neditor.putBoolean("married",false);\neditor.apply();')])],1),e._v(" "),t("p",[e._v("2，Activity类中的getPreferences()方法\n//这个方法和Context中的getSharedPreferences()方法很类似，不过它只接收一个操作模式，因为使用这个方法时会自动将当前活动的类名作为SharedPreferences的文件名")]),e._v(" "),t("p",[e._v("3，PreferencesManager类中的getDefaultSharedPreferences()方法\n//这是一个静态方法，它接收一个Context参数，并自动使用当前应用程序的包名作为前缀来命名SharedPreferences文件\n得到了SharedPreferences对象后， 就可以开始想SharedPreferences文件中存储数据了，主要可以分为三步：\n（1）调用SharedPreferences对象的edit()方法来获取一个SharedPreferences.Editor对象\n（2）向SharedPreferences.Editor 对象中添加数据，比如添加一个布尔值，可以使用putBoolean() 方法\n（3）调用apply()方法的添加的数据提交，从而完成数据存储操作")]),e._v(" "),t("h4",{attrs:{id:"sharedpreferences中读取数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sharedpreferences中读取数据"}},[e._v("#")]),e._v(" SharedPreferences中读取数据")]),e._v(" "),t("p",[e._v('SharedPreferences pref = getSharedPreferences("data",MODE_PRIVATE\t);\nString name = pref.getString("name","");\nint age = pref.getInt("age",0);\nboolean married = pref.getBoolean("married", false);')]),e._v(" "),t("h3",{attrs:{id:"sqlist-存储方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sqlist-存储方式"}},[e._v("#")]),e._v(" SQList 存储方式")]),e._v(" "),t("p",[e._v("Android 为了让我们能够更加方便的管理数据库，专门提供了一个SQLiteOpenHelper 帮助类，借助这个类可以非常简单的将数据库进行创建好升级。\nSQLiteOpenHelper 中有两个抽象方法，分别是onCreate()和onUpgrade()，我们必须在自己的帮助类里面重写这两个方法，然后分别在这两个方法中去实现创建、升级数据库的逻辑\nSQLiteOpenHelper 中有两个非常重要的实例方法，getReadableDatabase() 和 getWritableDatabase() 。\n这两个方法可以创建或者打开一个现有的数据库（如果数据库存在则直接打开，否则创建一个新的数据库），并返回一个可对数据库进行读写操作的对象。\n不同的是，当数据库不可写入（如磁盘空间已满），getReadableDatabase方法返回的对象将以只读的方式打开数据库，而getWeitableDatabase则出现异常")]),e._v(" "),t("p",[e._v("例子（在指定路径下创建数据库文件 .db ）")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('public class MainActivity extends Activity {\n\tpublic static final String PATH_ONE = "KogBill";\n\tpublic static final String PATH_NAME = "KogBill.db";\n\tprivate SQLiteDatabase db;    //声明SQLiteDatabase ，该对象可以操作数据库\n\n\tString path = Environment.getExternalStorageDirectory().getAbsolutePath();\n\tString path1 = path + File.separator + PATH_ONE;   //需要创建的路径\n\tString path2 = path + File.separator + PATH_ONE + \n\t\t\tFile.separator + PATH_NAME;  \t\t\t\t\t\t\t//需要创建的文件\n\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState){\n\t\tsuper.onCreate(savedInstanceState);\n\t\tsetContentView(R.layout.activity_main);\n\t\tFile f = new File(path1);\n\t\tif( !f.exists()){  //创建数据库文件路径\n\t\t\tf.mkdirs();\n\t\t}\t\n\t\t//实例化MySQLiteHelper ，创建指定目录下数据库文件，并创建表\n\t\tMySQLiteHelper mSQL = new MySQLiteHelper(MainActivity.this, path2);\n\t\tdb = mSQL.getWritableDatabase();\n\t}\n\n\tclass MySQLiteHelper extends SQLiteOpenHelper{\n\t\t\tprivate static final int DATABASE_VERSION = 1;//数据库版本号\n\t\t\tprivate static final String CREATE_TABLE = "create table kog_bill ("\n\t\t            + "_id integer primary key autoincrement,"\n\t\t            + "date text, "\n\t\t            + "breakfast text, "\n\t\t            + "lunch text,"\n\t\t            + "dinner text,"\n\t\t            + "happy text,"\n\t\t            + "other text,"\n\t\t            + "spare text)";\n\t\t\t\n\t\t\t//方便创建实例，简化构造方法，方法内调用4参数构造方法\n\t\t\t//参数 name 可以是 数据库名称，也可以数据库文件路径（即可以指定数据库文件路径）\n\t\t\tpublic MySQLiteHelper(Context context, String name) {\n\t\t\t\tthis(context, name, null, DATABASE_VERSION);\n\t\t\t}\n\t\t\t//必须要实现的方法\n\t\t\tpublic MySQLiteHelper(Context context, String name, CursorFactory factory, int version) {\n\t\t\t\tsuper(context, name, factory, version);\n\t\t\t}\n\t\n\t\t\t@Override\n\t\t\tpublic void onCreate(SQLiteDatabase db) {\n\t\t\t\t// 第一次创建数据库时 才会调用\n\t\t\t\tLog.e("mylog", "创建数据库表");\n\t\t\t\tdb.execSQL(CREATE_TABLE);\n\t\t\t}\n\t\n\t\t\t@Override\n\t\t\tpublic void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n\t\t\t}\n\t\t\t\n\t\t}\n}\n')])])]),t("p",[e._v("根据上述代码，便获得db对象，通过db（SQLiteDatabase）可进行数据库的操作，如 db.query() db.delete()")]),e._v(" "),t("p",[e._v("更新表结构或创建新表，需要用到MySQLiteHelper中的update方法。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('class MySQLiteHelper extends SQLiteOpenHelper{\n\t.....\n\t@Override\n\tpublic void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion){\n\t\tdb.execSQL("drop table if exists book");  //如果已经存在就删除，防止重复创建\n\t\tonCreate(db);  // 再次执行onCreate 方法\n\t}\n}\n')])])]),t("p",[e._v("但是onUpgrade方法默认是不执行的，如何让onUpgrade方法执行，需要用到MySQLiteHelper 构造参数中的版本号：")]),e._v(" "),t("p",[e._v("private static final int DATABASE_VERSION = 1;//  将版本号 由 1 改为2")]),e._v(" "),t("p",[e._v("这里将数据库版本号由1改为2，表示对数据库的升级")]),e._v(" "),t("h3",{attrs:{id:"数据库的增删改查"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据库的增删改查"}},[e._v("#")]),e._v(" 数据库的增删改查")]),e._v(" "),t("p",[e._v("添加数据")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('SQLiteDatabase db = dbHelper.getWritableDatabase();\nContentValues values = new ContentValues();\n// 开始组装第一条数据\nvalues.put("name", "The Da Vinci Code");\nvalues.put("author", "Dan Brown");\nvalues.put("pages", 454);\nvalues.put("price", 16.96);\ndb.insert("Book", null, values); // 插入第一条数据\nvalues.clear();\n// 开始组装第二条数据\nvalues.put("name", "The Lost Symbol");\nvalues.put("author", "Dan Brown");\nvalues.put("pages", 510);\nvalues.put("price", 19.95);\ndb.insert("Book", null, values); // 插入第二条数据\n')])])]),t("p",[e._v('更新数据\nSQLiteDatabase db = dbHelper.getWritableDatabase();\nContentValues values = new ContentValues();\nvalues.put("price", 10.99);\ndb.update("Book", values, "name = ?", new String[] { "The DaVinci Code" });')]),e._v(" "),t("p",[e._v('删除数据\ndb.delete("kogBill", "_id=?",new String[]{id});')]),e._v(" "),t("p",[e._v('查询数据——table，columns\ndb.query("kog_bill", new String[]{"_id","date","breakfast","lunch","dinner","happy","other","spare"}\n, null, null, null, null, "date desc");')]),e._v(" "),t("p",[e._v("query参数说明：\nquery()方法参数对应SQL 部分描述\ntable from table_name 指定查询的表名\ncolumns select column1, column2 指定查询的列名\nselection where column = value 指定where 的约束条件\nselectionArgs - 为where 中的占位符提供具体的值\ngroupBy group by column 指定需要group by 的列\nhaving having column = value 对group by 后的结果进一步约束\norderBy order by column1, column2 指定查询结果的排序方式")]),e._v(" "),t("h3",{attrs:{id:"使用sql操作数据库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用sql操作数据库"}},[e._v("#")]),e._v(" 使用SQL操作数据库")]),e._v(" "),t("p",[e._v("虽然Android 已经给我们提供了非常方便的API用于操作数据库，不过总会有些人不习惯去使用这些辅助行的方法，而是更加青睐于直接使用SQL来操作数据库，当然Android也是提供的。\n添加数据")]),e._v(" "),t("p",[e._v('db.execSQL("insert into kogBill ("date","breakfest","lunch","dinner","happy","other","spare") values (?,?,?,?,?,?,?)", new String[]{"1921-1-1"，“123”，“1”，“1”，“11”，“2”，“3”}）；')]),e._v(" "),t("p",[e._v("更新数据")]),e._v(" "),t("p",[e._v('db.execSQL("update kogBill set other = ? where _id = ? ", new String[]{"12",id});')]),e._v(" "),t("p",[e._v('删除数据\ndb.execSQL("delete from kogBill where _id = ？”, new String[]{id});')]),e._v(" "),t("h3",{attrs:{id:"使用事务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用事务"}},[e._v("#")]),e._v(" 使用事务")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('SQLiteDatabase db = dbHelper.getWritableDatabase();\ndb.beginTransaction(); // 开启事务\ntry {\ndb.delete("Book", null, null);\nif (true) {\n// 在这里手动抛出一个异常，让事务失败\nthrow new NullPointerException();\n}\nContentValues values = new ContentValues();\nvalues.put("name", "Game of Thrones");\nvalues.put("author", "George Martin");\nvalues.put("pages", 720);\nvalues.put("price", 20.85);\ndb.insert("Book", null, values);\ndb.setTransactionSuccessful(); // 事务已经执行成功\n} catch (Exception e) {\ne.printStackTrace();\n} finally {\ndb.endTransaction(); // 结束事务\n}\n')])])])])}),[],!1,null,null,null);t.default=r.exports}}]);