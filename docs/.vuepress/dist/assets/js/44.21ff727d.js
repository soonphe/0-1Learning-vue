(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{241:function(e,t,r){e.exports=r.p+"assets/img/luoxiaosheng.3e3f64f6.svg"},242:function(e,t,r){e.exports=r.p+"assets/img/luoxiaosheng_learning.c39ce245.svg"},243:function(e,t,r){e.exports=r.p+"assets/img/luoxiaosheng_wechat.8efd3324.svg"},343:function(e,t,r){"use strict";r.r(t);var a=r(14),n=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"_0-1learning"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_0-1learning"}},[e._v("#")]),e._v(" 0-1Learning")]),e._v(" "),t("p",[t("img",{attrs:{src:r(241),alt:"alt text",title:"公众号"}}),e._v(" "),t("img",{attrs:{src:r(242),alt:"alt text",title:"学习"}}),e._v(" "),t("img",{attrs:{src:r(243),alt:"alt text",title:"微信"}})]),e._v(" "),t("h2",{attrs:{id:"路由router"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#路由router"}},[e._v("#")]),e._v(" 路由Router")]),e._v(" "),t("h3",{attrs:{id:"简单的路由"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#简单的路由"}},[e._v("#")]),e._v(" 简单的路由")]),e._v(" "),t("p",[e._v("用 "),t("code",[e._v("Vue.js + Vue Router")]),e._v(" 创建单页应用，感觉很自然：使用 "),t("code",[e._v("Vue.js")]),e._v(" ，我们已经可以通过组合组件来组成应用程序，当你要把 Vue Router 添加进来，我们需要做的是，将组件 (components) 映射到路由 (routes)，然后告诉 Vue Router 在哪里渲染它们。\n下面是个基本例子：")]),e._v(" "),t("p",[e._v("Vue")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<script src="https://unpkg.com/vue/dist/vue.js"><\/script>\n<script src="https://unpkg.com/vue-router/dist/vue-router.js"><\/script>\n\n<div id="app">\n  <h1>Hello App!</h1>\n  <p>\n    \x3c!-- 使用 router-link 组件来导航. --\x3e\n    \x3c!-- 通过传入 `to` 属性指定链接. --\x3e\n    \x3c!-- <router-link> 默认会被渲染成一个 `<a>` 标签 --\x3e\n    <router-link to="/foo">Go to Foo</router-link>\n    <router-link to="/bar">Go to Bar</router-link>\n  </p>\n  \x3c!-- 路由出口 --\x3e\n  \x3c!-- 路由匹配到的组件将渲染在这里 --\x3e\n  <router-view></router-view>\n</div>\n')])])]),t("p",[e._v("JavaScript")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 0. 如果使用模块化机制编程，导入Vue和VueRouter，要调用 Vue.use(VueRouter)\n\n// 1. 定义 (路由) 组件。\n// 可以从其他文件 import 进来\nconst Foo = { template: '<div>foo</div>' }\nconst Bar = { template: '<div>bar</div>' }\n\n// 2. 定义路由\n// 每个路由应该映射一个组件。 其中\"component\" 可以是\n// 通过 Vue.extend() 创建的组件构造器，\n// 或者，只是一个组件配置对象。\n// 我们晚点再讨论嵌套路由。\nconst routes = [\n  { path: '/foo', component: Foo },\n  { path: '/bar', component: Bar }\n]\n\n// 3. 创建 router 实例，然后传 `routes` 配置\n// 你还可以传别的配置参数, 不过先这么简单着吧。\nconst router = new VueRouter({\n  routes // (缩写) 相当于 routes: routes\n})\n\n// 4. 创建和挂载根实例。\n// 记得要通过 router 配置参数注入路由，\n// 从而让整个应用都有路由功能\nconst app = new Vue({\n  router\n}).$mount('#app')\n\n// 现在，应用已经启动了！\n")])])]),t("p",[e._v("通过注入路由器，我们可以在任何组件内通过 "),t("code",[e._v("this.$router")]),e._v(" 访问路由器，也可以通过 "),t("code",[e._v("this.$route")]),e._v(" 访问当前路由：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// Home.vue\nexport default {\n  computed: {\n    username() {\n      // 我们很快就会看到 `params` 是什么\n      return this.$route.params.username\n    }\n  },\n  methods: {\n    goBack() {\n      window.history.length > 1 ? this.$router.go(-1) : this.$router.push('/')\n    }\n  }\n}\n")])])]),t("p",[e._v("留意一下 "),t("code",[e._v("this.$router")]),e._v(" 和 router 使用起来完全一样。我们使用 "),t("code",[e._v("this.$router")]),e._v(" 的原因是我们并不想在每个独立需要封装路由的组件中都导入路由。")]),e._v(" "),t("h3",{attrs:{id:"动态路由匹配"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#动态路由匹配"}},[e._v("#")]),e._v(" 动态路由匹配")]),e._v(" "),t("p",[e._v("我们经常需要把某种模式匹配到的所有路由，全都映射到同个组件。\n例如，我们有一个 User 组件，对于所有 ID 各不相同的用户，都要使用这个组件来渲染。那么，我们可以在 "),t("code",[e._v("vue-router")]),e._v(" 的路由路径中使用“动态路径参数”(dynamic segment) 来达到这个效果：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const User = {\n  template: '<div>User</div>'\n}\n\nconst router = new VueRouter({\n  routes: [\n    // 动态路径参数 以冒号开头\n    { path: '/user/:id', component: User }\n  ]\n})\n")])])]),t("p",[e._v("现在呢，像 "),t("code",[e._v("/user/foo")]),e._v(" 和 "),t("code",[e._v("/user/bar")]),e._v(" 都将映射到相同的路由。")]),e._v(" "),t("p",[e._v("一个“路径参数”使用冒号 : 标记。当匹配到一个路由时，参数值会被设置到 "),t("code",[e._v("this.$route.params")]),e._v("，可以在每个组件内使用。\n于是，我们可以更新 User 的模板，输出当前用户的 ID：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const User = {\n  template: '<div>User {{ $route.params.id }}</div>'\n}\n")])])]),t("p",[e._v("响应路由参数的变化\n当使用路由参数时，例如从 "),t("code",[e._v("/user/foo")]),e._v(" 导航到 "),t("code",[e._v("/user/bar")]),e._v("，原来的组件实例会被复用。因为两个路由都渲染同个组件，比起销毁再创建，复用则显得更加高效。\n不过，这也意味着组件的生命周期钩子不会再被调用。")]),e._v(" "),t("p",[e._v("复用组件时，想对路由参数的变化作出响应的话，你可以简单地 watch (监测变化) "),t("code",[e._v("$route")]),e._v(" 对象：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const User = {\n  template: '...',\n  watch: {\n    $route(to, from) {\n      // 对路由变化作出响应...\n    }\n  }\n}\n")])])]),t("p",[e._v("或者使用 2.2 中引入的 beforeRouteUpdate 导航守卫：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const User = {\n  template: '...',\n  beforeRouteUpdate(to, from, next) {\n    // react to route changes...\n    // don't forget to call next()\n  }\n}\n")])])]),t("p",[e._v("捕获所有路由或 404 Not found 路由\n常规参数只会匹配被 / 分隔的 URL 片段中的字符。如果想匹配任意路径，我们可以使用通配符 (*)：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("{\n  // 会匹配所有路径\n  path: '*'\n}\n{\n  // 会匹配以 `/user-` 开头的任意路径\n  path: '/user-*'\n}\n")])])]),t("p",[e._v("当使用通配符路由时，请确保路由的顺序是正确的，也就是说含有通配符的路由应该放在最后。路由 "),t("code",[e._v("{ path: '*' }")]),e._v(" 通常用于客户端 404 错误。如果你使用了History 模式，请确保正确配置你的服务器。")]),e._v(" "),t("p",[e._v("当使用一个通配符时，"),t("code",[e._v("$route.params")]),e._v(" 内会自动添加一个名为 pathMatch 参数。它包含了 URL 通过通配符被匹配的部分：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 给出一个路由 { path: '/user-*' }\nthis.$router.push('/user-admin')\nthis.$route.params.pathMatch // 'admin'\n// 给出一个路由 { path: '*' }\nthis.$router.push('/non-existing')\nthis.$route.params.pathMatch // '/non-existing'\n")])])]),t("p",[t("strong",[e._v("高级匹配模式")]),e._v(" "),t("code",[e._v("vue-router")]),e._v(" 使用 "),t("code",[e._v("path-to-regexp")]),e._v(" (opens new window)作为路径匹配引擎，所以支持很多高级的匹配模式，例如：可选的动态路径参数、匹配零个或多个、一个或多个，甚至是自定义正则匹配。")]),e._v(" "),t("p",[t("strong",[e._v("匹配优先级")]),e._v("\n有时候，同一个路径可以匹配多个路由，此时，匹配的优先级就按照路由的定义顺序：路由定义得越早，优先级就越高。")]),e._v(" "),t("h3",{attrs:{id:"嵌套路由"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#嵌套路由"}},[e._v("#")]),e._v(" 嵌套路由")]),e._v(" "),t("p",[e._v("要在嵌套的出口中渲染组件，需要在 VueRouter 的参数中使用 children 配置：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const router = new VueRouter({\n  routes: [\n    {\n      path: '/user/:id',\n      component: User,\n      children: [\n        {\n          // 当 /user/:id/profile 匹配成功，\n          // UserProfile 会被渲染在 User 的 <router-view> 中\n          path: 'profile',\n          component: UserProfile\n        },\n        {\n          // 当 /user/:id/posts 匹配成功\n          // UserPosts 会被渲染在 User 的 <router-view> 中\n          path: 'posts',\n          component: UserPosts\n        }\n      ]\n    }\n  ]\n})\n")])])]),t("p",[e._v("要注意，以 / 开头的嵌套路径会被当作根路径。 这让你充分的使用嵌套组件而无须设置嵌套的路径。")]),e._v(" "),t("p",[e._v("你会发现，children 配置就是像 "),t("code",[e._v("routes")]),e._v(" 配置一样的路由配置数组，所以呢，你可以嵌套多层路由。")]),e._v(" "),t("p",[e._v("此时，基于上面的配置，当你访问 "),t("code",[e._v("/user/foo")]),e._v(" 时，User 的出口是不会渲染任何东西，这是因为没有匹配到合适的子路由。如果你想要渲染点什么，可以提供一个 空的 子路由：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const router = new VueRouter({\n  routes: [\n    {\n      path: '/user/:id',\n      component: User,\n      children: [\n        // 当 /user/:id 匹配成功，\n        // UserHome 会被渲染在 User 的 <router-view> 中\n        { path: '', component: UserHome }\n\n        // ...其他子路由\n      ]\n    }\n  ]\n})\n")])])]),t("h3",{attrs:{id:"编程式的导航"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#编程式的导航"}},[e._v("#")]),e._v(" 编程式的导航")]),e._v(" "),t("p",[e._v("除了使用 "),t("code",[e._v("<router-link>")]),e._v(" 创建 a 标签来定义导航链接，我们还可以借助 router 的实例方法，通过编写代码来实现。")]),e._v(" "),t("blockquote",[t("p",[e._v("router.push(location, onComplete?, onAbort?)")])]),e._v(" "),t("p",[e._v("注意：在 Vue 实例内部，你可以通过 "),t("code",[e._v("$router")]),e._v(" 访问路由实例。因此你可以调用 "),t("code",[e._v("this.$router.push")]),e._v("\n想要导航到不同的 URL，则使用 "),t("code",[e._v("router.push")]),e._v(" 方法。这个方法会向 history 栈添加一个新的记录，所以，当用户点击浏览器后退按钮时，则回到之前的 URL。\n当你点击 "),t("code",[e._v("<router-link>")]),e._v(" 时，这个方法会在内部调用，所以说，点击 "),t("code",[e._v('<router-link :to="...">')]),e._v(" 等同于调用 "),t("code",[e._v("router.push(...)")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('声明式：<router-link :to="..."> \n编程式：router.push(...)\n')])])]),t("p",[e._v("该方法的参数可以是一个字符串路径，或者一个描述地址的对象。例如：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 字符串\nrouter.push('home')\n\n// 对象\nrouter.push({ path: 'home' })\n\n// 命名的路由\nrouter.push({ name: 'user', params: { userId: '123' }})\n\n// 带查询参数，变成 /register?plan=private\nrouter.push({ path: 'register', query: { plan: 'private' }})\n")])])]),t("p",[e._v("注意：如果提供了 path，params 会被忽略，上述例子中的 query 并不属于这种情况。取而代之的是下面例子的做法，你需要提供路由的 name 或手写完整的带有参数的 path：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const userId = '123'\nrouter.push({ name: 'user', params: { userId }}) // -> /user/123\nrouter.push({ path: `/user/${userId}` }) // -> /user/123\n// 这里的 params 不生效\nrouter.push({ path: '/user', params: { userId }}) // -> /user\n")])])]),t("blockquote",[t("p",[e._v("router.replace(location, onComplete?, onAbort?)")])]),e._v(" "),t("p",[e._v("跟 "),t("code",[e._v("router.push")]),e._v(" 很像，唯一的不同就是，它不会向 history 添加新记录，而是跟它的方法名一样 —— 替换掉当前的 history 记录。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('声明式：<router-link :to="..." replace>\n编程式：router.replace(...)\n')])])]),t("blockquote",[t("p",[e._v("router.go(n)")])]),e._v(" "),t("p",[e._v("这个方法的参数是一个整数，意思是在 history 记录中向前或者后退多少步，类似 "),t("code",[e._v("window.history.go(n)")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 在浏览器记录中前进一步，等同于 history.forward()\nrouter.go(1)\n\n// 后退一步记录，等同于 history.back()\nrouter.go(-1)\n\n// 前进 3 步记录\nrouter.go(3)\n\n// 如果 history 记录不够用，那就默默地失败呗\nrouter.go(-100)\nrouter.go(100)\n")])])]),t("p",[e._v("操作 History\n你也许注意到 "),t("code",[e._v("router.push、 router.replace 和 router.go 跟 window.history.pushState、 window.history.replaceState 和 window.history.go (opens new window)好像， 实际上它们确实是效仿 window.history API 的。")])]),e._v(" "),t("h3",{attrs:{id:"命名路由"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#命名路由"}},[e._v("#")]),e._v(" 命名路由")]),e._v(" "),t("p",[e._v("有时候，通过一个名称来标识一个路由显得更方便一些，特别是在链接一个路由，或者是执行一些跳转的时候。你可以在创建 Router 实例的时候，在 routes 配置中给某个路由设置名称。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const router = new VueRouter({\n  routes: [\n    {\n      path: '/user/:userId',\n      name: 'user',\n      component: User\n    }\n  ]\n})\n")])])]),t("p",[e._v("要链接到一个命名路由，可以给 "),t("code",[e._v("router-link")]),e._v(" 的 to 属性传一个对象：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<router-link :to=\"{ name: 'user', params: { userId: 123 }}\">User</router-link>\n")])])]),t("p",[e._v("这跟代码调用 "),t("code",[e._v("router.push()")]),e._v(" 是一回事：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("router.push({ name: 'user', params: { userId: 123 } })\n")])])]),t("h3",{attrs:{id:"命名视图"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#命名视图"}},[e._v("#")]),e._v(" 命名视图")]),e._v(" "),t("p",[e._v("有时候想同时 (同级) 展示多个视图，而不是嵌套展示，例如创建一个布局，有 sidebar (侧导航) 和 main (主内容) 两个视图，这个时候命名视图就派上用场了。你可以在界面中拥有多个单独命名的视图，而不是只有一个单独的出口。如果 "),t("code",[e._v("router-view")]),e._v(" 没有设置名字，那么默认为 default。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<router-view class="view one"></router-view>\n<router-view class="view two" name="a"></router-view>\n<router-view class="view three" name="b"></router-view>\n')])])]),t("p",[e._v("一个视图使用一个组件渲染，因此对于同个路由，多个视图就需要多个组件。确保正确使用 components 配置 (带上 s)：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const router = new VueRouter({\n  routes: [\n    {\n      path: '/',\n      components: {\n        default: Foo,\n        a: Bar,\n        b: Baz\n      }\n    }\n  ]\n})\n")])])]),t("p",[e._v("嵌套命名视图\n我们也有可能使用命名视图创建嵌套视图的复杂布局。这时你也需要命名用到的嵌套 "),t("code",[e._v("router-view")]),e._v(" 组件。我们以一个设置面板为例：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/settings/emails                                       /settings/profile\n+-----------------------------------+                  +------------------------------+\n| UserSettings                      |                  | UserSettings                 |\n| +-----+-------------------------+ |                  | +-----+--------------------+ |\n| | Nav | UserEmailsSubscriptions | |  +------------\x3e  | | Nav | UserProfile        | |\n| |     +-------------------------+ |                  | |     +--------------------+ |\n| |     |                         | |                  | |     | UserProfilePreview | |\n| +-----+-------------------------+ |                  | +-----+--------------------+ |\n+-----------------------------------+                  +------------------------------+\n")])])]),t("ul",[t("li",[e._v("Nav 只是一个常规组件。")]),e._v(" "),t("li",[e._v("UserSettings 是一个视图组件。")]),e._v(" "),t("li",[e._v("UserEmailsSubscriptions、UserProfile、UserProfilePreview 是嵌套的视图组件。")])]),e._v(" "),t("p",[e._v("UserSettings 组件的 "),t("code",[e._v("<template>")]),e._v(" 部分应该是类似下面的这段代码：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('\x3c!-- UserSettings.vue --\x3e\n<div>\n  <h1>User Settings</h1>\n  <NavBar/>\n  <router-view/>\n  <router-view name="helper"/>\n</div>\n')])])]),t("p",[e._v("然后你可以用这个路由配置完成该布局：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("{\n  path: '/settings',\n  // 你也可以在顶级路由就配置命名视图\n  component: UserSettings,\n  children: [{\n    path: 'emails',\n    component: UserEmailsSubscriptions\n  }, {\n    path: 'profile',\n    components: {\n      default: UserProfile,\n      helper: UserProfilePreview\n    }\n  }]\n}\n")])])]),t("h3",{attrs:{id:"重定向和别名"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重定向和别名"}},[e._v("#")]),e._v(" 重定向和别名")]),e._v(" "),t("p",[e._v("重定向也是通过 "),t("code",[e._v("routes")]),e._v(" 配置来完成，下面例子是从 /a 重定向到 /b：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const router = new VueRouter({\n  routes: [\n    { path: '/a', redirect: '/b' }\n  ]\n})\n")])])]),t("p",[e._v("重定向的目标也可以是一个命名的路由：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const router = new VueRouter({\n  routes: [\n    { path: '/a', redirect: { name: 'foo' }}\n  ]\n})\n")])])]),t("p",[e._v("甚至是一个方法，动态返回重定向目标：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const router = new VueRouter({\n  routes: [\n    { path: '/a', redirect: to => {\n      // 方法接收 目标路由 作为参数\n      // return 重定向的 字符串路径/路径对象\n    }}\n  ]\n})\n")])])]),t("p",[e._v("别名\n“重定向”的意思是，当用户访问 /a时，URL 将会被替换成 /b，然后匹配路由为 /b，那么“别名”又是什么呢？\n/a 的别名是 /b，意味着，当用户访问 /b 时，URL 会保持为 /b，但是路由匹配则为 /a，就像用户访问 /a 一样。\n上面对应的路由配置为：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const router = new VueRouter({\n  routes: [\n    { path: '/a', component: A, alias: '/b' }\n  ]\n})\n")])])]),t("h3",{attrs:{id:"路由组件传参"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#路由组件传参"}},[e._v("#")]),e._v(" 路由组件传参")]),e._v(" "),t("p",[e._v("在组件中使用 "),t("code",[e._v("$route")]),e._v(" 会使之与其对应路由形成高度耦合，从而使组件只能在某些特定的 URL 上使用，限制了其灵活性。\n使用 props 将组件和路由解耦：\n取代与 "),t("code",[e._v("$route")]),e._v(" 的耦合")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const User = {\n  template: '<div>User {{ $route.params.id }}</div>'\n}\nconst router = new VueRouter({\n  routes: [{ path: '/user/:id', component: User }]\n})\n")])])]),t("p",[e._v("通过 props 解耦")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const User = {\n  props: ['id'],\n  template: '<div>User {{ id }}</div>'\n}\nconst router = new VueRouter({\n  routes: [\n    { path: '/user/:id', component: User, props: true },\n\n    // 对于包含命名视图的路由，你必须分别为每个命名视图添加 `props` 选项：\n    {\n      path: '/user/:id',\n      components: { default: User, sidebar: Sidebar },\n      props: { default: true, sidebar: false }\n    }\n  ]\n})\n")])])]),t("p",[e._v("布尔模式\n如果 "),t("code",[e._v("props")]),e._v(" 被设置为 true，"),t("code",[e._v("route.params")]),e._v(" 将会被设置为组件属性。")]),e._v(" "),t("p",[e._v("对象模式\n如果 "),t("code",[e._v("props")]),e._v(" 是一个对象，它会被按原样设置为组件属性。当 "),t("code",[e._v("props")]),e._v(" 是静态的时候有用。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const router = new VueRouter({\n  routes: [\n    {\n      path: '/promotion/from-newsletter',\n      component: Promotion,\n      props: { newsletterPopup: false }\n    }\n  ]\n})\n")])])]),t("p",[e._v("函数模式\n你可以创建一个函数返回 "),t("code",[e._v("props")]),e._v("。这样你便可以将参数转换成另一种类型，将静态值与基于路由的值结合等等。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const router = new VueRouter({\n  routes: [\n    {\n      path: '/search',\n      component: SearchUser,\n      props: route => ({ query: route.query.q })\n    }\n  ]\n})\n")])])]),t("p",[t("code",[e._v("URL /search?q=vue 会将 {query: 'vue'} 作为属性传递给 SearchUser 组件")])]),e._v(" "),t("p",[e._v("请尽可能保持 "),t("code",[e._v("props")]),e._v(" 函数为无状态的，因为它只会在路由发生变化时起作用。如果你需要状态来定义 "),t("code",[e._v("props")]),e._v("，请使用包装组件，这样 Vue 才可以对状态变化做出反应。")]),e._v(" "),t("h3",{attrs:{id:"html5-history-模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#html5-history-模式"}},[e._v("#")]),e._v(" HTML5 History 模式")]),e._v(" "),t("p",[e._v("vue-router 默认 hash 模式 —— 使用 URL 的 hash 来模拟一个完整的 URL，于是当 URL 改变时，页面不会重新加载。")]),e._v(" "),t("p",[e._v("如果不想要很丑的 hash，我们可以用路由的 history 模式，这种模式充分利用 history.pushState API 来完成 URL 跳转而无须重新加载页面。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const router = new VueRouter({\n  mode: 'history',\n  routes: [...]\n})\n")])])]),t("p",[e._v("当你使用 history 模式时，URL 就像正常的 url，例如 http://yoursite.com/user/id， 也好看！")]),e._v(" "),t("p",[e._v("不过这种模式要玩好，还需要后台配置支持。因为我们的应用是个单页客户端应用，如果后台没有正确的配置，当用户在浏览器直接访问 http://oursite.com/user/id 就会返回 404，这就不好看了。")]),e._v(" "),t("p",[e._v("所以呢，你要在服务端增加一个覆盖所有情况的候选资源：如果 URL 匹配不到任何静态资源，则应该返回同一个 "),t("code",[e._v("index.html")]),e._v(" 页面，这个页面就是你 app 依赖的页面。")]),e._v(" "),t("p",[e._v("后端配置例子\n注意：下列示例假设你在根目录服务这个应用。如果想部署到一个子目录，你需要使用 Vue CLI 的 publicPath 选项 (opens new window)和相关的 router base property (opens new window)。你还需要把下列示例中的根目录调整成为子目录 (例如用 RewriteBase /name-of-your-subfolder/ 替换掉 RewriteBase /)。\nnginx")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("location / {\n  try_files $uri $uri/ /index.html;\n}\n")])])]),t("p",[e._v("警告\n给个警告，因为这么做以后，你的服务器就不再返回 404 错误页面，因为对于所有路径都会返回 "),t("code",[e._v("index.html")]),e._v(" 文件。为了避免这种情况，你应该在 Vue 应用里面覆盖所有的路由情况，然后再给出一个 404 页面。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const router = new VueRouter({\n  mode: 'history',\n  routes: [\n    { path: '*', component: NotFoundComponent }\n  ]\n})\n")])])]),t("h3",{attrs:{id:"导航守卫"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#导航守卫"}},[e._v("#")]),e._v(" 导航守卫")]),e._v(" "),t("p",[e._v("正如其名，"),t("code",[e._v("vue-router")]),e._v(" 提供的导航守卫主要用来通过跳转或取消的方式守卫导航。有多种机会植入路由导航过程中：全局的, 单个路由独享的, 或者组件级的。")]),e._v(" "),t("p",[e._v("记住参数或查询的改变并不会触发进入/离开的导航守卫。你可以通过观察 "),t("code",[e._v("$route")]),e._v(" 对象来应对这些变化，或使用 beforeRouteUpdate 的组件内守卫。")]),e._v(" "),t("p",[e._v("全局前置守卫\n你可以使用 "),t("code",[e._v("router.beforeEach")]),e._v(" 注册一个全局前置守卫：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const router = new VueRouter({ ... })\n\nrouter.beforeEach((to, from, next) => {\n  // ...\n})\n")])])]),t("p",[e._v("每个守卫方法接收三个参数：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("- to: Route: 即将要进入的目标 路由对象\n- from: Route: 当前导航正要离开的路由\n- next: Function: 一定要调用该方法来 resolve 这个钩子\n  - next(): 进行管道中的下一个钩子。如果全部钩子执行完了，则导航的状态就是 confirmed (确认的)。\n  - next(false): 中断当前的导航。如果浏览器的 URL 改变了 (可能是用户手动或者浏览器后退按钮)，那么 URL 地址会重置到 from 路由对应的地址。\n  - next('/') 或者 next({ path: '/' }): 跳转到一个不同的地址。当前的导航被中断，然后进行一个新的导航。你可以向 next 传递任意位置对象，且允许设置诸如 replace: true、name: 'home' 之类的选项以及任何用在 router-link 的 to prop 或 router.push 中的选项。\n  - next(error): (2.4.0+) 如果传入 next 的参数是一个 Error 实例，则导航会被终止且该错误会被传递给 router.onError() 注册过的回调。\n")])])]),t("p",[e._v("确保 next 函数在任何给定的导航守卫中都被严格调用一次。它可以出现多于一次，但是只能在所有的逻辑路径都不重叠的情况下，否则钩子永远都不会被解析或报错")]),e._v(" "),t("p",[e._v("全局解析守卫\n在 2.5.0+ 你可以用 "),t("code",[e._v("router.beforeResolve")]),e._v(" 注册一个全局守卫。这和 "),t("code",[e._v("router.beforeEach")]),e._v(" 类似，区别是在导航被确认之前，同时在所有组件内守卫和异步路由组件被解析之后，解析守卫就被调用。")]),e._v(" "),t("p",[e._v("全局后置钩子\n你也可以注册全局后置钩子，然而和守卫不同的是，这些钩子不会接受 next 函数也不会改变导航本身：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("router.afterEach((to, from) => {\n  // ...\n})\n")])])]),t("p",[e._v("路由独享的守卫\n你可以在路由配置上直接定义 beforeEnter 守卫：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const router = new VueRouter({\n  routes: [\n    {\n      path: '/foo',\n      component: Foo,\n      beforeEnter: (to, from, next) => {\n        // ...\n      }\n    }\n  ]\n})\n")])])]),t("p",[e._v("组件内的守卫\n最后，你可以在路由组件内直接定义以下路由导航守卫：")]),e._v(" "),t("ul",[t("li",[e._v("beforeRouteEnter")]),e._v(" "),t("li",[e._v("beforeRouteUpdate (2.2 新增)")]),e._v(" "),t("li",[e._v("beforeRouteLeave")])]),e._v(" "),t("h3",{attrs:{id:"路由元信息"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#路由元信息"}},[e._v("#")]),e._v(" 路由元信息")]),e._v(" "),t("p",[e._v("定义路由的时候可以配置 meta 字段：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const router = new VueRouter({\n  routes: [\n    {\n      path: '/foo',\n      component: Foo,\n      children: [\n        {\n          path: 'bar',\n          component: Bar,\n          // a meta field\n          meta: { requiresAuth: true }\n        }\n      ]\n    }\n  ]\n})\n")])])]),t("p",[e._v("首先，我们称呼 "),t("code",[e._v("routes")]),e._v(" 配置中的每个路由对象为 路由记录。路由记录可以是嵌套的，因此，当一个路由匹配成功后，他可能匹配多个路由记录\n例如，根据上面的路由配置，/foo/bar 这个 URL 将会匹配父路由记录以及子路由记录。\n一个路由匹配到的所有路由记录会暴露为 "),t("code",[e._v("$route")]),e._v(" 对象 (还有在导航守卫中的路由对象) 的 "),t("code",[e._v("$route.matched")]),e._v(" 数组。因此，我们需要遍历 "),t("code",[e._v("$route.matched")]),e._v(" 来检查路由记录中的 meta 字段。")]),e._v(" "),t("p",[e._v("下面例子展示在全局导航守卫中检查元字段：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("router.beforeEach((to, from, next) => {\n  if (to.matched.some(record => record.meta.requiresAuth)) {\n    // this route requires auth, check if logged in\n    // if not, redirect to login page.\n    if (!auth.loggedIn()) {\n      next({\n        path: '/login',\n        query: { redirect: to.fullPath }\n      })\n    } else {\n      next()\n    }\n  } else {\n    next() // 确保一定要调用 next()\n  }\n})\n")])])]),t("h3",{attrs:{id:"过渡动效"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#过渡动效"}},[e._v("#")]),e._v(" 过渡动效")]),e._v(" "),t("p",[t("code",[e._v("transitions")]),e._v(" 是 "),t("code",[e._v("router-view")]),e._v(" 是基本的动态组件，所以我们可以用 "),t("code",[e._v("transition")]),e._v(" 组件给它添加一些过渡效果：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<transition>\n  <router-view></router-view>\n</transition>\n")])])]),t("p",[e._v("Transition 的所有功能 (opens new window)在这里同样适用。")]),e._v(" "),t("p",[e._v("单个路由的过渡\n上面的用法会给所有路由设置一样的过渡效果，如果你想让每个路由组件有各自的过渡效果，可以在各路由组件内使用 transition 并设置不同的 name。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('const Foo = {\n  template: `\n    <transition name="slide">\n      <div class="foo">...</div>\n    </transition>\n  `\n}\n\nconst Bar = {\n  template: `\n    <transition name="fade">\n      <div class="bar">...</div>\n    </transition>\n  `\n}\n')])])]),t("p",[e._v("基于路由的动态过渡\n还可以基于当前路由与目标路由的变化关系，动态设置过渡效果：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('\x3c!-- 使用动态的 transition name --\x3e\n<transition :name="transitionName">\n  <router-view></router-view>\n</transition>\n// 接着在父组件内\n')])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// watch $route 决定使用哪种过渡\nwatch: {\n  '$route' (to, from) {\n    const toDepth = to.path.split('/').length\n    const fromDepth = from.path.split('/').length\n    this.transitionName = toDepth < fromDepth ? 'slide-right' : 'slide-left'\n  }\n}\n")])])]),t("h3",{attrs:{id:"数据获取"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据获取"}},[e._v("#")]),e._v(" 数据获取")]),e._v(" "),t("p",[e._v("有时候，进入某个路由后，需要从服务器获取数据。例如，在渲染用户信息时，你需要从服务器获取用户的数据。我们可以通过两种方式来实现：")]),e._v(" "),t("ul",[t("li",[e._v("导航完成之后获取：先完成导航，然后在接下来的组件生命周期钩子中获取数据。在数据获取期间显示“加载中”之类的指示。")]),e._v(" "),t("li",[e._v("导航完成之前获取：导航完成前，在路由进入的守卫中获取数据，在数据获取成功后执行导航。\n从技术角度讲，两种方式都不错 —— 就看你想要的用户体验是哪种。")])]),e._v(" "),t("p",[e._v("导航完成后获取数据\n你使用这种方式时，我们会马上导航和渲染组件，然后在组件的 created 钩子中获取数据。这让我们有机会在数据获取期间展示一个 loading 状态，还可以在不同视图间展示不同的 loading 状态。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("export default {\n  data () {\n    return {\n      loading: false,\n      post: null,\n      error: null\n    }\n  },\n  created () {\n    // 组件创建完后获取数据，\n    // 此时 data 已经被 observed 了\n    this.fetchData()\n  },\n  watch: {\n    // 如果路由有变化，会再次执行该方法\n    '$route': 'fetchData'\n  },\n  methods: {\n    fetchData () {\n      this.error = this.post = null\n      this.loading = true\n      // replace getPost with your data fetching util / API wrapper\n      getPost(this.$route.params.id, (err, post) => {\n        this.loading = false\n        if (err) {\n          this.error = err.toString()\n        } else {\n          this.post = post\n        }\n      })\n    }\n  }\n}\n")])])]),t("p",[e._v("在导航完成前获取数据\n通过这种方式，我们在导航转入新的路由前获取数据。我们可以在接下来的组件的 "),t("code",[e._v("beforeRouteEnter")]),e._v(" 守卫中获取数据，当数据获取成功后只调用 next 方法。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("export default {\n  data () {\n    return {\n      post: null,\n      error: null\n    }\n  },\n  beforeRouteEnter (to, from, next) {\n    getPost(to.params.id, (err, post) => {\n      next(vm => vm.setData(err, post))\n    })\n  },\n  // 路由改变前，组件就已经渲染完了\n  // 逻辑稍稍不同\n  beforeRouteUpdate (to, from, next) {\n    this.post = null\n    getPost(to.params.id, (err, post) => {\n      this.setData(err, post)\n      next()\n    })\n  },\n  methods: {\n    setData (err, post) {\n      if (err) {\n        this.error = err.toString()\n      } else {\n        this.post = post\n      }\n    }\n  }\n}\n")])])]),t("h3",{attrs:{id:"滚动行为"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#滚动行为"}},[e._v("#")]),e._v(" 滚动行为")]),e._v(" "),t("p",[e._v("使用前端路由，当切换到新路由时，想要页面滚到顶部，或者是保持原先的滚动位置，就像重新加载页面那样。 "),t("code",[e._v("vue-router")]),e._v(" 能做到，而且更好，它让你可以自定义路由切换时页面如何滚动。")]),e._v(" "),t("p",[e._v("注意: 这个功能只在支持 "),t("code",[e._v("history.pushState")]),e._v(" 的浏览器中可用。")]),e._v(" "),t("p",[e._v("当创建一个 Router 实例，你可以提供一个 scrollBehavior 方法：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const router = new VueRouter({\n  routes: [...],\n  scrollBehavior (to, from, savedPosition) {\n    // return 期望滚动到哪个的位置\n  }\n})\n")])])]),t("p",[e._v("scrollBehavior 方法接收 to 和 from 路由对象。第三个参数 savedPosition 当且仅当 popstate 导航 (通过浏览器的 前进/后退 按钮触发) 时才可用。")]),e._v(" "),t("p",[e._v("这个方法返回滚动位置的对象信息，长这样：")]),e._v(" "),t("ul",[t("li",[e._v("{ x: number, y: number }")]),e._v(" "),t("li",[e._v("{ selector: string, offset? : { x: number, y: number }} (offset 只在 2.6.0+ 支持)\n如果返回一个 falsy (译者注：falsy 不是 false，参考这里 (opens new window))的值，或者是一个空对象，那么不会发生滚动。")])]),e._v(" "),t("p",[e._v("平滑滚动")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("scrollBehavior (to, from, savedPosition) {\n  if (to.hash) {\n    return {\n      selector: to.hash,\n      behavior: 'smooth',\n    }\n  }\n}\n")])])]),t("h3",{attrs:{id:"路由懒加载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#路由懒加载"}},[e._v("#")]),e._v(" 路由懒加载")]),e._v(" "),t("p",[e._v("结合 Vue 的异步组件 (opens new window)和 Webpack 的代码分割功能 (opens new window)，轻松实现路由组件的懒加载。")]),e._v(" "),t("p",[e._v("首先，可以将异步组件定义为返回一个 Promise 的工厂函数 (该函数返回的 Promise 应该 resolve 组件本身)：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const Foo = () =>\n  Promise.resolve({\n    /* 组件定义对象 */\n  })\n")])])]),t("p",[e._v("第二，在 Webpack 2 中，我们可以使用动态 import (opens new window)语法来定义代码分块点 (split point)：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("import('./Foo.vue') // 返回 Promise\n")])])]),t("p",[e._v("结合这两者，这就是如何定义一个能够被 Webpack 自动代码分割的异步组件。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const Foo = () => import('./Foo.vue')\n")])])]),t("p",[e._v("在路由配置中什么都不需要改变，只需要像往常一样使用 Foo：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const router = new VueRouter({\n  routes: [{ path: '/foo', component: Foo }]\n})\n")])])]),t("p",[e._v("把组件按组分块\n有时候我们想把某个路由下的所有组件都打包在同个异步块 (chunk) 中。只需要使用 命名 chunk (opens new window)，一个特殊的注释语法来提供 chunk name (需要 Webpack > 2.4)。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const Foo = () => import(/* webpackChunkName: \"group-foo\" */ './Foo.vue')\nconst Bar = () => import(/* webpackChunkName: \"group-foo\" */ './Bar.vue')\nconst Baz = () => import(/* webpackChunkName: \"group-foo\" */ './Baz.vue')\n")])])]),t("p",[e._v("Webpack 会将任何一个异步模块与相同的块名称组合到相同的异步块中。")]),e._v(" "),t("h3",{attrs:{id:"导航故障"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#导航故障"}},[e._v("#")]),e._v(" 导航故障")]),e._v(" "),t("p",[e._v("当使用 "),t("code",[e._v("router-link")]),e._v(" 组件时，Vue Router 会自动调用 "),t("code",[e._v("router.push")]),e._v(" 来触发一次导航。 虽然大多数链接的预期行为是将用户导航到一个新页面，但也有少数情况下用户将留在同一页面上：")]),e._v(" "),t("ul",[t("li",[e._v("用户已经位于他们正在尝试导航到的页面")]),e._v(" "),t("li",[e._v("一个导航守卫通过调用 "),t("code",[e._v("next(false)")]),e._v(" 中断了这次导航")]),e._v(" "),t("li",[e._v("一个导航守卫抛出了一个错误，或者调用了 "),t("code",[e._v("next(new Error())")])])]),e._v(" "),t("p",[e._v("当使用 "),t("code",[e._v("router-link")]),e._v(" 组件时，这些失败都不会打印出错误。然而，如果你使用 "),t("code",[e._v("router.push")]),e._v(" 或者 "),t("code",[e._v("router.replace")]),e._v(' 的话，可能会在控制台看到一条 "Uncaught (in promise) Error" 这样的错误，后面跟着一条更具体的消息。让我们来了解一下如何区分导航故障。')]),e._v(" "),t("p",[e._v("检测导航故障\n导航故障是一个 Error 实例，附带了一些额外的属性。要检查一个错误是否来自于路由器，可以使用 isNavigationFailure 函数：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("import VueRouter from 'vue-router'\nconst { isNavigationFailure, NavigationFailureType } = VueRouter\n\n// 正在尝试访问 admin 页面\nrouter.push('/admin').catch(failure => {\n  if (isNavigationFailure(failure, NavigationFailureType.redirected)) {\n    // 向用户显示一个小通知\n    showToast('Login in order to access the admin panel')\n  }\n})\n")])])]),t("p",[e._v("如果你忽略第二个参数："),t("code",[e._v("isNavigationFailure(failure)")]),e._v("，那么就只会检查这个错误是不是一个导航故障。")]),e._v(" "),t("p",[e._v("NavigationFailureType\nNavigationFailureType 可以帮助开发者来区分不同类型的导航故障。有四种不同的类型：")]),e._v(" "),t("ul",[t("li",[e._v("redirected：在导航守卫中调用了 "),t("code",[e._v("next(newLocation)")]),e._v(" 重定向到了其他地方。")]),e._v(" "),t("li",[e._v("aborted：在导航守卫中调用了 "),t("code",[e._v("next(false)")]),e._v(" 中断了本次导航。")]),e._v(" "),t("li",[e._v("cancelled：在当前导航还没有完成之前又有了一个新的导航。比如，在等待导航守卫的过程中又调用了 "),t("code",[e._v("router.push")]),e._v("。")]),e._v(" "),t("li",[e._v("duplicated：导航被阻止，因为我们已经在目标位置了。")])]),e._v(" "),t("p",[e._v("导航故障的属性\n所有的导航故障都会有 to 和 from 属性，分别用来表达这次失败的导航的目标位置和当前位置。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 正在尝试访问 admin 页面\nrouter.push('/admin').catch(failure => {\n  if (isNavigationFailure(failure, NavigationFailureType.redirected)) {\n    failure.to.path // '/admin'\n    failure.from.path // '/'\n  }\n})\n")])])]),t("p",[e._v("在所有情况下，to 和 from 都是规范化的路由位置。")])])}),[],!1,null,null,null);t.default=n.exports}}]);