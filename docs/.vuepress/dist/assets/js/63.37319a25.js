(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{241:function(t,v,_){t.exports=_.p+"assets/img/luoxiaosheng.3e3f64f6.svg"},242:function(t,v,_){t.exports=_.p+"assets/img/luoxiaosheng_learning.c39ce245.svg"},243:function(t,v,_){t.exports=_.p+"assets/img/luoxiaosheng_wechat.8efd3324.svg"},365:function(t,v,_){"use strict";_.r(v);var r=_(14),i=Object(r.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"_0-1learning"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_0-1learning"}},[t._v("#")]),t._v(" 0-1Learning")]),t._v(" "),v("p",[v("img",{attrs:{src:_(241),alt:"alt text",title:"公众号"}}),t._v(" "),v("img",{attrs:{src:_(242),alt:"alt text",title:"学习"}}),t._v(" "),v("img",{attrs:{src:_(243),alt:"alt text",title:"微信"}})]),t._v(" "),v("h2",{attrs:{id:"工具类"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#工具类"}},[t._v("#")]),t._v(" 工具类")]),t._v(" "),v("h3",{attrs:{id:"要点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#要点"}},[t._v("#")]),t._v(" 要点")]),t._v(" "),v("ul",[v("li",[t._v("Java API\n"),v("ul",[v("li",[t._v("理解API的概念")])])]),t._v(" "),v("li",[t._v("Object 类")]),t._v(" "),v("li",[t._v("包装类")]),t._v(" "),v("li",[t._v("String类与StringBuffer类\n"),v("ul",[v("li",[t._v("String类的常用方法")]),t._v(" "),v("li",[t._v("StringBuffer类的常用方法")]),t._v(" "),v("li",[t._v("StringBuilder类的常用方法")]),t._v(" "),v("li",[t._v("String与StringBuffer的区别")]),t._v(" "),v("li",[t._v("StringBuffer与StringBuilder的区别")])])]),t._v(" "),v("li",[t._v("Math 类")]),t._v(" "),v("li",[t._v("日期类型")])]),t._v(" "),v("h3",{attrs:{id:"java-api简介"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-api简介"}},[t._v("#")]),t._v(" Java API简介")]),t._v(" "),v("ul",[v("li",[t._v("API的概念\n"),v("ul",[v("li",[t._v("API (Application Programming Interface)\t应用程序接口")]),t._v(" "),v("li",[t._v("Java中的API，就是JDK提供的各种功能的Java类")]),t._v(" "),v("li",[t._v("JDK帮助文档")])])])]),t._v(" "),v("h3",{attrs:{id:"object介绍和方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#object介绍和方法"}},[t._v("#")]),t._v(" Object介绍和方法")]),t._v(" "),v("ul",[v("li",[t._v("Object类\n"),v("ul",[v("li",[t._v("Object类是所有类的超类， Object是Java语言中唯一一个没有父类的类。")]),t._v(" "),v("li",[t._v("一个类可以不是Object类的直接子类，但一定是Object类的子类，Java中的每一个类都是从Object扩展来的。")]),t._v(" "),v("li",[t._v("在Object类中定义的方法，在所有类中都可以使用。")])])]),t._v(" "),v("li",[t._v("Object 类常用方法\n"),v("ul",[v("li",[t._v("public boolean equals(Object obj)\n"),v("ul",[v("li",[t._v("比较两个对象引用的值是否相等（比较哈希地址）")])])]),t._v(" "),v("li",[t._v("public int hashCode()\n"),v("ul",[v("li",[t._v("返回十进制整数，唯一标识一个对象")])])]),t._v(" "),v("li",[t._v("public String toString()\n"),v("ul",[v("li",[t._v("返回 类名@hashcode")])])])])])]),t._v(" "),v("h3",{attrs:{id:"包装类"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#包装类"}},[t._v("#")]),t._v(" 包装类")]),t._v(" "),v("ul",[v("li",[t._v("包装类\n"),v("ul",[v("li",[t._v("基本数据类型不是对象层次结构的组成部分。有时需要像处 理对象一样处理这些基本数据类型，可通过相应的“包装类” 来将其“包装”。")])])])]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("数据类型")]),t._v(" "),v("th",[t._v("封装类")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("boolean")]),t._v(" "),v("td",[t._v("Boolean")])]),t._v(" "),v("tr",[v("td",[t._v("byte")]),t._v(" "),v("td",[t._v("Byte")])]),t._v(" "),v("tr",[v("td",[t._v("char")]),t._v(" "),v("td",[t._v("Character")])]),t._v(" "),v("tr",[v("td",[t._v("double")]),t._v(" "),v("td",[t._v("Double")])]),t._v(" "),v("tr",[v("td",[t._v("float")]),t._v(" "),v("td",[t._v("Float")])]),t._v(" "),v("tr",[v("td",[t._v("int")]),t._v(" "),v("td",[t._v("Integer")])]),t._v(" "),v("tr",[v("td",[t._v("long")]),t._v(" "),v("td",[t._v("Long")])]),t._v(" "),v("tr",[v("td",[t._v("short")]),t._v(" "),v("td",[t._v("Short")])])])]),t._v(" "),v("h4",{attrs:{id:"基本类型转换包装类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#基本类型转换包装类型"}},[t._v("#")]),t._v(" 基本类型转换包装类型")]),t._v(" "),v("ul",[v("li",[t._v("基本数据类型通过构造器转换为包装类")])]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("int pInt = 500;\nInteger wInt = new Integer(pInt);\n")])])]),v("ul",[v("li",[t._v("字符串通过构造方法转换为包装类")])]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("String sInt = “500”;\nInteger wInt = new Integer(sInt);\n")])])]),v("ul",[v("li",[t._v("字符串通过包装类的valueOf(String s)转换为包装类")])]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("String sInt = “500”;\nInteger wInt = Integer.valueOf(sInt);\n")])])]),v("p",[t._v(" 注意：字符串不能通过以上两种方式转换为Character")]),t._v(" "),v("h4",{attrs:{id:"基本类型转换包装类类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#基本类型转换包装类类型"}},[t._v("#")]),t._v(" 基本类型转换包装类类型")]),t._v(" "),v("ul",[v("li",[t._v("包装类通过xxxValue()方法转换为基本数据类型")])]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("Integer wInt = new Integer(500); \nint pInt = wInt.intValue();\n")])])]),v("ul",[v("li",[t._v("包装类通过toString()方法转换为字符串")])]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("Integer wInt = new Integer(500);\nString sInt = wInt.toString();\n")])])]),v("h4",{attrs:{id:"字符串转换为基本数据类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#字符串转换为基本数据类型"}},[t._v("#")]),t._v(" 字符串转换为基本数据类型")]),t._v(" "),v("ul",[v("li",[t._v("字符串通过parseXXX(String s)方法转换为基本数据类型")])]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("String sInt = “500”;\nint pInt = Integer.parsetIInt(sInt);\n")])])]),v("h3",{attrs:{id:"自动的装箱和自动拆箱"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#自动的装箱和自动拆箱"}},[t._v("#")]),t._v(" 自动的装箱和自动拆箱")]),t._v(" "),v("ul",[v("li",[t._v("自动的装箱和自动拆箱\t示例：TestWrapper.java\n"),v("ul",[v("li",[t._v("在进行基本数据类型和对应的包装类转换时，系统将自动进行")]),t._v(" "),v("li",[t._v("JDK自从5.0版本后引入")]),t._v(" "),v("li",[t._v("方便程序的编写")])])])]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("int pInt = 500; \nInteger wInt = pInt; \nint n = wInt;\n")])])]),v("h3",{attrs:{id:"string类"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#string类"}},[t._v("#")]),t._v(" String类")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("String类")]),t._v(" "),v("ul",[v("li",[t._v("代表一组不可改变的unicode字符序列。")]),t._v(" "),v("li",[t._v("String类用于比较两字符串、查找和抽取串中的字符或子串、字符 串与其他类型之间的转换等。")]),t._v(" "),v("li",[t._v("String类对象的内容一旦被初始化就不能再改变。")])])]),t._v(" "),v("li",[v("p",[t._v("String对象的创建")]),t._v(" "),v("ul",[v("li",[t._v("String类的构造方法\n"),v("ul",[v("li",[t._v("初始化一个新创建的 String 对象，它表示一个空字符序列。\nString 变量名 = new String () ;")]),t._v(" "),v("li",[t._v("初始化一个新创建的 String 对象，表示一个与该参数相同的字符序列\nString 变量名 = new String (String value) ;")]),t._v(" "),v("li",[t._v("分配一个新的字符串，它包含当前包含在字符串缓冲区参数中的字符序列。\nString 变量名 = new String (StringBuffer buf) ;")])])]),t._v(" "),v("li",[t._v("字符串文字常量本身是一个String对象\nString 变量名 = “hello” ;")])])]),t._v(" "),v("li",[v("p",[t._v("“ + ”字符串连接运算符")]),t._v(" "),v("ul",[v("li",[t._v("连接操作符“+”，可以将其它各种类型的数据转换成字符串，并 前后连接成新的字符串")])])])]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("String str1 = “hello ”; \nString str2 = “world”;\nString str = str1 + str2; //str为“hello world”\n")])])]),v("ul",[v("li",[t._v("String类的性质\t示例 StringDemo.java\n"),v("ul",[v("li",[t._v("任何一个String对象在创建之后都不能对它的内容作出任何改变\n（immutable）\n"),v("ul",[v("li",[t._v("连接、获得子串和改变大小写等操作，如果返回值同原字符串不同，实际上是产生了一个新的String对象")])])]),t._v(" "),v("li",[t._v("在程序的任何地方，相同的字符串字面常量都是同一个对象")]),t._v(" "),v("li",[t._v("String类重置了equals方法，用于比较两个字符串的内容")])])])]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("String str1 = “hello ”;\nString str2 = new String(“hello”); \nSystem.out.println(str1==str2); \nSystem.out.println(str1.equals(str2));\n")])])]),v("h4",{attrs:{id:"string类常用方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#string类常用方法"}},[t._v("#")]),t._v(" String类常用方法")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("含义")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("boolean equals(String)")]),t._v(" "),v("td",[t._v("判断两个字符串对象的内容是否相等")])]),t._v(" "),v("tr",[v("td",[t._v("boolean equalsIgnoreCase(String)")]),t._v(" "),v("td",[t._v("比较两个字符串的内容是否相等，忽略大小写")])]),t._v(" "),v("tr",[v("td",[t._v("String toUpperCase( )")]),t._v(" "),v("td",[t._v("将String对象中的所有字符都转换为大写")])]),t._v(" "),v("tr",[v("td",[t._v("String toLowerCase( )")]),t._v(" "),v("td",[t._v("将String对象中的所有字符都转换为小写")])]),t._v(" "),v("tr",[v("td",[t._v("char charAt(int)")]),t._v(" "),v("td",[t._v("返回指定索引处的char 值")])]),t._v(" "),v("tr",[v("td",[t._v("String subString(int begin)")]),t._v(" "),v("td",[t._v("返回一个新字符串，该字符串是从begin开始的字符串的内容")])]),t._v(" "),v("tr",[v("td",[t._v("String subString(int begin,int end)")]),t._v(" "),v("td",[t._v("返回一个新字符串，该字符串是从begin开始到end结束的字符串的内容")])]),t._v(" "),v("tr",[v("td",[t._v("int\tindexOf/lastIndexOf(char)")]),t._v(" "),v("td",[t._v("返回指定字符在此字符串中第一次/最后一次出现处的索引。")])]),t._v(" "),v("tr",[v("td",[t._v("int\tindexOf/lastIndexOf(char,int)")]),t._v(" "),v("td",[t._v("从指定的索引开始搜索，返回在此字符串中第一次/最后一次出现指定字符处的索引")])]),t._v(" "),v("tr",[v("td",[t._v("int\tindexOf/lastIndexOf(String)")]),t._v(" "),v("td",[t._v("返回第一次出现的指定子字符串在此字符串中的索引")])]),t._v(" "),v("tr",[v("td",[t._v("int\tindexOf/lastIndexOf(String,int)")]),t._v(" "),v("td",[t._v("从指定的索引开始搜索，返回在此字符串中第一次/最后一次出现指定字符串处的索引")])]),t._v(" "),v("tr",[v("td",[t._v("String trim( )")]),t._v(" "),v("td",[t._v("返回新的字符串，忽略前导空白和尾部空白")])]),t._v(" "),v("tr",[v("td",[t._v("int length( )")]),t._v(" "),v("td",[t._v("返回此字符串的长度")])])])]),t._v(" "),v("h4",{attrs:{id:"stringbuffer类"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#stringbuffer类"}},[t._v("#")]),t._v(" StringBuffer类")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("StringBuffer类")]),t._v(" "),v("ul",[v("li",[t._v("StringBuffer类用于内容可以改变的字符串")]),t._v(" "),v("li",[t._v("可以使用StringBuffer来对字符串的内容进行动态操作，不会产生 额外的对象")])])]),t._v(" "),v("li",[v("p",[t._v("StringBuffer对象的创建")]),t._v(" "),v("ul",[v("li",[t._v("构造一个其中不带字符的字符串缓冲区，其初始容量为 16 个字符")]),t._v(" "),v("li",[t._v("构造一个不带字符，但具有指定初始容量的字符串缓冲区。")]),t._v(" "),v("li",[t._v("构造一个字符串缓冲区，并将其内容初始化为指定的字符串内容。")])])]),t._v(" "),v("li",[v("p",[t._v("StringBuffer类的常用方法")])])]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("含义")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("int capacity( )")]),t._v(" "),v("td",[t._v("返回当前容量")])]),t._v(" "),v("tr",[v("td",[t._v("int length( )")]),t._v(" "),v("td",[t._v("返回长度（字符数）")])]),t._v(" "),v("tr",[v("td",[t._v("StringBuffer reverse( )")]),t._v(" "),v("td",[t._v("将此字符序列用其反转形式取代")])]),t._v(" "),v("tr",[v("td",[t._v("void setCharAt(int,char)")]),t._v(" "),v("td",[t._v("将给定索引处的字符设置为ch")])]),t._v(" "),v("tr",[v("td",[t._v("void delete(int begin,int end)")]),t._v(" "),v("td",[t._v("移除此序列的子字符串中的字符")])]),t._v(" "),v("tr",[v("td",[t._v("char charAt(int)")]),t._v(" "),v("td",[t._v("返回此序列中指定索引处的char 值")])]),t._v(" "),v("tr",[v("td",[t._v("String toString( )")]),t._v(" "),v("td",[t._v("将StringBuffer对象转换成相应的String")])])])]),t._v(" "),v("p",[t._v("StringBuffer append(String str)\t将指定的字符串追加到此字符序列\nStringBuffer append(int num)\t将int 参数的字符串表示形式追加到此序列\nStringBuffer append(Object o)\t追加Object 参数的字符串表示形式\nStringBuffer insert(int index,String str)\t将字符串插入此字符序列中\nStringBuffer insert(int index,char ch)\t将字符插入此字符序列中\nStringBuffer insert(int index,Object o)\t将Object 参数的字符串表示形式插入此字符序列中")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("StringBuilder类")]),t._v(" "),v("ul",[v("li",[t._v("StringBuilder类是一个可变的字符序列。")]),t._v(" "),v("li",[t._v("JDK自从5.0版本后引入。")]),t._v(" "),v("li",[t._v("StringBuilder类被设计用作 StringBuffer 的一个简易替换，用在字符串缓冲区被单个线程使用的时候 。")])])]),t._v(" "),v("li",[v("p",[t._v("StringBuilder对象的创建")]),t._v(" "),v("ul",[v("li",[t._v("构造一个不带任何字符的字符串生成器，其初始容量为 16 个字符。\nStringBuilder 变量名 = new StringBuilder () ;")]),t._v(" "),v("li",[t._v("构造一个不带任何字符的字符串生成器，其初始容量由 capacity参数指定。\nStringBuilder 变量名 = new StringBuilder (int capacity ) ;")]),t._v(" "),v("li",[t._v("构造一个字符串生成器，并初始化为指定的字符串内容\nStringBuilder 变量名 = new StringBuilder(String str) ;")])])]),t._v(" "),v("li",[v("p",[t._v("StringBuilder类的常用方法")])])]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("含义")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("int capacity( )")]),t._v(" "),v("td",[t._v("返回当前容量")])]),t._v(" "),v("tr",[v("td",[t._v("int length( )")]),t._v(" "),v("td",[t._v("返回长度（字符数）")])]),t._v(" "),v("tr",[v("td",[t._v("StringBuilder reverse( )")]),t._v(" "),v("td",[t._v("将此字符序列用其反转形式取代")])]),t._v(" "),v("tr",[v("td",[t._v("void setCharAt(int index,char ch)")]),t._v(" "),v("td",[t._v("将给定索引index处的字符设置为ch")])]),t._v(" "),v("tr",[v("td",[t._v("void delete(int begin,int end)")]),t._v(" "),v("td",[t._v("移除此序列的子字符串中的字符")])]),t._v(" "),v("tr",[v("td",[t._v("char charAt(int index)")]),t._v(" "),v("td",[t._v("返回此序列中指定索引处的char 值")])]),t._v(" "),v("tr",[v("td",[t._v("String toString( )")]),t._v(" "),v("td",[t._v("将StringBuilder对象转换成相应的String")])]),t._v(" "),v("tr",[v("td",[t._v("StringBuilder append(String str)")]),t._v(" "),v("td",[t._v("将指定的字符串追加到此字符序列")])]),t._v(" "),v("tr",[v("td",[t._v("StringBuilder append(int num)")]),t._v(" "),v("td",[t._v("将int 参数的字符串表示形式追加到此序列")])]),t._v(" "),v("tr",[v("td",[t._v("StringBuilder append(Object o)")]),t._v(" "),v("td",[t._v("追加Object 参数的字符串表示形式")])]),t._v(" "),v("tr",[v("td",[t._v("StringBuilder insert(int index,String str)")]),t._v(" "),v("td",[t._v("将字符串插入此字符序列中")])]),t._v(" "),v("tr",[v("td",[t._v("StringBuilder insert(int index,char ch)")]),t._v(" "),v("td",[t._v("将字符插入此字符序列中")])]),t._v(" "),v("tr",[v("td",[t._v("StringBuilder insert(int index,Object o)")]),t._v(" "),v("td",[t._v("将Object 参数的字符串表示形式插入此字符序列中")])])])]),t._v(" "),v("h3",{attrs:{id:"stringbuffer类与stringbuilder-类的异同"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#stringbuffer类与stringbuilder-类的异同"}},[t._v("#")]),t._v(" StringBuffer类与StringBuilder 类的异同")]),t._v(" "),v("ul",[v("li",[t._v("StringBuffer类与StringBuilder 类的异同\n"),v("ul",[v("li",[t._v("Java中定义了String与StringBuffer两个类来封装对字符串的各种操作")]),t._v(" "),v("li",[t._v("String类与StringBuffer类都被放到了java.lang包中")]),t._v(" "),v("li",[t._v("两者的主要区别在于\n"),v("ul",[v("li",[t._v("String类对象中的内容初始化不可以改变")]),t._v(" "),v("li",[t._v("StringBuffer类对象中的内容可以改变")])])]),t._v(" "),v("li",[t._v("StringBuffer和StringBuilder都是长度可变的字符串。")]),t._v(" "),v("li",[t._v("两者的操作基本相同。")]),t._v(" "),v("li",[t._v("两者的主要区别在于\n"),v("ul",[v("li",[t._v("StringBuffer类是线程安全的；")]),t._v(" "),v("li",[t._v("StringBuilder类是线程不安全的。")]),t._v(" "),v("li",[t._v("StringBuffer在JDK1.0中就有，而StringBuilder是在JDK5.0后才出现的。")]),t._v(" "),v("li",[t._v("StringBuilder的一些方法实现要比StringBuffer快些")])])])])])]),t._v(" "),v("h3",{attrs:{id:"math-类"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#math-类"}},[t._v("#")]),t._v(" Math 类")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("Math 类")]),t._v(" "),v("ul",[v("li",[t._v("Math类提供了大量用于数学运算的方法")]),t._v(" "),v("li",[t._v("Math类是final类，因此不能从Math类继承")]),t._v(" "),v("li",[t._v("Math类中的方法都是static方法，因此不必创建Math类的对象就 可以直接使用该类的方法")])])]),t._v(" "),v("li",[v("p",[t._v("Math 类中的常量"),v("br"),t._v("\npublic  static  final  double PI"),v("br"),t._v("\npublic static final\tdouble E")])]),t._v(" "),v("li",[v("p",[t._v("Math 类中的常用方法")])])]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("含义")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("static int abs(int)")]),t._v(" "),v("td",[t._v("返回参数的绝对值，返回值类型与参数类型相同")])]),t._v(" "),v("tr",[v("td",[t._v("static double abs(double)")]),t._v(" "),v("td",[t._v("返回参数的绝对值")])]),t._v(" "),v("tr",[v("td",[t._v("static double ceil(double)")]),t._v(" "),v("td",[t._v("返回大于所给参数的最小的整数值")])]),t._v(" "),v("tr",[v("td",[t._v("static double floor(double)")]),t._v(" "),v("td",[t._v("返回不大于所给参数的最大的整数值")])]),t._v(" "),v("tr",[v("td",[t._v("static int\tmax(int a,int b)")]),t._v(" "),v("td",[t._v("返回两个int值中较大的一个")])]),t._v(" "),v("tr",[v("td",[t._v("static double max(double,double)")]),t._v(" "),v("td",[t._v("返回两个double值中较大的一个")])]),t._v(" "),v("tr",[v("td",[t._v("static int min(int a,int b)")]),t._v(" "),v("td",[t._v("返回两个int值中较小的一个")])]),t._v(" "),v("tr",[v("td",[t._v("static double min(double,double)")]),t._v(" "),v("td",[t._v("返回两个double值中较小的一个")])]),t._v(" "),v("tr",[v("td",[t._v("static double random( )")]),t._v(" "),v("td",[t._v("返回在0.0~1.0之间的随机的double值")])]),t._v(" "),v("tr",[v("td",[t._v("static int round(double)")]),t._v(" "),v("td",[t._v("返回同所给值最接近的整数，采用4舍5入法")])]),t._v(" "),v("tr",[v("td",[t._v("static double sin/cos/tan(double)")]),t._v(" "),v("td",[t._v("返回给定的弧度值对应的三角函数值")])]),t._v(" "),v("tr",[v("td",[t._v("static double sqrt(double)")]),t._v(" "),v("td",[t._v("返回所给值的平方根，若所给值为负数则返回NaN")])])])]),t._v(" "),v("h3",{attrs:{id:"math-类-2"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#math-类-2"}},[t._v("#")]),t._v(" Math 类")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("Date 类")]),t._v(" "),v("ul",[v("li",[t._v("java.util.Date。")]),t._v(" "),v("li",[t._v("Date 类表示指定的时间信息，可以精确到毫秒。")]),t._v(" "),v("li",[t._v("不支持国际化。")]),t._v(" "),v("li",[t._v("该类的许多方法已过时。")]),t._v(" "),v("li",[t._v("获取当前系统时间：new Date();")])])]),t._v(" "),v("li",[v("p",[t._v("Date类中的常用方法\t示例：")])])]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("含义")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("boolean after(Date when)")]),t._v(" "),v("td",[t._v("测试此日期是否在指定日期之后")])]),t._v(" "),v("tr",[v("td",[t._v("boolean after(Date when)")]),t._v(" "),v("td",[t._v("测试此日期是否在指定日期之前")])]),t._v(" "),v("tr",[v("td",[t._v("int compareTo(Date anotherDate)")]),t._v(" "),v("td",[t._v("比较两个日期的顺序。如果参数Date 等于此Date，则返回值 0；如果此Date 在Date 参数之前，则返回小于 0 的值；如果此Date 在Date 参数之后，则返回大于 0 的值。")])]),t._v(" "),v("tr",[v("td",[t._v("boolean equals(Object obj)")]),t._v(" "),v("td",[t._v("比较两个日期的相等性。")])])])]),t._v(" "),v("h3",{attrs:{id:"calendar-类"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#calendar-类"}},[t._v("#")]),t._v(" Calendar 类")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("Calendar 类")]),t._v(" "),v("ul",[v("li",[t._v("java.util.Calendar。\n"),v("ul",[v("li",[t._v("java.util.GregorianCalendar")])])]),t._v(" "),v("li",[t._v("常用的日期处理的对象。可以设置自己的时区和国际化格式。")]),t._v(" "),v("li",[t._v("是一个抽象类。")]),t._v(" "),v("li",[t._v("Calendar 抽象类定义了足够的方法，让我们能够表述日历的规则 。")])])]),t._v(" "),v("li",[v("p",[t._v("Calendar 类的使用:")]),t._v(" "),v("ul",[v("li",[t._v("获取Calendar对象的实例 Calendar c = Calendar.getInstance();")])])]),t._v(" "),v("li",[v("p",[t._v("Calendar 类的使用:")]),t._v(" "),v("ul",[v("li",[t._v("获取Calendar对象的实例："),v("br"),t._v("\nCalendar c = Calendar.getInstance();")]),t._v(" "),v("li",[t._v("设置Calendar实例所表示的时间："),v("br"),t._v("\nc.set(2011,6,16);")]),t._v(" "),v("li",[t._v("获取指定的时间属性"),v("br"),t._v("\nc.get(Calendar.YEAR);")])])]),t._v(" "),v("li",[v("p",[t._v("Calendar 类中的常用属性")])])]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("含义")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("static int HOUR")]),t._v(" "),v("td",[t._v("小时时间")])]),t._v(" "),v("tr",[v("td",[t._v("static int MINUTE")]),t._v(" "),v("td",[t._v("分时间")])]),t._v(" "),v("tr",[v("td",[t._v("static int SECOND")]),t._v(" "),v("td",[t._v("秒时间")])]),t._v(" "),v("tr",[v("td",[t._v("static int DATE")]),t._v(" "),v("td",[t._v("日期的Date部分")])]),t._v(" "),v("tr",[v("td",[t._v("static int MONTH")]),t._v(" "),v("td",[t._v("日期的Month部分")])]),t._v(" "),v("tr",[v("td",[t._v("static int YEAR")]),t._v(" "),v("td",[t._v("日期的年部分")])])])])])}),[],!1,null,null,null);v.default=i.exports}}]);