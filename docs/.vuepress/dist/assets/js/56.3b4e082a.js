(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{241:function(t,a,n){t.exports=n.p+"assets/img/luoxiaosheng.3e3f64f6.svg"},242:function(t,a,n){t.exports=n.p+"assets/img/luoxiaosheng_learning.c39ce245.svg"},243:function(t,a,n){t.exports=n.p+"assets/img/luoxiaosheng_wechat.8efd3324.svg"},354:function(t,a,n){"use strict";n.r(a);var e=n(14),r=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_0-1learning"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0-1learning"}},[t._v("#")]),t._v(" 0-1Learning")]),t._v(" "),a("p",[a("img",{attrs:{src:n(241),alt:"alt text",title:"公众号"}}),t._v(" "),a("img",{attrs:{src:n(242),alt:"alt text",title:"学习"}}),t._v(" "),a("img",{attrs:{src:n(243),alt:"alt text",title:"微信"}})]),t._v(" "),a("h2",{attrs:{id:"swift语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#swift语法"}},[t._v("#")]),t._v(" swift语法")]),t._v(" "),a("h3",{attrs:{id:"数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据类型"}},[t._v("#")]),t._v(" 数据类型")]),t._v(" "),a("h3",{attrs:{id:"变量和常量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量和常量"}},[t._v("#")]),t._v(" 变量和常量")]),t._v(" "),a("p",[t._v("变量：var\n常量（无法变更）：let")]),t._v(" "),a("p",[t._v('var str = "hello" (类型推断)（一般采用这种）\nvar s:String = "word"(指明类型)\nvar i:Int = 100')]),t._v(" "),a("p",[t._v('字符串对象连接引用——(变量)\nvar str= "hello"\nstr = "(str),hello"')]),t._v(" "),a("h3",{attrs:{id:"数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[t._v("#")]),t._v(" 数组：")]),t._v(" "),a("p",[t._v('var arr = ["hello","world",100]\n声明空数组：var arr1 = []\n声明空数组且指明类型：var arr2 = String'),a("a",{attrs:{href:""}})]),t._v(" "),a("h3",{attrs:{id:"字典"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字典"}},[t._v("#")]),t._v(" 字典:")]),t._v(" "),a("p",[t._v('var dict = ["name":"hello","age",16]\n动态赋值：dict["sex"]="Female"\n根据key取值：dict["name"]')]),t._v(" "),a("h3",{attrs:{id:"循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#循环"}},[t._v("#")]),t._v(" 循环：")]),t._v(" "),a("p",[t._v("for index in 0..100{")]),t._v(" "),a("p",[t._v("}")]),t._v(" "),a("p",[t._v("引用数组arr：\nfor value in arr{\nprintln(value)\n}")]),t._v(" "),a("p",[t._v("for对字段进行遍历：\nfor (key,value) in dict{")]),t._v(" "),a("p",[t._v("}")]),t._v(" "),a("p",[t._v("while循环:\nwhile i<arr.count{")]),t._v(" "),a("p",[t._v("}")]),t._v(" "),a("h3",{attrs:{id:"流程控制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#流程控制"}},[t._v("#")]),t._v(" 流程控制")]),t._v(" "),a("p",[t._v("if判断：\nif index%2==0{")]),t._v(" "),a("p",[t._v("}")]),t._v(" "),a("p",[t._v('可选变量：\nvar myName:String?="hello"——?表示标识可选变量\nif let name=myName{')]),t._v(" "),a("p",[t._v("}")]),t._v(" "),a("p",[t._v("设置空：myName = nil")]),t._v(" "),a("h3",{attrs:{id:"语法糖"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#语法糖"}},[t._v("#")]),t._v(" 语法糖")]),t._v(" "),a("p",[t._v("? 和 ! 其实分别是Swift语言中对一种可选类型（ Optional) 操作的语法糖。\n那可选类型是干什么的呢？\nSwift中是可以声明一个没有初始值的属性， Swift中引入了可选类型(Optional)来解决这一问题。它的定义是通过在类型声明后加一个 ? 操作符完成的。")]),t._v(" "),a("p",[t._v("Optional其实是个enum，里面有None和Some两种类型。其实所谓的nil就是Optional.None ， 非nil就是Optional.Some， 然后会通过Some(T)包装（wrap）原始值，这也是为什么在使用Optional的时候要拆包（从enum里取出来原始值）的原因。这里是enum Optional的定义")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("var name: String?\n// 上面这个Optional的声明，是”我声明了一个Optional类型值，\n 它可能包含一个String值，也可能什么都不包含”，\n也就是说实际上我们声明的是Optional类型，而不是声明了一个String类型 (这其实理解起来挺蛋疼的...)\n")])])]),a("p",[t._v("怎么使用Optional值呢？文档中也有提到说，在使用Optional值的时候需要在具体的操作，比如调用方法、属性、下标索引等前面需要加上一个?，如果是nil值，也就是Optional.None，会跳过后面的操作不执行，如果有值，就是Optional.Some，可能就会拆包(unwrap)，然后对拆包后的值执行后面的操作，来保证执行这个操作的安全性。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// 例如： let length = name?.characters.count\n")])])]),a("p",[t._v("? 的使用场景:\n1.声明Optional值变量\n2.用在对Optional值操作中，用来判断是否能响应后面的操作\n3.使用 as? 向下转型(Downcast)")]),t._v(" "),a("p",[t._v("上面提到Optional值需要拆包(unwrap)后才能得到原来值，然后才能对其操作，那怎么来拆包呢？\n拆包有两种方法：")]),t._v(" "),a("p",[t._v("可选绑定(Optional Binding)\n可选绑定(Optional Binding)是一种更简单更推荐的方法来解包一个可选类型。 使用可选绑定来检查可选类型的变量有值还是没值。如果有值, 解包它并且将值传递给一个常量或者变量。")]),t._v(" "),a("p",[t._v("硬解包\n硬解包即直接在可选类型后面加一个感叹号（!）来表示它肯定有值。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('var str1: String? = "Hello"\nlet greeting = "World!"\nif (str1 != nil) { \n       let message = greeting + str1! \n       print(message)\n}\n\n/**上面例子，我们只是自己知道str1肯定有值, 所以才直接硬解包了str1变量。 但是万一有时候我们的感觉是错的,\n 那程序在运行时可能会出现严重的错误. 所以Swift中是推荐先检查可选类型是否有值, 然后再进行解包的!\n*/ \n')])])]),a("p",[t._v("! 的使用场景:\n1.强制对Optional值进行拆包(unwrap)\n2.声明隐式拆包变量，一般用于类中的属性")]),t._v(" "),a("h3",{attrs:{id:"语言函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#语言函数"}},[t._v("#")]),t._v(" 语言函数：")]),t._v(" "),a("p",[t._v('func sayHello(name){\nprintlb("hello(name)")\n}\n调用方法：sayHello("world")')]),t._v(" "),a("p",[t._v("多个返回值：\nfunc getNums(name)->(Int,Int){\nreturn(2,3)\n}")]),t._v(" "),a("p",[t._v("调用并接受返回值：\nlet (a,b) = getNums()\nprintln(a)\t//打印a")]),t._v(" "),a("p",[t._v('函数即对象——也就是可以当作一个变量：\nvar fun= sayHello\n运行函数：\nfun("zhangsan")')]),t._v(" "),a("h3",{attrs:{id:"swift函数闭包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#swift函数闭包"}},[t._v("#")]),t._v(" swift函数闭包")]),t._v(" "),a("p",[t._v("闭包就是能够读取其他函数内部变量的函数，可以理解成定义在一个函数内部的函数。\n简单的说它就是一个代码块，用{}包起来，他可以用在其他函数的内部，将其他函数的变量作为代码块的参数传入代码块中，在Swift中多用于回调。这个跟Object-C中的block是一样的。")]),t._v(" "),a("p",[t._v("例子")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('//一般形式\n//有参有反\nlet testOne: (String, String) -> String = {(str1, str2) in return str1 + str2}\nprint(testOne("one", "two"))\n//无参有反  可以直接省略 "in"\nlet testTwo: () -> String = {return "test闭包"}\n//无参无反\nlet testThree: () -> Void = {print("test闭包")}\n')])])]),a("p",[t._v("归纳\n上面的例子中:后面是闭包的类型，而=后面的就是一个代码块，也就是闭包的具体实现，这些个OC中的block基本一样。")]),t._v(" "),a("h3",{attrs:{id:"面向对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面向对象"}},[t._v("#")]),t._v(" 面向对象：")]),t._v(" "),a("p",[t._v('class Hi{\nfunc sayHi{\nprint("hello world")\n}\n}')]),t._v(" "),a("p",[t._v('继承\nclass Hello:Hi{\nvar _name:String\n//构造方法(初始化时候调用，这个是有参构造函数)\ninit(name:String){\nself._name = name\n}\n//方法重写\noverride func sayHi(){\nprintln("Hello (self._name)")\n}\n}')]),t._v(" "),a("p",[t._v('函数调用\nvar hi = Hi()\nhi.sayHi()\nvar h = Hello(name: "zhangsan")  //name为标签\nh.sayHi()')])])}),[],!1,null,null,null);a.default=r.exports}}]);