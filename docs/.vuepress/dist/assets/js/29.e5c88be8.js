(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{241:function(t,e,n){t.exports=n.p+"assets/img/luoxiaosheng.3e3f64f6.svg"},242:function(t,e,n){t.exports=n.p+"assets/img/luoxiaosheng_learning.c39ce245.svg"},243:function(t,e,n){t.exports=n.p+"assets/img/luoxiaosheng_wechat.8efd3324.svg"},327:function(t,e,n){"use strict";n.r(e);var r=n(14),s=Object(r.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"_0-1learning"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_0-1learning"}},[t._v("#")]),t._v(" 0-1Learning")]),t._v(" "),e("p",[e("img",{attrs:{src:n(241),alt:"alt text",title:"公众号"}}),t._v(" "),e("img",{attrs:{src:n(242),alt:"alt text",title:"学习"}}),t._v(" "),e("img",{attrs:{src:n(243),alt:"alt text",title:"微信"}})]),t._v(" "),e("h2",{attrs:{id:"内容提供者content-provider"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#内容提供者content-provider"}},[t._v("#")]),t._v(" 内容提供者content provider")]),t._v(" "),e("h3",{attrs:{id:"前言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("我们知道物种之间存在生殖隔离，同理，数据的隔离也是如此。\n\nAPP在内部互相访问数据是容易的，但是一个APP中的数据要提供给外部使用就没那么容易了。\n\n内容提供器（Content Provider）主要用于在不同的应用程序之间实现数据共享的功能，它提供了一套完整的机制，允许一个程序访问另一个程序中的数据，同时还能保证被访数据的安全性。\n")])])]),e("h3",{attrs:{id:"访问其他程序中的数据"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#访问其他程序中的数据"}},[t._v("#")]),t._v(" 访问其他程序中的数据")]),t._v(" "),e("p",[t._v("当一个应用程序通过内容提供器对其数据提供了外部访问接口，任何其他的应用程序就都可以对这部分数据进行访问。\nAndroid 系统中自带的电话簿、短信、媒体库等程序都提供了类似的访问接口")]),t._v(" "),e("h3",{attrs:{id:"contentresolver-的基本用法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#contentresolver-的基本用法"}},[t._v("#")]),t._v(" ContentResolver 的基本用法")]),t._v(" "),e("p",[t._v("对于每一个应用程序来说，如果想要访问内容提供器中共享的数据，就一定要借助ContentResolver 类，可以通过Context中的getContentResolver() 方法获取该类的实例。\nContentResolver中提供了一系列的方法用于对数据进行CRUD操作，其中insert() 方法用于添加数据，update() 方法用于更新数据，delete() 方法用于删除数据，query() 方法用于查询数据。\n不同于SQLiteDatabase，ContentResolver 中的增删改查都是接收一个URl参数，这个参数被称为内容URL。\n内容URL给内容提供器中的数据建立了唯一标识符，它主要由两部分组成：authority 和 path 。\nauthority 是用于对不同的应用程序做区分的，一般为了避免冲突，都会采用程序包名的方式进行命名。\npath则是用于对同一应用程序中不同的表做区分，通常都会添加到authority后面：")]),t._v(" "),e("p",[t._v("内容URI 最标准的格式写法如下：\ncontent://com.example.app.provider/table1\ncontent://com.example.app.provider/table2/1")]),t._v(" "),e("p",[t._v("内容URI 的格式主要就只有以上两种，以路径结尾就表示期望访问该表中所有的数据，以id 结尾就表示期望访问该表中拥有相应id 的数据。\n我们可以使用通配符的方式来分别匹配这两种格式的内容URI，规则如下:")]),t._v(" "),e("ul",[e("li",[t._v(": 表示匹配任意长度的任意字符\n# : 表示匹配任意长度的数字")])]),t._v(" "),e("p",[t._v("//一个能够匹配任意表的内容URI格式就可以写成:\ncontent://com.example.app.provider/*\n//一个能够匹配表中任意一行数据的内容URI格式就可以写成：\ncontent://com.example.app.provider/table1/#")]),t._v(" "),e("p",[t._v('将内容URI 字符串解析成Uri 对象：\nUri uri = Uri.parse("content://com.example.app.provider/table1")')]),t._v(" "),e("p",[t._v("现在我们就可以使用这个uri对象来查询talbe1表中的数据了：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("Cursor cursor = getContentResolver().query（\n\turi,\n\tprojection,\n\tselection,\n\tselectionArgs,\n\tsortOrder\n）;\n")])])]),e("p",[t._v("参数解释：\nquery()方法参数\t对应SQL部分\t描述\nuri\tfrom table_name\t指定查询某个应用程序下的某个表\nprojection\tselect column1, column2\t指定查询的列名\nselection\twhere column=value\t指定where约束条件\nselectArgs\t-\t为where中的占位符提供具体的值\norderBy\torder by column1, column2\t指定查询结果的排序方式")]),t._v(" "),e("p",[t._v("查询完之后，就可以从游标中取值了：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('if(cursor != null){\n\twhile(cursor.moveToNext()) {\n\t\tString column1 = cursor.getString(cursor.getColumnIndex("column1"));\n\t\tint column2 = cursor.getInt(cursor.getColumnIndex("column2"));\n\t}\n\tcursor.close();\n}\n')])])]),e("p",[t._v("添加数据")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('ContentValues values = new ContentValues();\nvalues.put(“column1”, "text");\nvalues.put("column2", 1);\ngetContentResolver().insert(uri, values);\n')])])]),e("p",[t._v("更新数据")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('ContentValues valuse = new ContentValues();\nvaluse.put("column1", "");\ngetContentResolver().update(uri, values, "column1 = ? and column2 = ?", new String[]{"text", 1});\n')])])]),e("p",[t._v("删除数据")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('getContentResolver().delete(uri , "column2 = ?", new String[]{ "1"});\n')])])]),e("h3",{attrs:{id:"读取系统联系人"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#读取系统联系人"}},[t._v("#")]),t._v(" 读取系统联系人")]),t._v(" "),e("p",[t._v("读取系统联系人需要声明权限，如果系统是6.0以后的，需要申请运行时权限")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('if(ContextCompat.checkSelfPermission(this, Manifest.permission.READ_CONTACTS) \n\t!= PackageManager.PERMISSION_GRANTED) {\n\t\tActivityCompat.requestPermissions(this, new String[]{Manifest.permission.READ_CONTACTS}, 1);\n\t}else {\n\t\treadContacts();  //读取联系人\n\t}\n\nprivate void readContacts(){\n\tCursor cursor = null;\n\ttry{\n\t\t//查询联系人数据\n\t\tcursor = getContentResolver().query(ContactsContract.CommonDataKinds.Phone.CONTENT_URI,null,null,null,null);\n\t\tif(cursor!=null){\n\t\t\twhile(cursor.moveToNext()){\n\t\t\t\t//获取联系人姓名\n\t\t\t\tString name = cursor.getString(cursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME));\n\t\t\t\t//获取联系人电话号码\n\t\t\t\tString number = cursor.getString(cursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER));\n\t\t\t\tlist.add(name+"\\n"+number);\n\t\t\t}\n\t\t}\n\t}catch(Exception e){\n\t\te.printStackTrace()\n\t}finally{\n\t\tif(cursor != null){\n\t\t\tcursor.close();\n\t\t}\n\t}\n}\n\n@Override\npublic void onRequestPermissionResult(int requestCode, String[] permissions, int[] grantResults){\n\tswitch(requestCode){\n\t\tcase 1:\n\t\t\tif(grantResults.length >0 && grantResults[0] == PackageManager.PERMISSION_GRANTED){\n\t\t\t\treadContacts();\n\t\t\t}else {\n\t\t\t\t//您拒绝了权限\n\t\t\t}\n\t}\n}\n')])])]),e("h3",{attrs:{id:"创建自己的内容提供器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建自己的内容提供器"}},[t._v("#")]),t._v(" 创建自己的内容提供器")]),t._v(" "),e("p",[t._v("创建自己的内容提供器，需要去继承 ContentProvider 类，ContentProvider 类中有6个抽象方法，我们在使用子类继承它的时候，需要将这6个方法全部重写。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("public class MyProvider extends ContentProvider{\n\t@Override\n\tpublic boolean onCreate() {\n\t\treturn false;\n\t}\n\t@Override\n\tpublic Cursor query(Uri uri, String[] projection, Stirng selection, String[] selectionArgs, String sortOrder){\n\t\treturn null;\n\t}\n\t@Overrride\n\tpublic Uri insert(Uri uri , ContentValues values){\n\t\treturn null;\n\t}\n\t@Override\n\tpublic int update(Uri uri, ContentValuse values, String selection, String[] selectionArgs){\n\t\treturn 0;\n\t}\n\t@Override\n\tpublic int delete(Uri uri, String selection, String[] selectionArgs){\n\t\treturn 0;\n\t}\n\t@Override\n\tpublic String getType(Uri uri）{\n\t\treturn null；\n\t}\n}\n")])])])])}),[],!1,null,null,null);e.default=s.exports}}]);