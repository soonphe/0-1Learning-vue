(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{241:function(t,e,s){t.exports=s.p+"assets/img/luoxiaosheng.3e3f64f6.svg"},242:function(t,e,s){t.exports=s.p+"assets/img/luoxiaosheng_learning.c39ce245.svg"},243:function(t,e,s){t.exports=s.p+"assets/img/luoxiaosheng_wechat.8efd3324.svg"},344:function(t,e,s){"use strict";s.r(e);var a=s(14),r=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"_0-1learning"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_0-1learning"}},[t._v("#")]),t._v(" 0-1Learning")]),t._v(" "),e("p",[e("img",{attrs:{src:s(241),alt:"alt text",title:"公众号"}}),t._v(" "),e("img",{attrs:{src:s(242),alt:"alt text",title:"学习"}}),t._v(" "),e("img",{attrs:{src:s(243),alt:"alt text",title:"微信"}})]),t._v(" "),e("h2",{attrs:{id:"工具"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#工具"}},[t._v("#")]),t._v(" 工具")]),t._v(" "),e("h3",{attrs:{id:"测试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#测试"}},[t._v("#")]),t._v(" 测试")]),t._v(" "),e("h4",{attrs:{id:"单元测试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#单元测试"}},[t._v("#")]),t._v(" 单元测试")]),t._v(" "),e("p",[t._v("框架\n尽管生态系统里有很多工具，这里我们列出一些在 Vue 生态系统中常用的单元测试工具。")]),t._v(" "),e("p",[t._v("Jest\nJest 是一个专注于简易性的 JavaScript 测试框架。一个其独特的功能是可以为测试生成快照 (snapshot)，以提供另一种验证应用单元的方法。\n资料：\nJest 官网：https://jestjs.io/zh-Hans/\nVue CLI 官方插件 - Jest：https://cli.vuejs.org/core-plugins/unit-jest.html")]),t._v(" "),e("p",[t._v("Mocha\nMocha 是一个专注于灵活性的 JavaScript 测试框架。因为其灵活性，它允许你选择不同的库来满足诸如侦听 (如 Sinon) 和断言 (如 Chai) 等其它常见的功能。另一个 Mocha 独特的功能是它不止可以在 Node.js 里运行测试，还可以在浏览器里运行测试。\n资料：\nMocha 官网：https://mochajs.org/\nVue CLI 官方插件 - Mocha：https://cli.vuejs.org/core-plugins/unit-mocha.html")]),t._v(" "),e("h4",{attrs:{id:"组件测试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#组件测试"}},[t._v("#")]),t._v(" 组件测试")]),t._v(" "),e("p",[t._v("Vue Testing Library (@testing-library/vue)\nVue Testing Library 是一组专注于测试组件而不依赖实现细节的工具。由于在设计时就充分考虑了可访问性，它采用的方案也使重构变得轻而易举。\n它的指导原则是，与软件使用方式相似的测试越多，它们提供的可信度就越高。\n资料：\nVue Testing Library 官网：https://testing-library.com/docs/vue-testing-library/intro")]),t._v(" "),e("p",[t._v("Vue Test Utils\nVue Test Utils 是官方的偏底层的组件测试库，它是为用户提供对 Vue 特定 API 的访问而编写的。如果你对测试 Vue 应用不熟悉，我们建议你使用 Vue Testing Library，它是 Vue Test Utils 的抽象。\n资源：\nVue Test Utils 官方文档：https://vue-test-utils.vuejs.org/\nVue 测试指南：https://lmiller1990.github.io/vue-testing-handbook/zh-CN/")]),t._v(" "),e("h4",{attrs:{id:"端到端-e2e-测试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#端到端-e2e-测试"}},[t._v("#")]),t._v(" 端到端 (E2E) 测试")]),t._v(" "),e("p",[t._v("虽然生态系统中有许多工具，但以下是一些 Vue.js 生态系统中常用的端到端测试框架。")]),t._v(" "),e("p",[t._v("Cypress.io\nCypress.io 是一个测试框架，旨在通过使开发者能够可靠地测试他们的应用，同时提供一流的开发者体验，来提高开发者的生产率。\n资料：\nCypress 官网：https://www.cypress.io/\nVue CLI 官方插件 - Cypress：https://cli.vuejs.org/core-plugins/e2e-cypress.html\nCypress Testing Library：https://github.com/testing-library/cypress-testing-library")]),t._v(" "),e("p",[t._v("Nightwatch.js\nNightwatch.js 是一个端到端测试框架，可用于测试 web 应用和网站，以及 Node.js 单元测试和集成测试。\n资料：\nNightwatch 官网：https://nightwatchjs.org/\nVue CLI 官方插件 - Nightwatch：https://cli.vuejs.org/core-plugins/e2e-nightwatch.html")]),t._v(" "),e("p",[t._v("Puppeteer\nPuppeteer 是一个 Node.js 库，它提供高阶 API 来控制浏览器，并可以与其他测试运行程序 (例如 Jest) 配对来测试应用。\n资料：\nPuppeteer 官网：https://pptr.dev/")]),t._v(" "),e("p",[t._v("TestCafe\nTestCafe 是一个基于端到端的 Node.js 框架，旨在提供简单的设置，以便开发者能够专注于创建易于编写和可靠的测试。")]),t._v(" "),e("h3",{attrs:{id:"typescript-支持"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#typescript-支持"}},[t._v("#")]),t._v(" TypeScript 支持")]),t._v(" "),e("blockquote",[e("p",[t._v("Vue CLI 提供了内建的 TypeScript 工具支持。")])]),t._v(" "),e("h3",{attrs:{id:"生产环境部署"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#生产环境部署"}},[t._v("#")]),t._v(" 生产环境部署")]),t._v(" "),e("p",[t._v("开启生产环境模式\n开发环境下，Vue 会提供很多警告来帮你对付常见的错误与陷阱。而在生产环境下，这些警告语句却没有用，反而会增加应用的体积。此外，有些警告检查还有一些小的运行时开销，这在生产环境模式下是可以避免的。")]),t._v(" "),e("p",[t._v("使用构建工具\n当使用 webpack 或 Browserify 类似的构建工具时，Vue 源码会根据 process.env.NODE_ENV 决定是否启用生产环境模式，默认情况为开发环境模式。在 webpack 与 Browserify 中都有方法来覆盖此变量，以启用 Vue 的生产环境模式，同时在构建过程中警告语句也会被压缩工具去除。所有这些在 vue-cli 模板中都预先配置好了，但了解一下怎样配置会更好。")]),t._v(" "),e("p",[t._v("webpack\n在 webpack 4+ 中，你可以使用 mode 选项：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("module.exports = {\n  mode: 'production'\n}\n")])])]),e("p",[t._v("但是在 webpack 3 及其更低版本中，你需要使用 DefinePlugin：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var webpack = require('webpack')\n\nmodule.exports = {\n  // ...\n  plugins: [\n    // ...\n    new webpack.DefinePlugin({\n      'process.env.NODE_ENV': JSON.stringify('production')\n    })\n  ]\n}\n")])])]),e("p",[t._v("Browserify")]),t._v(" "),e("ul",[e("li",[t._v('在运行打包命令时将 NODE_ENV 设置为 "production"。这等于告诉 vueify 避免引入热重载和开发相关的代码。')]),t._v(" "),e("li",[t._v("对打包后的文件进行一次全局的 envify 转换。这使得压缩工具能清除掉 Vue 源码中所有用环境变量条件包裹起来的警告语句。例如：")])]),t._v(" "),e("blockquote",[e("p",[t._v("NODE_ENV=production browserify -g envify -e main.js | uglifyjs -c -m > build.js")])]),t._v(" "),e("p",[t._v("或者在 Gulp 中使用 envify：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// 使用 envify 自定义模块指定环境变量\nvar envify = require('envify/custom')\n\nbrowserify(browserifyOptions)\n  .transform(vueify)\n  .transform(\n    // 必填项，以处理 node_modules 里的文件\n    { global: true },\n    envify({ NODE_ENV: 'production' })\n  )\n  .bundle()\n")])])]),e("p",[t._v("或者配合 Grunt 和 grunt-browserify 使用 envify：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// 使用 envify 自定义模块指定环境变量\nvar envify = require('envify/custom')\n\nbrowserify: {\n  dist: {\n    options: {\n        // 该函数用来调整 grunt-browserify 的默认指令\n        configure: b => b\n        .transform('vueify')\n        .transform(\n            // 必填项，以处理 node_modules 里的文件\n          { global: true },\n          envify({ NODE_ENV: 'production' })\n        )\n        .bundle()\n    }\n  }\n}\n")])])]),e("h4",{attrs:{id:"模板预编译"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#模板预编译"}},[t._v("#")]),t._v(" 模板预编译")]),t._v(" "),e("p",[t._v("当使用 DOM 内模板或 JavaScript 内的字符串模板时，模板会在运行时被编译为渲染函数。通常情况下这个过程已经足够快了，但对性能敏感的应用还是最好避免这种用法。\n预编译模板最简单的方式就是使用单文件组件——相关的构建设置会自动把预编译处理好，所以构建好的代码已经包含了编译出来的渲染函数而不是原始的模板字符串。\n如果你使用 webpack，并且喜欢分离 JavaScript 和模板文件，你可以使用 vue-template-loader，它也可以在构建过程中把模板文件转换成为 JavaScript 渲染函数。")]),t._v(" "),e("h4",{attrs:{id:"提取组件的-css"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#提取组件的-css"}},[t._v("#")]),t._v(" 提取组件的 CSS")]),t._v(" "),e("p",[t._v("当使用单文件组件时，组件内的 CSS 会以 ")]),e("style")])}),[],!1,null,null,null);e.default=r.exports}}]);