(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{241:function(t,e,n){t.exports=n.p+"assets/img/luoxiaosheng.3e3f64f6.svg"},242:function(t,e,n){t.exports=n.p+"assets/img/luoxiaosheng_learning.c39ce245.svg"},243:function(t,e,n){t.exports=n.p+"assets/img/luoxiaosheng_wechat.8efd3324.svg"},332:function(t,e,n){"use strict";n.r(e);var a=n(14),s=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"_0-1learning"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_0-1learning"}},[t._v("#")]),t._v(" 0-1Learning")]),t._v(" "),e("p",[e("img",{attrs:{src:n(241),alt:"alt text",title:"公众号"}}),t._v(" "),e("img",{attrs:{src:n(242),alt:"alt text",title:"学习"}}),t._v(" "),e("img",{attrs:{src:n(243),alt:"alt text",title:"微信"}})]),t._v(" "),e("h2",{attrs:{id:"网络技术"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#网络技术"}},[t._v("#")]),t._v(" 网络技术")]),t._v(" "),e("h3",{attrs:{id:"webview-的用法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#webview-的用法"}},[t._v("#")]),t._v(" WebView 的用法")]),t._v(" "),e("p",[t._v("有时候我们可能会碰到一些比较特殊的需求，比如说要求在应用程序里展示一些网页。\n相信每个人都知道，加载和显示网页通常都是浏览器的任务，但是需求里又明确指出，不允\n许打开系统浏览器，而我们当然也不可能自己去编写一个浏览器出来，这时应该怎么办呢？\n不用担心，Android 早就已经考虑到了这种需求，并提供了一个WebView 控件，借助它\n我们就可以在自己的应用程序里嵌入一个浏览器，从而非常轻松地展示各种各样的网页。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('1.布局文件\n<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"\n    android:layout_width="match_parent"\n    android:layout_height="match_parent" >\n\n    <WebView\n        android:id="@+id/web_view"\n        android:layout_width="match_parent"\n        android:layout_height="match_parent" />\n</LinearLayout>\n\n2.activity添加网页url\npublic class MainActivity extends Activity {\n    private WebView webView;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        \n        webView = (WebView) findViewById(R.id.web_view);\n        webView.getSettings().setJavaScriptEnabled(true);   //让WebView 支持JavaScript 脚本。\n        webView.setWebViewClient(new WebViewClient());  // 表示当前WebView可以处理打开新网页的请求，不用借助系统浏览器\n        webView.loadUrl("http://www.baidu.com");\n    }\n}\n\n3.权限申明\n<uses-permission android:name="android.permission.INTERNET" />\n')])])]),e("h3",{attrs:{id:"使用http-协议访问网络"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用http-协议访问网络"}},[t._v("#")]),t._v(" 使用HTTP 协议访问网络")]),t._v(" "),e("h4",{attrs:{id:"使用httpurlconnection"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用httpurlconnection"}},[t._v("#")]),t._v(" 使用HttpURLConnection")]),t._v(" "),e("p",[t._v('首先需要获取到HttpURLConnection 的实例，一般只需new 出一个URL 对象，并传入目标的网络地址，然后调用一下openConnection()方法即可，如下所示：\nURL url = new URL("http://www.baidu.com");\nHttpURLConnection connection = (HttpURLConnection) url.openConnection();')]),t._v(" "),e("p",[t._v('得到了HttpURLConnection 的实例之后，我们可以设置一下HTTP 请求所使用的方法。常用的方法主要有两个，GET 和POST。\nconnection.setRequestMethod("GET");')]),t._v(" "),e("p",[t._v("设置连接超时、读取超时的毫秒数，以及服务器希望得到的一些消息头等。这部分内容根据自己的实际情况进行编写，示例写法如下：\nconnection.setConnectTimeout(8000);\nconnection.setReadTimeout(8000);")]),t._v(" "),e("p",[t._v("之后再调用getInputStream()方法就可以获取到服务器返回的输入流了，剩下的任务就是对输入流进行读取，如下所示：\nInputStream in = connection.getInputStream();\n//下面对获取到的输入流进行读取\nBufferedReader reader = new BufferedReader(new\nInputStreamReader(in));\nStringBuilder response = new StringBuilder();\nString line;\nwhile ((line = reader.readLine()) != null) {\nresponse.append(line);\n}\nresponse.toString();//输出")]),t._v(" "),e("p",[t._v("最后可以调用disconnect()方法将这个HTTP 连接关闭掉，如下所示：\nconnection.disconnect();")]),t._v(" "),e("h3",{attrs:{id:"解析json格式数据"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#解析json格式数据"}},[t._v("#")]),t._v(" 解析JSON格式数据")]),t._v(" "),e("p",[t._v("比起XML，JSON 的主要优势在于它的体积更小，在网络上传输的时候可以更省流量。但缺点在于，它的语义性较差，看起来不如XML 直观。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('[{"id":"5","version":"5.5","name":"Angry Birds"},\n{"id":"6","version":"7.0","name":"Clash of Clans"},\n{"id":"7","version":"3.5","name":"Hey Day"}]\n')])])]),e("h4",{attrs:{id:"使用jsonobject"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用jsonobject"}},[t._v("#")]),t._v(" 使用JSONObject")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('HttpClient httpClient = new DefaultHttpClient();\n// 指定访问的服务器地址是电脑本机\nHttpGet httpGet = new HttpGet("http://10.0.2.2/get_data.json");\n\nHttpResponse httpResponse = httpClient.execute(httpGet);\nif (httpResponse.getStatusLine().getStatusCode() == 200) {\n    // 请求和响应都成功了\n    HttpEntity entity = httpResponse.getEntity();\n    String response = EntityUtils.toString(entity,"utf-8");\n    parseJSONWithJSONObject(response);\n    }\n} catch (Exception e) {\n  e.printStackTrace();\n}\n\n')])])]),e("h4",{attrs:{id:"使用gson"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用gson"}},[t._v("#")]),t._v(" 使用GSON")]),t._v(" "),e("p",[t._v("1.解析一般对象")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('比如说一段JSON 格式的数据如下所示：\n{"name":"Tom","age":20}\n那我们就可以定义一个Person 类，并加入name 和age 这两个字段：\nGson gson = new Gson();\nPerson person = gson.fromJson(jsonData, Person.class);\n')])])]),e("p",[t._v("2.解析数组\n要借助TypeToken 将期望解析成的数据类型传入到fromJson()方法中，如下所示：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("List<Person> people = gson.fromJson(jsonData, new TypeToken<List<Person>>(){}.getType());\n")])])])])}),[],!1,null,null,null);e.default=s.exports}}]);