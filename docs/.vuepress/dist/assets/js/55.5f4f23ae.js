(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{241:function(e,a,t){e.exports=t.p+"assets/img/luoxiaosheng.3e3f64f6.svg"},242:function(e,a,t){e.exports=t.p+"assets/img/luoxiaosheng_learning.c39ce245.svg"},243:function(e,a,t){e.exports=t.p+"assets/img/luoxiaosheng_wechat.8efd3324.svg"},353:function(e,a,t){"use strict";t.r(a);var s=t(14),r=Object(s.a)({},(function(){var e=this,a=e._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"_0-1learning"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0-1learning"}},[e._v("#")]),e._v(" 0-1Learning")]),e._v(" "),a("p",[a("img",{attrs:{src:t(241),alt:"alt text",title:"公众号"}}),e._v(" "),a("img",{attrs:{src:t(242),alt:"alt text",title:"学习"}}),e._v(" "),a("img",{attrs:{src:t(243),alt:"alt text",title:"微信"}})]),e._v(" "),a("h2",{attrs:{id:"ios-overview总述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ios-overview总述"}},[e._v("#")]),e._v(" ios-overview总述")]),e._v(" "),a("h3",{attrs:{id:"cocoapod包管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cocoapod包管理"}},[e._v("#")]),e._v(" cocoaPod包管理")]),e._v(" "),a("p",[e._v("mac自带gem（ruby包管理），可以替换国内源\ngem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/")]),e._v(" "),a("p",[e._v("安装cocoaPod")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("sudo gem install cocoapods\n或\nsudo gem install -n /usr/local/bin cocoapods\n")])])]),a("p",[e._v("pod setup//配置pod\npod search MJExtension//查找第三方库")]),e._v(" "),a("p",[e._v("Podfile：要导入的第三方都要在这里面写上\nPodfile的格式大概如下，其中。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("platform :ios,'8.0'\ntarget 'Test' do    //'Test'为你的target的名字（即项目名）\npod 'MJExtension', '~> 3.0.13'  //这里即为第三方包和版本\nend\n")])])]),a("p",[e._v("安装依赖包，命令为：pod install。")]),e._v(" "),a("h3",{attrs:{id:"cocoapod依赖"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cocoapod依赖"}},[e._v("#")]),e._v(" cocoaPod依赖")]),e._v(" "),a("p",[e._v("Podfile文件：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("# Uncomment the next line to define a global platform for your project\n# platform :ios, '9.0'\n\ntarget 'MNWeibo' do\n  # Comment the next line if you don't want to use dynamic frameworks\n  use_frameworks!\n\n  # Pods for MNWeibo\npod \"AFNetworking\"  //网络请求\npod \"SDWebImage\"    //网络图片加载\npod \"YYModel\"       //\npod \"FMDB\"\npod 'SVProgressHUD', :git => 'https://github.com/SVProgressHUD/SVProgressHUD.git'\npod \"pop\"\npod 'SnapKit', '~> 5.0.0'\npod \"Weibo_SDK\", :git => \"https://github.com/sinaweibosdk/weibo_ios_sdk.git\"\n\n  target 'MNWeiboTests' do\n    inherit! :search_paths\n    # Pods for testing\n  end\n\n  target 'MNWeiboUITests' do\n    inherit! :search_paths\n    # Pods for testing\n  end\n\nend\n\n")])])]),a("h3",{attrs:{id:"carthage包管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#carthage包管理"}},[e._v("#")]),e._v(" Carthage包管理")]),e._v(" "),a("p",[e._v("安装brew install carthage")]),e._v(" "),a("p",[e._v("进入项目所在文件夹\ncd ~/路径/项目文件夹\n创建一个空的 Carthage 文件 Cartfile\ntouch Cartfile")]),e._v(" "),a("p",[e._v("使用 Xcode 打开 Cartfile 文件\nopen -a Xcode Cartfile")]),e._v(" "),a("p",[e._v('编辑 Cartfile【可手动打开进行编辑】\ngithub "Alamofire/Alamofire" == 4.4.0')]),e._v(" "),a("p",[e._v("执行更新命令\n$ carthage update --platform iOS")]),e._v(" "),a("p",[e._v("更新成功后，项目文件夹中会多出三个文件\ncartfile\nCartfile.resolved\nCarthage/\nBuild/\nCheckouts/")]),e._v(" "),a("p",[e._v('用Carthage来管理项目的第三方库时，在描述文件中添加完第三方库，在终端执行更新命令，显示获取完第三方库后，返回error: unable to find utility "xcodebuild", not a developer tool or in PATH，\n并且Carthage的Build文件夹中什么也没有，根本没有动态库可以拖到项目中\n在Stack Overflow中找到答案，见问答地址。\n即大概因为Carthage是先将第三方框架编译成动态库(.framework的二进制文件)，所以需要先指定一个编译工具。在Xcode > Preferences > Locations中的下拉菜单里选择命令行工具。如果只安装了Xcode的一个版本，那么应该只有一个选项。如果有几个版本的Xcode，那么选择需要的版本。')]),e._v(" "),a("h3",{attrs:{id:"swift-package-manager包管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#swift-package-manager包管理"}},[e._v("#")]),e._v(" Swift Package Manager包管理")]),e._v(" "),a("p",[e._v("点击项目——Swift Packages——添加对应的包即可")]),e._v(" "),a("h3",{attrs:{id:"afnetworking"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#afnetworking"}},[e._v("#")]),e._v(" AFNetworking")]),e._v(" "),a("p",[e._v('Swift Package Manager引入\ndependencies: [\n.package(url: "https://github.com/AFNetworking/AFNetworking.git", .upToNextMajor(from: "4.0.0"))\n]')]),e._v(" "),a("h3",{attrs:{id:"alamofire-swift网络框架"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#alamofire-swift网络框架"}},[e._v("#")]),e._v(" Alamofire（Swift网络框架）")]),e._v(" "),a("p",[e._v("引入\npod 'Alamofire', '~> 5.2'")]),e._v(" "),a("p",[e._v("使用一：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let parameters: Parameters = [\n    "foo": [1,2,3],\n    "bar": [\n    "baz": "qux"\n]\nAlamofire.request("https://httpbin.org/post", method: .post, parameters: parameters, encoding: JSONEncoding.default)\n')])])]),a("p",[e._v("使用二：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('Alamofire.request("https://httpbin.org/get")\n.validate(statusCode: 200..<300)\n.validate(contentType: ["application/json"])\n.responseData { response in\n    switch response.result {\n    case .success:\n        print("Validation Successful")\n        case .failure(let error):\n        print(error)\n    }\n}\n')])])]),a("h3",{attrs:{id:"moya"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#moya"}},[e._v("#")]),e._v(" Moya")]),e._v(" "),a("p",[e._v("Alamofire请求时输入各种请求的条件(url, parameters, header,validate etc)的时候略显累赘，如果我们要设置默认parameters，还有针对特定API做修改的时候，实现起来就会很费劲。\n然后，就有了我们Moya。")]),e._v(" "),a("p",[e._v("简单使用：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public enum GitHub {\n    case zen\n    case userProfile(String)\n    case userRepositories(String)\n}\n\nextension GitHub: TargetType {\n    // 略过\n}\n\nlet provider = MoyaProvider<GitHub>()\nprovider.request(.zen) { result in\n    // `result` is either .success(response) or .failure(error)\n}\n")])])]),a("ol",[a("li",[e._v("创建一个Provider\nprovider是网络请求的提供者，你所有的网络请求都通过provider来调用。我们先创建一个provider。")])]),e._v(" "),a("p",[e._v("provider最简单的创建方法:")]),e._v(" "),a("p",[e._v("// GitHub就是一个遵循TargetType协议的枚举(看上面例子)\nlet provider = MoyaProvider"),a("GitHub",[e._v("()")])],1),e._v(" "),a("p",[e._v('2.网络请求\nprovider.request(.zen) { result in\nvar message = "Couldn\'t access API"\nif case let .success(response) = result {\nlet jsonString = try? response.mapString()\nmessage = jsonString ?? message\n}\nself.showAlert("Zen", message: message)\n}')]),e._v(" "),a("ol",{attrs:{start:"3"}},[a("li")]),e._v(" "),a("h3",{attrs:{id:"sdwebimage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sdwebimage"}},[e._v("#")]),e._v(" SDWebImage")]),e._v(" "),a("p",[e._v('图片处理：加载，圆角\n导包\nimport SDWebImage\n引入示例：\nimageView.sd_setImage(with: URL(string: "http://www.domain.com/path/to/image.jpg"), placeholderImage: UIImage(named: "placeholder.png"))\n引入示例：\navatarImageView.sd_setImage(with: url, placeholderImage: UIImage(named: "avatar_default_big"))')]),e._v(" "),a("h3",{attrs:{id:"fmdb"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fmdb"}},[e._v("#")]),e._v(" FMDB")]),e._v(" "),a("p",[e._v("数据缓存：SQLite周围的Cocoa/ Objective-C包装器")]),e._v(" "),a("h3",{attrs:{id:"svprogresshud-进度条"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#svprogresshud-进度条"}},[e._v("#")]),e._v(" SVProgressHUD（进度条）")]),e._v(" "),a("p",[e._v("pod 'SVProgressHUD'")]),e._v(" "),a("h3",{attrs:{id:"pop-动画库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pop-动画库"}},[e._v("#")]),e._v(" pop（动画库）")]),e._v(" "),a("p",[e._v("一个可扩展的iOS和OS X动画库，对于基于物理的交互非常有用。")]),e._v(" "),a("h3",{attrs:{id:"snapkit-自动布局"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#snapkit-自动布局"}},[e._v("#")]),e._v(" SnapKit（自动布局）")]),e._v(" "),a("p",[e._v("适用于iOS和OS X的Swift自动布局DSL")]),e._v(" "),a("h3",{attrs:{id:"kingfisher-图片缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kingfisher-图片缓存"}},[e._v("#")]),e._v(" Kingfisher（图片缓存）")]),e._v(" "),a("p",[e._v("用于从Web下载和缓存图像。它为您提供了使用纯Swift方法在​​下一个应用程序中处理远程图像的机会。")]),e._v(" "),a("h3",{attrs:{id:"moya-网络抽象层"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#moya-网络抽象层"}},[e._v("#")]),e._v(" Moya（网络抽象层）")]),e._v(" "),a("p",[e._v("pod 'Moya', '~> 14.0'")]),e._v(" "),a("h3",{attrs:{id:"objectmapper-对象、json转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#objectmapper-对象、json转换"}},[e._v("#")]),e._v(" objectmapper（对象、JSON转换）")]),e._v(" "),a("p",[e._v("pod 'ObjectMapper', '~> 3.5' (check releases to make sure this is the latest version)")]),e._v(" "),a("h3",{attrs:{id:"realm-数据库管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#realm-数据库管理"}},[e._v("#")]),e._v(" Realm（数据库管理）")]),e._v(" "),a("p",[e._v("pod 'RealmSwift'")])])}),[],!1,null,null,null);a.default=r.exports}}]);